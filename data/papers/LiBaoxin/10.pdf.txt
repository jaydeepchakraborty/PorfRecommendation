arXiv:1607.06416v1 [cs.CV] 21 Jul 2016

Hierarchical Attention Network for Action
Recognition in Videos

Yilin Wang
Arizona State University
ywang370@asu.edu

Suhang Wang
Arizona State University
suhang.wang@asu.edu

Jiliang Tang
Yahoo Research
jlt@yahoo-inc.com

Neil O’Hare
Yahoo Research
nohare@yahoo-inc.com

Yi Chang
Yahoo Research
yichang@yahoo-inc.com

Baoxin Li
Arizona State University
baoxin.li@asu.edu

Abstract
Understanding human actions in wild videos is an important task with a broad range
of applications. In this paper we propose a novel approach named Hierarchical
Attention Network (HAN), which enables to incorporate static spatial information,
short-term motion information and long-term video temporal structures for complex
human action understanding. Compared to recent convolutional neural network
based approaches, HAN has following advantages – (1) HAN can efficiently capture
video temporal structures in a longer range; (2) HAN is able to reveal temporal
transitions between frame chunks with different time steps, i.e. it explicitly models
the temporal transitions between frames as well as video segments and (3) with
a multiple step spatial temporal attention mechanism, HAN automatically learns
important regions in video frames and temporal segments in the video. The
proposed model is trained and evaluated on the standard video action benchmarks,
i.e., UCF-101 and HMDB-51, and it significantly outperforms the state-of-the arts.

1

Introduction

Understanding human actions in wild videos can advance many real-world applications such as social
activity analysis, video surveillance and event detection. Earlier works typically rely on hand craft
features to represent videos [14, 19]. They often consist of two steps: motion detection and feature
extraction. First, motion detectors are applied to detect the informative motion regions in the videos
and then, hand craft descriptors such HOG [3], SIFT, or improved Dense Trajectories (iDT) [19]
extract the feature patterns from those motion regions to represent the video. In contrast to hand-craft
shallow video representation, recent efforts try to learn video representation automatically from large
scale labeled video data [10, 16, 4, 20, 8]. For example, In [10], authors stack the video frames as the
input for convolution neural networks (CNN) and two stream CNNs [16] combine optical flow and
RGB video frames to train CNN and achieve comparable results with the state-of-the art hand craft
based methods. Very recently, dense trajectory pooled CNN that combines iDT and two stream CNNs
via the pooling layer achieves the state-of-the-art performance. However, [16] and [20] merely use
short term motions that cannot capture the order of motion segments and semantic meanings.
The challenges of action recognition in wild videos are three-fold. First, there are large intra-class
appearance and motion variances in the same action due to different viewpoints, motion speeds,
backgrounds, etc. Second, wild videos are often collected from movies, TV shows and media
platforms and usually have very low resolutions and noise background clutters, which exacerbate
the difficulty for video understanding. Third, long range temporal dependencies are very difficult to
capture. For example, the Optical Flow, iDT and 3D ConvNets [8] are computed within a short-time
2016 ( May), Arizona State University, AZ.

Figure 1: An Illustration of the Proposed Model. The block LSTM means a LSTM cell, whose
structure is given in Figure 2. The block ATTN indicates the operation to calculate attention weights
by using the encoded features from both LSTMs. The block WA represents the weighted average of
the input features with the weights from ATTN.
window. Long Short Term Memory (LSTM) has been recently applied to video analysis [4] that
provides a memory cell for long temporal information. However, it has been shown that the favorable
time range of LSTM is around 40 frames [15, 22]. In this work, we aim to develop a novel framework
to tackle these obstacles for action recognition in videos.
In this paper, we study the problem of video representation learning for action recognition. In
particular, we investigate – (1) how to utilize the temporal structures in the video to handle intraappearance variances and background clutters by capturing the informative spatial regions; and
(2) how to model the short-term as well as long-term motion dependencies for action recognition.
Providing answers to these two research questions, we propose a novel Hierarchical Attention
Network (HAN) that employs a hierarchical structure with recurrent neural network unit e.g., LSTM
and a soft spatial temporal attention mechanism for video action recognition. Our contributions can
be summarized as below:
• We propose a novel deep learning framework HAN for video action recognition which
can explicitly capture both short-term and long-term motion information in an end to end
process.
• A soft attention is adopted on the spatial-temporal input features with LSTM to learn the
important regions in a frame and the crucial frames in the videos.
• We conduct an extensive set of experiments to demonstrate that the proposed framework
HAN is superior to both state-of-the art shallow video representation based approaches and
deep video representation based approaches on benchmark datasets.
The rest of this paper is organized as follows. Section 2 reviews related works. Section 3 describes
the proposed hierarchical attention deep learning framework in detail. Experimental results and
comparisons are discussed in Section 4, followed by conclusions in Section 5.

2

Related Work

Hand crafted features: Video action recognition is a longstanding topic in computer vision community. Many hand-crafted features are used in still images. For example, [14] extends 2D harri corner
detector to spatial temporal 3D interest points and achieves good performance with SVM classifier.
Later, HOG3D that is based on HOG feature [3] shows its effectiveness by using integral images.
2

Then improved Dense trajectories [19] has dominated the filed of action recognition. It densely
samples interest points and tracks them within a short time period. For each point, local descriptors
such as HOG, MBH and HOF are extracted for representation. Then, all the features are encoded by
the fish vector as the final video representation.
Deep learned features: Deep learning such as convolutional neural network has been shown its
success in object detection and image classification in recent years. Based on image CNN, [8, 10]
extends the CNN framework to videos by stacking video frames. However, the performance is lower
than iDT based approaches. In order to better incorporate temporal information, [16] proposes
two stream CNNs and achieves comparable results with the state-of-the art performance of hand
craft based feature representations [19]. To consider the time dependency, [22] proposes a LSTM
based recurrent neural network to model the video sequences. Different from [22] that uses a stack
based LSTM, the proposed HAN proposes a hierarchical structure to model the video sequences in a
multi-scale fashion.
Recurrent visual attention model: Visual attention model aims to capture the property of human
perception mechanism by identifying the interesting regions in the images. Saliency detection [7]
typically predicts the human eye movement and fixations for a given image. In [21], a recurrent is
proposed to understand where the model focuses on image caption generations. Moreover, recurrent
attention model has been applied to other sequence modeling such as machine translation [12] and
image generation[6].

3

The Proposed Method

The overall architecture of HAN is shown in 1. We describe the three major components of HAN in
this section – the input appearance and motion CNN feature extraction, temporal sequence modeling
and hierarchical attention model.
3.1

Appearance and Motion Feature Extraction

In general, HAN can adopt any deep convolution networks [8, 16, 20] for feature extraction. In this
paper, we use two stream ConvNets [16] to extract both appearance and motion features. Specifically,
we train a VGG net [17] to extract feature map fP and fQ for the t-th frame image P t and the
corresponding optical flow image Qt :
fP t = CN Nvgg (P t )
fQt = CN Nvgg (Qt )

(1)

Unlike two stream ConvNets [16] that employs the last fully connected layer as the input feature, we
use the features for fP and fQ from the last convolutional layer after pooling, which contains the
spatial information of the input appearance and motion images. The input appearance and motion
images are first rescaled to 224 × 224 and the extracted feature maps from the last pooling layer have
the dimension of D ×K ×K (512×14×14 used in VGG net). K ×K is the number of regions in the
input image and D is the number of the feature dimensions. Thus at each time step, we extract K 2 D
dimension feature vectors for both appearance and motion images. We refer these feature vectors as
feature cube shown in Figure 3. Then, the feature maps fP t and fQ can be denoted in matrix forms
2
2
as Pt = [pt1 , pt2 , . . . , ptK 2 ] ∈ RD×K and Qt = [qt1 , qt2 , . . . , qtK 2 ] ∈ RD×K , respectively.
3.2

Recurrent Neural Network

Long-short term memory (LSTM), which has the ability to preserve sequence information over time
and capture long-term dependencies, has become a very popular model for sequential modeling tasks
such as speech recognition [5], machine translation [1] and program execution [24]. Recent advances
in computer vision also suggest that LSTM has potentials to model videos for action recognition [15].
We follow the LSTM implementation in [25], which is given as follows
3

Figure 2: Illustration of One LSTM Cell

it
ft
ot
gt
ct
ht

= σ(Wix xt + Wih ht−1 + bi )
= σ(Wf x xt + Wf h ht−1 + bf )
= σ(Wox xt + Woh ht−1 + b + o)
= tanh(Wgx xt + Wgh ht−1 + bg )
= ft  ct−1 + it  gt
= ot  tanh(ct )

(2)

where it is the input gate, ft is the forget gate, ot is the forget fate, ct is the memory cell state at
t and xt is the input features at t. σ(·) means the sigmoid function and  denotes the Hadmard
product. The main idea of the LSTM model is the memory cell ct , which records the history of the
inputs observed up to t. ct is a summation of – (1) the previous memory cell ct−1 modulated by a
sigmoid gate ft , and (2) gt , a function of previous hidden states and the current input modulated by
another sigmoid gate it . The sigmoid gate ft is to selectively forget its previous memory while it is to
selectively accept the current input. it is the gate controlling the output. The illustration of a cell of
LSTM at the time step t is shown in Figure 2. Next we will introduce how to model both appearance
and motion features using LSTM and how to integrate attention by using encoded features.
3.3

Hierarchical LSTMs to Capture Temporal Structures

One natural way of modeling videos is to feed features Pt and Qt into two LSTMs and then put a
classifier at the output of LSTMs for classification. However, this straightforward method doesn’t
fully utilize the structure of actions. In real world, an action is usually composed of a set of subactions, which means that video temporal structures are intrinsically layered. For example, a video
about long jump consists of three sub-actions – pushing off the board, flying over the pit and landing.
As the three actions take place sequentially, there are strong temporal dependencies among them thus
we need to appropriately model the temporal structure among the three actions. In the meantime,
the temporal structure within each action is composed of multiple actions. For example, pushing
off the board is composed of running and jump. In other words, the actions we want to recognize
are layered and we need to model video temporal structure with multiple granularities. However,
directly applying LSTM cannot capture this property. To fully capture the video temporal structure,
we develop a hierarchical LSTM. An illustration of the hierarchical LSTM is shown in the purple
rectangle in Figure 1. This hierarchical LSTM is composed of two layers – the first layer accepts the
appearance feature of each frame as the input and the output of the first layer LSTM is used as the
input of the second layer LSTM. To capture the dependencies between different sub-actions such
as dependencies between pushing off the board, flying over the pit and landing, we skip every k
4

encoded features from LSTM and use that as the input to the second layer. In addition to capturing the
video temporal structure, another advantage of layered LSTM is to increase the learning capability of
LSTM. By adding another layer in LSTM, we allow LSTM to learn higher level and more complex
features, which is a common practice proven to work well in other deep architectures such as CNN,
DNN and DBM. Thus, as shown in Figure 1, we use two hierarchical LSTMs to model the appearance
and motion features, respectively.
3.4

Attention Model to Capture Spatial Structures

Figure 3: attention
The K 2 vectors in the appearance Pt (or motion features Qt ) correspond to K 2 regions in the t-th
frame, which essentially encode the spatial structures. For action recognition, not every region of
the frames are relevant for the task at hand. Obviously, we want to focus on the regions where the
action is happening. For the action shown in Figure 3, we want to mainly focus on hands and legs
that are useful for identifying the action; while the background is noisy as a person can perform the
same action at different locations. Therefore we could confuse the classifier if we also target on
backgrounds. Thus, it is natural for us to assign different attention weights to different regions of
the frame. Since video frames are sequential, neighboring frames have strong dependencies, which
suggests that we can use the encoded features at time t − 1 to predict the attention weights at time t
and then use the attention weights to refine the input. Specifically, at each time step t − 1, we use a
softmax function over K × K locations to predict the importance of the K 2 locations in the frame,
which is written as:
exp(wiT ht−1 )
lit = PK 2
(3)
T
j=1 exp(wj ht−1 )
where lit is the importance weight of the i-th region of the t-th frame, W = {w1 , w2 , . . . , wK 2 } ∈
2
q,1
R2D×K are the weights of the softmax function and ht−1 is the concatenation of hp,1
t−1 and ht−1 , i.e.,
the encoded appearance and motion features of the (t − 1)-th frame from the first layer LSTM. Note
that we use the encoded appearance feature and motion feature jointly to compute the attention weights
instead of computing two attention weights by using the two features, separately. Its advantages
are two fold. First, the flow and appearance features capture different aspects of the frame but the
5

attention location on the video should be the same, thus we do not need to calculate two sets of
attentions for appearance and optical LSTM separately, which may introduce more computational
cost. Second, appearance and motion features provide complimentary information that may help
predict more accurate attention. With the attention weights given above, the inputs of the two LSTMs
are the weighted average of different locations as:
2

xpt =

K
X

2

lit pti and xqt =

i=1

3.5

K
X

lit qti

(4)

i=1

Action Recognition with HAN

We use hp,i
T to denote the encoding of the the video by the i-the layer LSTM for the appearance
features and hq,i
T for motion features. As mentioned above, the hierarchical LSTM captures multigranularity of video temporal structures, thus, encoded features in different levels (different i) provide
distinct descriptions of different granularity about actions, which are all useful for action recognition.
In addition, the two LSTMs encode complementary information from appearance and motion features,
thus encoded features from appearance and motion are also relevant for action recognition. Therefore,
p,L
q,L
q,L
we concatenate these features as hf = [hp,1
T , . . . , hT , hT , . . . , hT ], where L is the number of
layers in each LSTM. We then use the softmax function to predict the probability that the video vi is
classified into the class c as
p(c|vi , HAN) = softmax(HAN(vi ))
and the loss function is
max

HAN,Ws

N
X

log p(yi |vi , HAN)

(5)

(6)

i=1

where N is number of videos, yi is the label of vi and Ws are the weights of the softmax classifier.

4

Experiments

In this section, we first present the details of datasets and the evaluation protocol. Then, we describe
the details of the implementation of our method. Finally, we present the experimental results with
discussions.
4.1

Datasets and evaluation protocol

The evaluation is conducted on two public benchmark datasets, i.e., UCF-101 [18] and HMDB51[11].
These two datasets are among the largest available annotated video action recognition datasets that
have been used in [10, 15, 16, 19, 20]. Specifically, UCF-101 contains 13, 000 videos annotated
into 101 action classes with each class having at least 100 videos. HMDB51 is composed of 6, 700
videos from 51 action categories and each category has at least 100 video clips. For both datasets,
the evaluation protocol is the same – we follow the train/test splits provided by the corresponding
organizers. The performance is measured by the mean of accuracies across all the splits in each
dataset.
4.2

Experiments Setting

Training two stream CNNs and HANs: Compared to image classification and detection, training
a good deep convolutional neural network for videos understanding is more challenging. Similar to
[20, 16], we use the training data in UCF 101 split to train two stream CNNs. In our implementation,
we use the Caffe toolbox [9] and the layer configuration is the same as [17]. All hidden layers use
the rectification activation functions and max pooling is performed over 2 × 2. Finally, each of the
two networks contains 13 convolutional layers and 3 fully connected layers. The training procedure
is similar to [20, 16], where we use mini-batch stochastic gradient descent with momentum (0.9).
The learning rate is initially set to 10−2 , then changed to 10−3 after 10, 000 iterations and stopped
after 30, 000 iterations and 10, 000 iterations for spatial and temporal nets, respectively. We use the
Theano toolbox for HAN implementation and the model is trained by using Adadelta [26]. The
6

dimension of LSTM is 1, 024 and the batch size is fixed to 128 . Techniques of dropout [2] and BPTT
are used.
Optical flow: The optical flow is computed by the off-the-shelf OpenCV toolbox with GPU
implementation of [23]. Since the computational cost of optical flow is the bottleneck for the two
stream CNN training. We pre-computed all the optical flow images and stored the horizontal and
vertical components. The optical flow is computed by the adjacent two frames. In the testing stage,
we fix the number of frames with the equal temporal window between them.
4.3

Results and Analysis

We compare our models with a set of baselines proposed recently [15, 22, 16, 20, 10, 13] including
shallow video representation methods and deep ConvNets methods. We first evaluate our proposed
Table 1: Average accuracy over three splits on UCF-101 and HMDB51
Model
Full HAN (spatial CNN cube+temporal CNN cube)
HAN without attention1 (spatial CNN cube +temporal CNN cube)
HAN without attention2 (spatial CNN 4096+ temporal CNN 4096)
Spatial HAN (spatial CNN cube)
Temporal HAN (temporal CNN cube)

UCF-101
92.7%
90.6%
91.1%
75.1%
85.4%

HMDB51
64.3%
62.0%
62.7%
47.7%
58.3%

HAN on UCF-101 and HMDB51 datasets by comparing HAN with different settings to show the
importance of each key component in HAN in Table 1. Then, we further compare HAN with
state-of-the art methods and experimental results are reported in Table 2. From the tables, we can
make the following observations:
• The proposed method with hierarchical LSTM outperforms methods without hierarchical
structures [22, 10, 16]. These results support that (1) the usage of LSTM can capture
video sequences by considering the order of the motion transitions; and (2) the proposed
hierarchical structure can effectively model the complex and long time range actions in
videos.
• Compared with methods without the attention components, the proposed HAN encourages
the model to focus on the important regions in frames during the learning process, which
improves the discriminative ability for classification. For example, in Figure 4 (b) and
Figure 4 (e), we can see that our model can learn the important regions for actions more
accurately.
• The temporal and spatial features are complementary. First, by combining them together,
both of them have been improved significantly. Second, compared with [15] that only considers attention in spatial, HAN can predict more motion related regions in the videos. Third,
compared to TDD, the proposed HAN achieves comparable results without considering
the iDT information, which suggests that the learned attention regions can have the similar
ability to dense trajectory points and reduce the negative impact of background noises.
• Compared to state-of-the art methods on UCF and HMDB51, HAN outperforms them
remarkably except [20]. The major reason for the exception is that the dataset HMDB is
relatively small and the content is unconstrained, while the method in [20] incorporates iDT
features that are computationally expensive.

5

Conclusion and Future Work

In this paper, we propose a hybrid deep framework by incorporating a hierarchical structure and joint
attention model to the two stream convnet approach for human action recognition. The experimental
results suggest that the proposed framework outperforms the two stream convnet approach. Despite
using the only optical flow images as input, HAN achieves comparable performance with the state-ofthe art method TDD that is much more computationally expensive. These results further support that
(1) the hierarchical structure in HAN is important because it can model the frame transitions as well
7

(a) The sampled frame

(b) Attention results from HAN (c) Attention results from [15]

(d) The sampled frame

(e) Attention results from HAN (f) Attention results from [15]

Figure 4: Visual attention comparison between HAN and soft attention model in [15], the green and
red circles highlight the most important region learned by HAN and [15] respectively.
Table 2: Comparison with state of the art methods on UCF101 and HMDB51.
Model
Histogram of Oriented Gradient
Improved dense trajectories (iDT) [19]
iDT + Stack Fish Vector [13]
spatial-temporal CNN [10]
two stream CNN [16]
two stream CNN+LSTM [22]
two stream CNN + iDT [20]
Soft Attention +LSTM [15]
Hierarchical Attention Networks

UCF-101
72.4 %
85.9%
N/A
65.4%
88.0%
88.6%
91.5%
84.96%
92.7%

HMDB51
40.2%
57.2%
66.8%
N/A
59.4%
N/A
65.9%
41.3%
64.3%

as long video segments and (2) the joint visual attention can help HAN focus on the important video
regions and reduce the effect of noisy background. HAN is powerful in sequence modeling thus we
would like to explore more applications for HAN in the future such as video event detection since a
video event usually contains many sub-events and these sub-events have high dependencies to each.
References
[1] Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. Neural machine translation by jointly
learning to align and translate. In Proceedings of ICLR, 2015.
[2] George E Dahl, Tara N Sainath, and Geoffrey E Hinton. Improving deep neural networks for
lvcsr using rectified linear units and dropout. In ICASSP, pages 8609–8613. IEEE, 2013.
[3] Navneet Dalal and Bill Triggs. Histograms of oriented gradients for human detection. In CVPR.
IEEE, 2005.
[4] Jeffrey Donahue, Lisa Anne Hendricks, Sergio Guadarrama, Marcus Rohrbach, Subhashini
Venugopalan, Kate Saenko, and Trevor Darrell. Long-term recurrent convolutional networks
for visual recognition and description. In CVPR, pages 2625–2634, 2015.
8

[5] Alan Graves, Navdeep Jaitly, and Abdel-rahman Mohamed. Hybrid speech recognition with
deep bidirectional lstm. In ASRU Workshop, pages 273–278. IEEE, 2013.
[6] Karol Gregor, Ivo Danihelka, Alex Graves, and Daan Wierstra. Draw: A recurrent neural
network for image generation. arXiv preprint arXiv:1502.04623, 2015.
[7] Laurent Itti, Christof Koch, and Ernst Niebur. A model of saliency-based visual attention for
rapid scene analysis. TPAMI, (11):1254–1259, 1998.
[8] Shuiwang Ji, Wei Xu, Ming Yang, and Kai Yu. 3d convolutional neural networks for human
action recognition. TPAMI, 35(1):221–231, 2013.
[9] Yangqing Jia, Evan Shelhamer, Jeff Donahue, Sergey Karayev, Jonathan Long, Ross Girshick,
Sergio Guadarrama, and Trevor Darrell. Caffe: Convolutional architecture for fast feature
embedding. In Multimedia, pages 675–678. ACM, 2014.
[10] Andrej Karpathy, George Toderici, Sanketh Shetty, Thomas Leung, Rahul Sukthankar, and
Li Fei-Fei. Large-scale video classification with convolutional neural networks. In CVPR, 2014.
[11] Hildegard Kuehne, Hueihan Jhuang, Estíbaliz Garrote, Tomaso Poggio, and Thomas Serre.
Hmdb: a large video database for human motion recognition. In ICCV. IEEE, 2011.
[12] Minh-Thang Luong, Hieu Pham, and Christopher D Manning. Effective approaches to attentionbased neural machine translation. arXiv preprint arXiv:1508.04025, 2015.
[13] Xiaojiang Peng, Changqing Zou, Yu Qiao, and Qiang Peng. Action recognition with stacked
fisher vectors. In Computer Vision–ECCV 2014, pages 581–595. Springer, 2014.
[14] Christian Schüldt, Ivan Laptev, and Barbara Caputo. Recognizing human actions: a local svm
approach. In ICPR, volume 3, pages 32–36. IEEE, 2004.
[15] Shikhar Sharma, Ryan Kiros, and Ruslan Salakhutdinov. Action recognition using visual
attention. In Proceedings Workshop of ICLR, 2015.
[16] Karen Simonyan and Andrew Zisserman. Two-stream convolutional networks for action
recognition in videos. In NIPS, pages 568–576, 2014.
[17] Karen Simonyan and Andrew Zisserman. Very deep convolutional networks for large-scale
image recognition. arXiv preprint arXiv:1409.1556, 2014.
[18] Khurram Soomro, Amir Roshan Zamir, and Mubarak Shah. Ucf101: A dataset of 101 human
actions classes from videos in the wild. arXiv preprint arXiv:1212.0402, 2012.
[19] Heng Wang and Cordelia Schmid. Action recognition with improved trajectories. In CVPR,
pages 3551–3558, 2013.
[20] Limin Wang, Yu Qiao, and Xiaoou Tang. Action recognition with trajectory-pooled deepconvolutional descriptors. In CVPR, pages 4305–4314, 2015.
[21] Kelvin Xu, Jimmy Ba, Ryan Kiros, Aaron Courville, Ruslan Salakhutdinov, Richard Zemel, and
Yoshua Bengio. Show, attend and tell: Neural image caption generation with visual attention.
arXiv preprint arXiv:1502.03044, 2015.
[22] Joe Yue-Hei Ng, Matthew Hausknecht, Sudheendra Vijayanarasimhan, Oriol Vinyals, Rajat
Monga, and George Toderici. Beyond short snippets: Deep networks for video classification. In
CVPR, pages 4694–4702, 2015.
[23] Christopher Zach, Thomas Pock, and Horst Bischof. A duality based approach for realtime tv-l
1 optical flow. In Pattern Recognition, pages 214–223. Springer, 2007.
[24] Wojciech Zaremba and Ilya Sutskever. Learning to execute. arXiv preprint arXiv:1410.4615,
2014.
[25] Wojciech Zaremba, Ilya Sutskever, and Oriol Vinyals. Recurrent neural network regularization.
arXiv preprint arXiv:1409.2329, 2014.
[26] Matthew D Zeiler. Adadelta: an adaptive learning rate method. arXiv preprint arXiv:1212.5701,
2012.
9

