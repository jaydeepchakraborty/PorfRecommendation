2014 IEEE 15th International Conference on High Performance Switching and Routing (HPSR)

On Shortest Single/Multiple Path Computation
Problems in Fiber-Wireless (FiWi) Access Networks
Chenyang Zhou∗ , Anisha Mazumder∗ , Arunabha Sen∗ , Martin Reisslein† and Andrea Richa∗
∗ School of Computing, Informatics and Decision Systems Engineering
† School of Electrical, Computer, and Energy Engineering

Arizona State University
Email: {czhou24, anisha.mazumder, asen, reisslein, aricha}@asu.edu

Abstract—Fiber-Wireless (FiWi) networks have received considerable attention in the research community in the last few
years as they offer an attractive way of integrating optical and
wireless technology. As in every other type of networks, routing
plays a major role in FiWi networks. Accordingly, a number of
routing algorithms for FiWi networks have been proposed. Most
of the routing algorithms attempt to ﬁnd the “shortest path”
from the source to the destination. A recent paper proposed
a novel path length metric, where the contribution of a link
towards path length computation depends not only on that link
but also every other link that constitutes the path from the
source to the destination. In this paper we address the problem
of computing the shortest path using this path length metric.
Moreover, we consider a variation of the metric and also provide
an algorithm to compute the shortest path using this variation.
As multipath routing provides a number of advantages over
single path routing, we consider disjoint path routing with the
new path length metric. We show that while the single path
computation problem can be solved in polynomial time in both
the cases, the disjoint path computation problem is NP-complete.
We provide optimal solution for the NP-complete problem using
integer linear programming and also provide two approximation
algorithms with a performance bound of 4 and 2 respectively.
The experimental evaluation of the approximation algorithms
produced a near optimal solution in a fraction of a second.

I. I NTRODUCTION
Path computation problems are arguably one of the most
well studied family of problems in communication networks.
In most of these problems, one or more weight is associated
with a link representing, among other things, the cost, delay or
the reliability of that link. The objective most often is to ﬁnd
a least weighted path (or “shortest path”) between a speciﬁed
source-destination node pair. In most of these problems, if a
link l is a part of a path P , then the contribution of the link
l on the “length” of the path P depends only on the weight
w(l) of the link l, and is oblivious of the weights of the links
traversed before or after traversing the link l on the path P .
However, in a recent paper on optical-wireless FiWi network
[5], the authors have proposed a path length metric, where the
contribution of the link l on the “length” of the path P depends
not only on its own weight w(l), but also on the weights
of all the links of the path P . As the authors of [5] do not
present any algorithm for computing the shortest path between
the source-destination node pair using this new metric, we
present a polynomial time algorithm for this problem in this
paper. This result is interesting because of the nature of new

978-1-4799-1633-7/14/$31.00 ©2014 IEEE

metric proposed in [5], one key property on which the shortest
path algorithm due to Dijkstra is based, that is, subpath of a
shortest path is shortest, is no longer valid. We show that even
without this key property, not only it is possible to compute
the shortest path in polynomial time using the new metric, it
is also possible to compute the shortest path in polynomial
time, with a variation of the metric proposed in [5].
The rest of the paper is organized as follows. In section
III, we present the path length metric proposed for the FiWi
network in [5] and a variation of it. In section IV we provide
algorithms for computing the shortest path using these two
metrics. As multi-path routing offers signiﬁcant advantage
over single path routing [6], [7], [8], [9], we also consider
the problem of computation of a pair of node disjoint paths
between a source-destination node pair using the metric proposed in [5]. We show that while the single path computation
problem can be solved in polynomial time in all these cases,
the disjoint path computation problem is NP-complete. The
contributions of the paper are as follows;
• Polynomial time algorithm for single path routing (metric
1) in FiWi networks
• Polynomial time algorithm for single path routing (metric
2) in FiWi networks
• NP-completeness proof of disjoint path routing (metric
1) in FiWi networks
• Optimal solution for disjoint path routing (metric 1) in
FiWi networks using Integer Linear Programming
• One approximation algorithm for disjoint path routing in
FiWi networks with an approximation bound of 4 and
computation complexity O((n + m)log n)
• One approximation algorithm for disjoint path routing in
FiWi networks with an approximation bound of 2 and
computation complexity O(m(n + m)log n)
• Experimental evaluation results of the approximation
algorithm for disjoint path routing in FiWi networks
II. R ELATED W ORK
Fiber-Wirelss (FiWi) networks is a hybrid access network
resulting from the convergence of optical access networks
such as Passive Optical Networks (PONs) and wireless access
networks such as Wireless Mesh Networks (WMNs) capable of providing low cost, high bandwidth last mile access.

131

Because it provides an attractive way of integrating optical
and wireless technology, Fiber-Wireless (FiWi) networks have
received considerable attention in the research community in
the last few years [1], [2], [3], [4], [5], [8], [9]. The minimum
interference routing algorithm for the FiWi environment was
ﬁrst proposed in [4]. In this algorithm the path length was
measured in terms of the number of hops in the wireless
part of the FiWi network. The rationale for this choice was
that the maximum throughput of the wireless part is typically
much smaller than the throughput of the optical part, and
hence minimization of the wireless hop count should lead to
maximizing the throughout of the FiWi network. However,
the authors of [5] noted that minimization of the wireless
hop count does not always lead to throughput maximization.
Accordingly, the path length metric proposed by them in
[5] pays considerable importance to the trafﬁc intensity at a
generic FiWi network node. The results presented in this paper
are motivated by the path length metric proposed in [5].
III. P ROBLEM F ORMULATION
In the classical path problem, each edge e ∈ E of the graph
G = (V, E), has a weight w(e) associated with it and if there
is a path P from the node v0 to vk in the graph G = (V, E)
w

w

w

w

v0 →1 v1 →2 v2 →3 v3 . . . →k vk
then the path length or the distance between the nodes v0 and
vk is given by
w(Pv0 ,vk ) = w1 + w2 + · · · + wk
However, in the path length metric proposed in [5] for
optical-wireless FiWi networks [1], [2], [3], the contribution
of ei to the path length computation depends not only on
the weight wi , but also on the weights of the other edges
that constitute the path. In the following section, we discuss
this metric and a variation of it. We also also formulate the
multipath computation problem using this metric.
The Optimized FiWi Routing Algorithm (OFRA) proposed
in [5] computes the “length” (or weight) of a path P from v0
to vk using the following metric




(wu ) + max (wu )
w (Pv0 ,vk ) = min
P

∀u∈P

∀u∈P

where wu represents the trafﬁc intensity at a generic FiWi
network node u, which may be an optical node in the ﬁber
backhaul or a wireless node in wireless mesh front-end. In
order to compute shortest path using this metric, in our
formulation, instead of associating a trafﬁc intensity “weight”
(wu ) with nodes, we associate them with edges. This can easily
be achieved by replacing the node u with weight wu with two
nodes u1 and u2 , connecting them with an edge (u1 , u2 ) and
assigning the weight wu on this edge. In this scenario, if there
is a path P from the node v0 to vk in the graph G = (V, E)
w

w

w

w

v0 →1 v1 →2 v2 →3 . . . →k vk
then the path length between the nodes v0 and vk is given by

w+ (Pv0 ,vk )

=
=

w1 + w2 + . . . + wk + max(w1 , w2 , . . . wk )
k

wi + maxki=1 wi
i=1

In the second metric, the length a path Pv0 ,vk :
v0 →v1 →v2 → . . . →vk , between the nodes v0 and vk is given
by

w̄(Pv0 ,vk )

=
=

k

i=1
k


wi + CN T (Pv0 ,vk ) ∗ max(w1 , w2 , . . . wk )
wi + CN T (Pv0 ,vk ) ∗ maxki=1 wi

i=1

where CN T (Pv0 ,vk ) is the count of the number of times
max (w1 , w2 , . . . wk ) appears on the path Pv0 ,vk . We study the
shortest path computation problems in FiWi networks using
the above metrics and provide polynomial time algorithms for
solution in subsections IV-A and IV-B.
If wmax = max(w1 , w2 , . . . wk ), we refer to the corresponding edge (link) as emax . If there are multiple edges having
the weight of wmax , we arbitrarily choose any one of them as
emax . It may be noted that both the metrics have an interesting
property in that in both cases, the contribution of an edge e
on the path length computation depends not only on the edge
e but also on every other edge on the path. This is so, because
if the edge e happens to be emax , contribution of this edge
in computation of w+ (Pv0 ,vk ) and w̄(Pv0 ,vk ) will be 2 ∗ w(e)
and CN T (Pv0 ,vk ) ∗ w(e) respectively. If e is not emax , then
its contribution will be w(e) for both the metrics.
As multipath routing provides an opportunity for higher
throughput, lower delay, and better load balancing and resilience, its use have been proposed in ﬁber networks [6],
wireless networks [7] and recently in integrated ﬁber-wireless
networks [8], [9]. Accordingly, we study the problem of
computing a pair of edge disjoint paths between a sourcedestination node pair s and d, such that the length of the
longer path (path length computation using the ﬁrst metric)
is shortest among all edge disjoint path pairs between the
nodes s and d. In subsection IV-C we prove that this problem
is NP-complete, in subsection IV-D, we provide an optimal
solution for the problem using integer linear programming,
in subsections IV-E and IV-F we provide two approximation
algorithms for the problem with a performance bound of 4
and 2 respectively, and in subsection IV-F we provide results
of experimental evaluation of the approximation algorithms.
IV. PATH P ROBLEMS IN F I W I N ETWORKS
In this section, we present (i) two different algorithms for
shortest path computation using two different metrics, (ii)
NP-completeness proof for the disjoint path problem, (iii)
two approximation algorithms for the disjoint path problem,
and (iv) experimental evaluation results of the approximation
algorithms.

132

It may be noted that, in both metrics w+ (Pv0 ,vk ) and
w̄(Pv0 ,vk ), we call an edge e ∈ Pv0 ,vk crucial, if w(e) =
maxki=1 w(e ), ∀e ∈ Pv0 ,vk .
A. Shortest Path Computation using Metric 1
It may be recalled that the path length
k metric used in this
case is the following: w+ (Pv0 ,vk ) = i=1 wi + maxki=1 wi . If
k
the path length metric was given as w(Pv0 ,vk ) = i=1 wi ,
algorithms due to Dijkstra and Bellman-Ford could have been
used to compute the shortest path between a source-destination
node pair. One important property of the path length metric
that is exploited by Dijkstra’s algorithm is that “subpath of a
shortest
path is shortest”. However, the new path length metric
k
k
i=1 wi +maxi=1 wi does not have this property. We illustrate
this with the example below.
Consider two paths P1 and P2 from the node v0 to v3 in the
w
w
w
graph G = (V, E), where P1 : v0 →1 v1 →2 v2 →3 v3 and P2 :
w4
w5
w3
v0 → v4 → v2 → v3 . If w1 = 0.25, w2 = 5, w3 = 4.75, w4 =
2, w5 = 4, the length of the path P1 , w+ (P1 ) = w1 +w2 +w3 +
max(w1 , w2 , w3 ) = 0.25 + 5 + 4.75 + max(0.25, 5, 4.75) = 15
and the length of the path P2 , w+ (P2 ) = w4 + w5 + w6 +
max(w4 , w5 .w6 ) = 2 + 4 + 4.75 + max(2, 4, 4.75) = 15.5.
Although P1 is shortest path in this scenario, the length of
w
w
its subpath v0 →1 v1 →2 v2 is 0.25 + 5 + max (0.25, 5) =
10.25, which is greater than the length of a subpath of P2
w
w
v0 →4 v4 →5 v2 2 + 4 + max (2, 4) = 10, demonstrating that
the assertion that “subpath of a shortest path is shortest” no
longer holds in this path length metric.
As the assertion “subpath of a shortest path is shortest” no
longer holds in this path length metric, we cannot use the
standard shortest path algorithm due to Dijkstra in this case.
However, we show that we can still compute the shortest path
between a source-destination node pair in polynomial time by
repeated application of the Dijkstra’s algorithm. The algorithm
is described next.
For a given graph G = (V, E), w.l.o.g, we assume |V | = n
and |E| = m. Deﬁne Ge as subgraph of G by deleting edges
whose weight is greater than w(e).
Also, as Dijkstra’s algorithm does, we need to maintain
distance vector. We deﬁne distv be distance (length of shortest
path) from s to v, Πv be predecessor of v and maxedgev be
weight of the crucial edge from s to v via the shortest path,
ansv be optimal solution (length) from s to v.
Different Ge can be treated as different layers of the
G. For any path P , we deﬁne the function e∗ (P ) as the
crucial edge along P . It is easy to observe that if
Pd is the
optimal path from s to node d then w(Pd ) =
e∈P w(e)
and w+ (Pd ) = w(Pd ) + w(e∗ (Pd )). It may be noted that
henceforth, we shorten Ps,d to Pd , because we consider that
the source is ﬁxed while the destination d is variable.
Lemma 1. w(Pd ) is minimum in Ge∗ (Pd ) .
Proof: It is obvious that Pd still exists in Ge∗ (Pd ) , since
edges on Pd are not abandoned. Suppose Pd is not shortest,
then there must be another path Pd s.t. w(Pd ) < w(Pd ).
Noting that the crucial edge on Pd , namely e , is no longer than

Algorithm 1 Modiﬁed Dijkstra’s Algorithm
1: Initialize ansv = ∞ for for all v ∈ V
2: sort all edges according to w(e) in ascending order
3: for i = 1 to m do
4:
Initialize distv = ∞, Πv = nil, maxedgev = 0 for
all v ∈ V
5:
dists = 0
6:
Q = the set of all nodes in graph
7:
while Q is not empty do
8:
u = Extract-Min(Q)
9:
for each neighbor v of u do
10:
if eu,v ∈ E(Gei ) then
11:
t = MAX {maxedgeu , w(eu,v )}
12:
if distu + w(eu,v ) < distv then
13:
distv = distu + w(eu,v )
14:
maxedgev = t
15:
Πv = u
16:
else if distu + w(eu,v ) == distv then
17:
if maxedgev > t then
18:
maxedgev = t
19:
Πv = u
20:
end if
21:
end if
22:
end if
23:
end for
24:
end while
25:
for each node v do
26:
ansv = min{ansv , distv + maxedgev }
27:
end for
28: end for
e∗ (Pd ) since they both belong to Ge∗ (Pd ) . Hence w+ (Pd ) =
w(Pd )+w(e ) < w(Pd )+w(e∗ (Pd )) = w+ (Pd ), contradicting
Pd is optimal.
Lemma 2. Modiﬁed Dijkstra’s Algorithm (MDA) computes
shortest path while keeping the crucial edge as short as
possible in every iteration.
Proof: Line 4 to 24 works similar to the standard Dijkstra’s algorithm does. Besides, when updating distance, MDA
also updates the crucial edge to guarantee that it lies on the
path and when there is a tie, MDA will choose the edge with
the smaller weight.
Theorem 1. Modiﬁed Dijkstra’s Algorithm computes optimal
solution for every node v in O(m(n + m)logn) time.
Proof: Lemma 1 indicates for any node v ∈ V , optimal
solution can be obtained by enumerating all possible crucial
edges e∗ (Pv ) and computing shortest path on Ge∗ (Pv ) . By sorting all edges in nondecreasing order, every subgraph Ge∗ (Pv )
is considered and it is shown in lemma 2, MDA correctly
computes shortest path for every node v in every Ge∗ (Pv ) .
Then optimal solution is obtained by examining all shortest
path using the w() metric plus the corresponding crucial edge.
Dijkstra’s algorithm runs O((n + m)logn) time when using

133

binary heap, hence MDA runs in O(m(n+m)logn) time when
considering all layers.
B. Shortest Path Computation using Metric 2
Given a path P , let e∗ (P ) be the crucial edge along the
P and CN T (P ) be the number of occurrence of such edge.
Now
a path Q, such that w̄(P ) =
 our objective becomes to ﬁnd
∗
w(e)
+
CN
T
(Q)
∗
w(e
(Q))
is minimum.
e∈Q
The layering technique can also be used in this problem.
However, shortest path under a ceratin layer may not become
a valid candidate for optimal solution. Here, we introduce a
dynamic programming algorithm that can solve the problem
optimally in O(n2 m2 ) time.
Input is a weighted graph G = (V, E), |V | = n, |E| = m
with a speciﬁed source node s. In this paper, we only
consider nonnegative edge weight. As shown before, we use
Ge to represent the residue graph by deleting edges longer
than e in G. Different from MDA1, in order to consider
the number of crucial edges, distv is replaced by an array
dist0v , dist1v , ....distnv . One can think distcv be the shortest
distance from s to v by going through exactly c crucial edges
and possibly some shorter edges. Similarly, we replace Πv by
Πcv , 0 ≤ c ≤ n. Each Πcv records predecessor of v for the
path corresponding to distcv . Lastly, ansv is used as optimal
solution from s to v.
Lemma 3. If Pv is the best path from s to v, i.e., w̄(Pv ) is
minimum among all s-v path, then Pv is computed in Ge∗ (Pv )
CN T (Pv )
and distv
= w(Pv ).
Proof: By deﬁnition, Pv exists in Ge∗ (Pv ) and
CN T (Pv ) ≥ 1 since any path should go through at least one
crucial edge. Noting w̄(Pv ) = w(Pv )+CN T (Pv )∗w(e∗ (Pv )),
on one hand if we treat CN T (Pv ) as a ﬁxed number, then we
need to keep w(Pv ) as small as possible. Inspired by idea
of bellman-ford algorithm, we can achieve it by enumerating
|Pv |, i.e., number of edges on Pv . On the other hand, we need
to keep tracking number of crucial edges as well. Hence, distcv
is adopted to maintain such information, superscript c reﬂects
exact number of crucial edges. From line 12 to line 25, distcv
is updated either when it comes from a neighbor who has
already witnessed c crucial edges or it comes from a neighbor
with c − 1 crucial edges and the edge between is crucial. In
either case, node v gets a path, say P  , with exact c crucial
edges on it and w(P ) is minimum. At last, Pv can be selected
by enumerating number of crucial edges and that is what line
30 to 32 does.
Lemma 4. Maxedge Shortest Path Algorithm(MSPA) runs in
O(n2 m) time for each Ge .
Proof: We can apply similar analysis of bellman-ford
algorithm. However, we need to update distcv array, it takes
extra O(n) time for every node v in every iteration when
enumerating |Pv |. Hence, total running time is O(n2 m).
Theorem 2. MSPA computes optimal path for every v ∈ V
in O(n2 m2 ) time.

Algorithm 2 Maxedge Shortest Path Algorithm
1: Initialize ansv = ∞ for for all v ∈ V
2: sort all edges according to w(e) in ascending order, say
e1 , e2 , ..., em after sorting
3: for i = 1 to m do
4:
Initialize distcv = ∞, Πcv = nil for all v ∈ V and all
0≤c≤n
5:
dist0s = 0
6:
for j = 1 to n − 1 do
7:
for k = 0 to j do
8:
for every node v ∈ V do
9:
if distkv = ∞ then
10:
continue
11:
end if
12:
for every neighbor u of v do
13:
if w(eu,v ) > w(ei ) then
14:
continue
15:
else if w(eu,v ) == w(e∗ ) then
16:
if distkv + w(eu,v )
<
then
distk+1
u
17:
distk+1
= distkv +
u
w(eu,v )
18:
Πk+1
=v
u
19:
end if
20:
else
21:
if distkv + w(eu,v ) < distku
then
22:
distku = distkv +
w(eu,v )
23:
Πku = v
24:
end if
25:
end if
26:
end for
27:
end for
28:
end for
29:
end for
30:
for i = 1 to n − 1 do
31:
ansv = min{ansv , distiv + i ∗ w(ei )}
32:
end for
33: end for

Proof: By Lemma 3, if Pv is obtained when computing
Ge∗ Pv . Then, by considering all possible Ge∗ , we could get
Pv in one of these layering. It takes O(m) to generate all Ge∗ ,
by Lemma 4, MSPA runs in v ∈ V in O(n2 m2 ) time.
C. Computational Complexity of Disjoint Path Problem
In this section, we study edge disjoint path in optical
wireless network. By reduction from well known Min-Max
2-Path Problem, i.e., min-max 2 edge disjoint path problem
under normal length measurement, we show it is also
NP-complete if we try to minimize the longer path when w+
length is applied. Then we give an ILP formulation to solve
this problem optimally. At last, we provide two approximation
algorithm, one with approximation ratio 4, running time

134

O((m + n)logn), the other one with approximation ratio 2
while running time is O(m(m + n)logn).

D. Optimal Solution for the Disjoint Path Problem
Here, we give an ILP formulation for MinMax2OWFN.
ILP for MinMax2OWFN

Min-Max 2 Disjoint Path Problem (MinMax2PP)
Instance: An undirected graph G = (V, E) with a positive
weight w( e) associated with each edge e ∈ E, a source node
s ∈ V , a destination node t ∈ V , and a positive number X.
Question: Does there exist a pair of edge disjoint paths P1
and P2 from s to d in G such that w(P1 ) ≤ w(P2 ) ≤ X?

min
s.t.

MP



The MinMax2PP problem is shown to be NP-complete in
[10]. With a small modiﬁcation, we show NP-completeness
still holds if w+ length measurement is adopted.

fi,j,1 −

fj,i,1 =

(i,j)∈E

(j,i)∈E





fi,j,2 −

(i,j)∈E

Min-Max 2 Disjoint Path Problem in Optical Wireless
Networks (MinMax2OWFN)
Instance: An undirected graph G = (V, E) with a positive
weight w( e) associated with each edge e ∈ E, a source node
s ∈ V , a destination node t ∈ V , and a positive number X.
Question: Does there exist a pair of edge disjoint paths P1
and P2 from s to t in G such that w+ (P1 ) ≤ w+ (P2 ) ≤ X  ?



fj,i,2 =

(j,i)∈E

⎧
⎪
⎨
⎪
⎩
⎧
⎪
⎨
⎪
⎩

1
−1
0

i=s
i=t
otherwise

1
−1
0

i=s
i=t
otherwise

fi,j,1 + fi,j,2 ≤ 1
w1 ≥ fi,j,1 ∗ w(i, j)

∀(i, j) ∈ E

w2 ≥ fi,j,2 ∗ w(i, j)

fi,j,1 ∗ w(i, j)
M P ≥ w1 +

∀(i, j) ∈ E

∀(i, j) ∈ E

(i,j)∈E



M P ≥ w2 +

Theorem 3. The MinMax2OWFN is NP-complete

fi,j,2 ∗ w(i, j)

(i,j)∈E

Proof: Evidently, MinMax2OWFN is in NP class, given
two edge joint path P1 and P2 , we can check if w+ (P1 ) ≤
w+ (P2 ) ≤ X  in polynomial time.
We then transfer from MinMax2PP to MinMax2OWFN.
Let graph G = (V, E) with source node s , destination t and
an integer X be an instance of MinMax2PP, we construct an
instance G’ of MinMax2OWFN in following way.
1) Create an identical graph G with same nodes and edges
in G.
2) Add one node s0 to G .
3) Create two parallel edges e01 , e02 between s0 and s,
w(e01 ) = w(e02 ) = maxe∈G(E) w(e)
4) Choose s0 to the source node in G and t to be the
destination.
5) Set X  = X + 2w(e01 )
It is easy to see, the construction takes polynomial time.
Now we need to show a instance of MinMax2OWFN have
two edge disjoint paths from s0 to t with length at most X  if
and only if the corresponding instance have two edge disjoint
paths from s to t with length at most X.
Suppose there are two edge disjoint paths P1 and P2 from
s0 to t in G , such that w+ (P1 ) ≤ w+ (P2 ) ≤ X  . By the
way we construct G , P1 and P2 must go through e01 and
e02 . W.l.o.g. we say e01 ∈ P1 and e02 ∈ P2 . Since w(e01 ) =
w(e02 ) = maxe∈E(G ) {w(e)}, therefore e01 and e02 are the
crucial edge on P1 and P2 respectively. Hence, P1 − e01 and
P2 −e02 are two edge disjoint path in G, with length no greater
than X  − 2w(e01 ) = X.
Conversely, now suppose P1 and P2 are two edge joint paths
in G satisfying w(P1 ) ≤ w(P2 ) ≤ X. We follow the same
argument above, P1 + e01 and P2 + e02 are two desired paths,
with length not exceeding X + 2w(e01 ) = X  .

fi,j,1 = {0, 1},

fi,j,2 = {0, 1}

∀(i, j) ∈ E

The following is a brief description of this ILP formulation.
The ﬁrst two equation represent ﬂow constraint as normal
shortest path problem does. fi,j,1 = 1 indicates path P1 goes
through edge (i, j), and 0 otherwise. So it is with fi,j,2 and
path P2 . Constraint 3 ensures two edges are disjoint, since
fi,j,1 and fi,j,2 cannot both be 1 at the same time. w1 , w2 act
as the weights of the crucial edges on P1 and P2 respectively.
Finally, we deﬁne M P to be the maximum of w+ (P1 ) and
w+ (P2 ) and therefore try to minimize it.
E. Approximation Algorithm for the Disjoint Path Problem,
with approximation factor 4
Next we propose a 4-approximation algorithm which runs
in O((n + m)logn) time.
Given G = (V, E) with source s and destination t, the idea
of approximation algorithm is to ﬁnd two disjoint P1 and P2
such that w(P1 ) + w(P2 ) is minimized. Such P1 and P2 can
be found either using min cost max ﬂow algorithm or the
algorithm due to Suurballe presented in [11]. And we need to
show both w+ (P1 ) and w+ (P2 ) are at most four times of the
optimal solution.
Algorithm 3 MinMax2OWFN Approximation Algorithm 1 (MAA1)
1: Run Suurballe’s algorithm on G, denote P1 , P2 be two
resulting path.
2: Compute w + (P1 ) and w + (P2 ).
3: Output max{w + (P1 ), w + (P2 )}.

135

Lemma 5. For any path P , w+ (P ) ≤ 2w(P ).
Proof: By deﬁnition, w+ (P ) = w(P ) + w(e∗ (P )). Since
w(e (P )) ≤ w(P ), then w+ (P ) ≤ 2 ∗ w(P ).
∗

Lemma 6. If P1 and P2 are two edge joint path from s to
t such that w(P1 ) + w(P2 ) is minimum, then w+ (P1 ) and
w+ (P2 ) are at most four times of the optimal solution.
Proof: Say opt is the optimal value of a
M inM ax2OW F N instance and Q1 ,Q2 are two s − t
edge disjoint path in one optimal solution. W.l.o.g, we may
suppose w+ (P1 ) ≥ w+ (P2 ) and w+ (Q1 ) ≥ w+ (Q2 ). Let
w(P1 ) + w(P2 ) = p and w(Q1 ) + w(Q2 ) = q, by assumption,
p ≤ q. Also, we have w+ (P1 ) = w(P1 ) + e∗ (P1 ) ≤ 2p,
opt = w+ (Q1 ) = w(Q1 ) + e∗ (Q1 ) > 2q . Hence,
+
w+ (P2 )
(P1 )
2p
≤ w opt
< q/2
≤4
opt
Theorem 4. MAA1 is a 4-approximation algorithm running
in O((n + m)logn) time and 4 is a tight bound.
Proof: By Lemma 5 and 6, MAA1 has approximation
ratio at most 4.Then we show MAA1 has approximation at
least 4 for certain cases. Consider the following graph.

Algorithm 4 MinMax2OWFN Approximation Algorithm
2(MAA2)
1: set ans = ∞
2: for every Ge of G do
3:
Run Suurballe’s algorithm on Ge , denote P1 , P2 be
two resulting path.
4:
Compute w+ (P1 ) and w+ (P2 ).
5:
ans = min{ans, max{w+ (P1 ), w+ (P2 )}}.
6: end for
7: Output ans.
w(P1 )+w(e )
max{w+ (Q1 ), w+ (Q2 )} < 2. We
w(P1 )+w(e )
Suppose max{w
+ (Q ), w + (Q )} ≥ 2,
1
2

w(e ). It sufﬁces to show

prove

it by contradiction.

then

w(P1 ) + w(e ) ≥ w+ (Q1 ) + w+ (Q2 )
Which follows,
w(P1 ) + w(e ) ≥ w(Q1 ) + w(e∗ (Q1 )) + w(Q2 ) + w(e∗ (Q2 ))
By deﬁnition, e is one of e∗ (Q1 ), e∗ (Q2 ). Hence,
w(P1 ) > w(Q1 ) + w(Q2 )
It is impossible since w(P1 ) + w(P2 ) is minimum in layer
G e .
Theorem 5. MAA2 is a 2-approximation algorithm running
in O(m(n + m)logn) time and 2 is a tight bound.

It is easy to check, P1 = {s → t}, P2 = {s → r → t} are
two edge disjoint path with minimum length 2k+2, w+ (P1 ) =
4k > w+ (P2 ) = 3. However, let Q1 = {s → u1 → u2 →
... → uk−1 → uk → r → t}, Q2 = {s → r → v1 → v2 →
... → vk−1 → vk → t}, then w(Q1 ) + w(Q2 ) = 2k + 4 while
+
4k
1)
w+ (Q1 ) = w+ (Q2 ) = k + 3. ww+(P
Q1 = k+3 ≈ 4 when k is
sufﬁciently large. Hence, 4 is a tight bound for MAA1.
We need O((n + m)logn) time running Suurballe’s algorithm and O(n) time computing w+ (P1 ) and w+ (P2 ).
Therefore total running time is O((n + m)logn).
F. Approximation Algorithm for the Disjoint Path Problem,
with approximation factor 2
In MAA1, layering technique is not used and we only
consider the original graph. However, by taking all Ge of G
into account, we can have a better approximation ratio.
Say Q1 , Q2 are two disjoint paths in one optimal solution.
Let e = max{e∗ (Q1 ), e∗ (Q2 )} and P1 , P2 be the resulting
paths when computing layer Ge ; w.l.o.g, we may assume
w(P1 ) > w(P2 ). Also, let anse = max{w+ (P1 ), w+ (P2 )}.
Lemma 7. anse < 2 max{w+ (Q1 ), w+ (Q2 )}.
Proof: Noting that w(e∗ (P1 )) ≤ w(e ) and w(e∗ (P2 )) ≤
w(e ) since they both belong to Ge . Then anse ≤ w(P1 ) +


Proof: By Lemma 7, in one of the layer, we guarantee
to have a 2-approximation solution. Since we take minimum
outcome among all layers, the ﬁnal result is no worse than
twice of the optimal solution. Now we need to show there
exists certain case, such that MAA2 is no good than twice of
the optimal solution. Consider the following graph

There is only one layer, and P1 = {s → x1 → x2 →
... → x2k−1 → x2 k → t}, P2 = {s → r → t} are two
edge disjoint path with minimum length 2k + 3, w+ (P1 ) =
2k + 2 > w+ (P2 ) = 3. Again, set Q1 = {s → u1 → u2 →
... → uk−1 → uk → r → t}, Q2 = {s → r → v1 → v2 →
... → vk−1 → vk → t}, then w(Q1 ) + w(Q2 ) = 2k + 4 while
+
2k+2
1)
w+ (Q1 ) = w+ (Q2 ) = k + 3. ww+(P
Q1 = k+3 ≈ 2 when k is
sufﬁciently large. Hence, 2 is a tight bound for MAA2.
Finally, it is easy to see that the running time is O(m(n +
m)logn).

136

S
node
14
18
1
18
20
10
1
14
20
10
18
1
20
14
10
20
5

D
node
2
8
6
4
3
3
11
6
7
5
12
20
13
19
17
16
11

Opt
Sol
47
46
28
50
40
27
35
50
38
36
22
46
26
29
36
29
40

Approx
Sol 1
55
46
28
58
40
27
35
52
38
38
22
52
26
29
36
29
48

Approx
ratio 1
1.17
1
1
1.16
1
1
1
1.04
1
1.05
1
1.13
1
1
1
1
1.2

Approx
Sol 2
55
46
28
57
40
27
35
52
38
38
22
52
26
29
36
29
48

Approx
ratio 2
1.17
1
1
1.14
1
1
1
1.04
1
1.05
1
1.13
1
1
1
1
1.2

Fig. 1.

TABLE I
C OMPARISON OF THE A PPROXIMATE SOLUTIONS WITH THE O PTIMAL
SOLUTION FOR THE ARPANET GRAPH

The ARPANET graph with 20 nodes and 32 links

approximation algorithms. Both the approximation algorithms
have a constant factor approximation bound. However, there is
a trade-off between the quality of the solution (approximation
bound) and the execution time. Finally, we show that both the
approximation algorithms obtain near optimal results through
simulation using the ARPANET topology.

G. Experimental Results for the Disjoint Path Problem
In this section, we present the results of simulations for
comparing the performance of our approximation algorithms
with the optimal solution when w+ () metric is applied.
The simulation experiments have been carried out on the
ARPANET topology (as shown in Fig 1 with nodes and links
shown in black) which has twenty nodes and thirty two links.
The weights of the links have been randomly generated and
lie in the range of two and eleven (as shown in red in Fig
1) and we consider the graph to be undirected. The results of
the comparison is presented in Table I. We have compared the
lengths of the longer of the two edge disjoint paths computed
by the optimal and the approximate solutions for seventeen
different source-destination pairs. It may be noted that for
almost 65% of the cases, the approximate algorithms obtain
the optimal solution. In the remaining cases, the approximate
solutions lie within a factor of 1.2 of the optimal solution
Thus, even though the approximation ratio in the worst case
are proven to be 4 and 2, in practical cases, it is within 1.2.
From these experimental results, we can conclude that the
approximation algorithms produce optimal or near optimal
solutions in majority of the cases. It may be noted that the
two approximation algorithms perform in a similar fashion
in the ARPANET graph, however, as proven theoretically,
the two approximation algorithms differ in their worst case
approximation ratio.
V. C ONCLUSION

R EFERENCES
[1] N. Ghazisaidi, M. Maier, and C. M. Assi, “Fiber-Wireless (FiWi) Access
Networks: A Survey”, IEEE Communications Magazine, vol. 47, no. 2,
pp 160-167, Feb. 2009.
[2] N. Ghazisaidi, and M. Maier, “Fiber-Wireless (FiWi) Access Networks:
Challenges and Opportunities”, IEEE Network, vol. 25, no. 1, pp 36-42,
Feb. 2011.
[3] Z. Zheng, J. Wang, X. Wang, “ONU placement in ﬁber-wireless (FiWi)
networks considering peer-to-peer communications”, IEEE Globecom, 2009.
[4] Z. Zheng, J. Wang, X. Wang, “A study of network throughput gain
in optical-wireless (FiWi) networks subject to peer-to-peer commuincations”, IEEE ICC, 2009.
[5] F. Aurzada, M. Levesque, M. Maier, M. Reisslein, “FiWi Access
Networks Based on Next-Generation PON and Gigabit-Class WLAN
Technologies: A Capacity and Delay Analysis”, IEEE/ACM Transactions
on Networking, to appear.
[6] A. Sen, B.Hao . B. Shen , L.Zhou and S. Ganguly, “On maximum
available bandwidth through disjoint paths”, Proc. of IEEE Conf. on
High Performance Switching and Routing, 2005.
[7] M. Mosko, J.J. Garcia-Luna-Aceves, “Multipath routing in wireless
mesh networks”, Proc. of IEEE Workshop on Wireless Mesh Networks, 2005.
[8] J. Wang, K. Wu, S. Li and C. Qiao ,“Performance Modeling and Analysis
of Multi-Path Routing in Integrated Fiber-Wireless (FiWi) Networks”,
IEEE Infocom mini conference, 2010.
[9] S. Li, J. Wang, C. Qiao, Y. Xu ,“Mitigating Packet Reordering in
FiWi Networks”, IEEE/OSA Journal of Optical Communications and
Networking, vol. 3, pp.134-144, 2011.
[10] C. Li, S.T. McCormick and D.Simchi-Levi, “Complexity of Finding Two
Disjoint Paths with Min- Max Objective”, Discrete Applied Mathematics, vol. 26, pp. 105-115, 1990.
[11] J. W. Suurballe, “Disjoint paths in a network”, Networks, vol. 4, pp. 125145, 1974.

In this paper, we study the shortest path problem in FiWi
networks. Based on the path length metrics proposed in [3],
[5], we present polynomial time algorithms for the single
path scenario. In the disjoint path scenario, we prove that the
problem of ﬁnding a pair of disjoint paths, where the length
of the longer path is shortest, is NP-complete. We provide an
ILP solution for the disjoint path problem and propose two

137

