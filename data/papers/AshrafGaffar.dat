Patterns, Tools and Models for Interaction Design
Daniel Sinnig1, 2, Ashraf Gaffar2, Ahmed Seffah2 and Peter Forbrig1
(1) Software Engineering Group
Department of Computer Science,
University of Rostock,
18051 Rostock, Germany
pforbrig@informatik.uni-rostock.de

(2) Human Centered Software Engineering Group
Department of Computer Science,
Concordia University,
1455 De Maisonneuve Blvd. West,
H3G 1M8, Montreal, Canada
{d_sinnig, gaffar, seffah}@cs.concordia.ca

ABSTRACT

In recent years the re-use of already existing solutions and
ideas has become more and more crucial. Re-inventing the
wheel over and over again is not feasible. Especially model
based development approaches suffer from the lack of
libraries populated with existing solutions and ideas which
must just be tweaked in order to applicable to different
context of use. Patterns have the potential to overcome this
major shortcoming. In this paper we will try to stimulate
and foster to idea of transferring the idea of patterns to the
model-based development community. We will introduce
patters as medium to capture ideas and solutions within the
domain of model based design.
Moreover the lack of tool support has led to situation that
model – based approaches have not been fully acknowledge
by the developers of interactive applications. In recent
years a set of tools has been developed in our group, which
the developer with the establishment of the various models.
Therefore In the following we will introduce our model –
based philosophy and the possible application and impact
of patterns for each of our models. Moreover we will
briefly introduce some of our tools and ideas which might
be helpful with the creation of the various models.
Keywords

Patterns, re-use, interactive applications, task, dialog,
presentation, layout
INTRODUCTION ON PATTERNS

The architect Christopher Alexander introduced the idea of
patterns in the early 1970s [1, 2]. He introduced patterns as
a three-part rule to help architects and engineers with the
design of buildings, towns, and other urban structures. His
definition of a pattern was as follows: “Each pattern is a
three-part rule, which expresses a relation between a certain
context, a problem, and a solution”.

The concept of patterns has been transferred to the software
community by [4]. Their book “Design Patterns” contained
a collection of patterns for the design of object–oriented
software. The book has been widely acknowledged and
referenced within the community.
Recently, like in the software engineering community, the
user interface design community has also been a forum for
vigorous discussions on pattern languages for user interface
design and usability engineering. UI patterns are an
effective way to transmit experience about recurrent
problems in the HCI domain related to UI design issues. A
pattern is a named, reusable solution to a recurrent problem
in a particular context of use. In other words UI patterns
capture the essence of successful solutions to recurring
design problems. Correctly applied they ease and accelerate
the development of initial prototypes and assist with design
choices. A pattern takes what was previously an art of
designing usable software and turns it into a reusable unit.
Until now, patterns have been used mainly used as tools for
designers in the same sense as UI development has been
treated as a rather creative design activity. However, with
the advent of pervasive computing and mobile users the
design and the development of UIs has become
increasingly complex. Thus, UIs must be aware of
dynamically changing contexts and withstand variations of
the environment. From this emerges the need for a
structured engineering-like development approach. Model
based approaches have the potential to establish the basic
foundation for a systematic engineering methodology for
UI development. Thus, also the idea of patterns should be
shifted from design to systematic development.
In the next section we will outline our model – based
development philosophy for interactive applications. We
will discuss the use of patterns for each model. Moreover
we will introduce some of our tools.
OUR MODEL-BASED PHILOSOPHY

In a model based UI design methodology for interactive
applications various models are used to describe the
relevant aspect of the User Interface. Many facets exist as
well as related models. As depicted in Figure 1 our
approach consists of: task models, user models, business

object models, a dialog model, a presentation and a layout
model.

dark shaded ellipse of Figure 1 illustrates that these modes
are mutually related as well.

Our approach starts of - like a typical development
lifecycle - and begins with domain analysis. To date the
creation of the task model has been commonly agreed to be
a reasonable starting point [10]. Therefore our approach
starts with the elicitation of the user’s tasks, as they are
currently performed, resulting in the task model. As a
consequence this task model is also often named “existing”
task model. Additionally models for capturing user
characteristics and business objects are developed. All
three analysis models are portrayed by the light shaded
ellipse at the top of Figure 1. In addition it is shown that the
task model has to be modeled in mutual relationship to the
user model, representing the functional roles users have to
play for task accomplishment, as well as their individual
perception of the tasks. The user model is also related to the
business-object model and the task model since the user
may require different views on the data while performing a
task. Besides, the task model has to reflect the abilities,
skills, and preferences of end users. A relationship between
the business-object model and the interaction model is
required, since the problem domain data in the businessobject model has to be presented to the end users for
interactive task accomplishment.

Model – based design focuses on finding mapping between
the various models. [11] Thus, at this point based on these
rather abstract task, user and object models, a dialog, a
presentation and a layout model are derived to reveal some
implementation details of the user interface.
In a next step the dialog model is developed. It specifies the
navigational structure of the UI and the interaction
techniques. [11] It is a more specific model and can be
derived in good part from the more abstract task-, user- and
business object models.
From the dialog model the presentation and layout model
are derived. The presentation model maps the elements of
the different dialog views (defined in the dialog model) to
abstract interaction objects, such as menubar, groupbox,
listbox, etc. The layout model defines the arrangements and
the style of the user interface objects according to an
overall floor plan.
After outlining the basic structure of our approach, we will
now discuss which patterns can impact the establishment of
the task, dialog, presentation and layout model.
TOOLS AND PATTERNS FOR MODELS

In our approach we are aiming to use patterns as building
blocks in order to create these models. Different kinds of
models require different kinds of patterns which must be
formulated in a different way.
Task Model

The task models can be impacted by so called task patterns.
Task patterns have been first introduced by Paterno [3, 7]
as reusable structures for task models. The patterns were
described as hierarchical structured task fragments which
can be used to successively build the task model. Based on
this idea we have developed the tool “Task Pattern
Wizard”. The program is able to read and visualize already
existing task descriptions that are specified in XIML [14].
It is also capable to interpret task patterns descriptions
documented in a prototypical XML based mark-up
language. After the task pattern has been instantiated the
resulting task fragment can be inserted resulting in a
modified task model.

Figure 1 Model based development at a glance
The introduction of a new interactive application leads
inevitably to a change of the role of the user and the tasks,
which the user will perform. Furthermore also new
interactive tasks (the actions the user performs with the
new interactive system) must be modeled. Thus, after
domain analysis first design decisions are made by
establishing the envisioned task, user and object models
with consideration of the future interactive system. The

In contrast to Paterno’s task patterns, which are defined as
fixed fragments, the Task Pattern Wizard expects the
patterns to be specified in a dynamic fashion. Variables are
used as placeholders for the particular context of use.
During the so called process of pattern adaptation the
variables are replaced by concrete values representing the
current context of use. Different kinds of variables exist.
Among them: “Substitution variables” and “process
variables”. On the one hand substitution variables are
simply used as placeholders for certain values. During the
process of pattern adaptation the Task Pattern Wizard will
question the user for entering values for these variables.
Then, in a top down process each occurrence of a
substitution variable will be replace (substituted) with this
value. On the other hand, process variables are used to

describe the structure of the task fragment, which will be
created by the pattern. For example entering values into a
form is very repetitive. The same basic task (enter a value)
appears over and over again. Basically each peer task can
just be distinguished by its name and the kind of input.
Thus, instead of task description for each of these peer
tasks, a process variables, that signals the number of
respective tasks, can be used. A more detailed descriptions
about task patterns and the process of pattern adaptation
can be found in [8, 9]
This generic notation of patterns ensures that the same
pattern is applicable to different contexts of use. The past
has shown, that many approaches of reusing knowledge
failed, because they have been designed too specific and
rigid. (too context sensitive and domain dependent). Once
these knowledge fragments were ordered and classified in a
way, that efficient usage was possible, most of them were
not applicable anymore since the context has slightly
changed. Therefore we believe that the solution stated in
the pattern should be formulized generic enough in order to
withstand variations of context and domain.
In order to assess and validate the correctness and
appropriateness of the task model we have developed the
XIML Task Simulator [5]. It presents different views on the
tasks, their users and used (tools) and modified objects
(artefacts). Moreover tasks can be animated and the user
can step through possible task scenarios (Pluralistic
walkthrough) [6] within the scope of the underlying task
model.
Dialog Model

After developing the task model the dialog model is
interactively derived from the task, user and object model.
The dialog model associates several tasks to dialog views
and defines transitions between these dialog views. At this
stage dialog patterns can help grouping the tasks and
suggest sequences between dialog views.
Finding dialog views and transitions is closely connected to
the underlying task models. On the one hand, structural
information from the task model, which describes the task–
subtask hierarchy, can be used to group related tasks into
task views. On the other hand temporal transitions between
sub tasks can be used to constrain and derive possible
dialog transitions [11, 7]. Consequently patterns applied to
the task model indirectly affect the dialog model and in
particular the dialog graph. An example of a dialog pattern
is the wizard pattern (adopted from the wizard pattern by
Welie [13]. It describes a sequential run through a number
of dialogs until an end dialog has been reached. We are
currently experimenting to formulate such patterns with
XIML.
We have already developed the tool “Dialog Graph
Simulator” [5]. It allows to group different task to dialog
views and the definition of transition between various
dialog views. The designed dialog structure can be further
saved to XIML format and thus re-processed by other tools.
Moreover a first abstract prototype of the interface can
automatically be generated out the dialog description.

Using the cognitive walkthrough method [6] users can walk
through the interface in order to accomplish predefined
tasks. Whenever the interface blocks the user from
completing a task, it is an indication that the interface or the
underlying task description is missing something. For the
future we envision that the Dialog Graph Simulator can
also process dialog patterns and thus semi-automatically
establish transitions between the various dialog views.
Presentation and Layout Model

Next, in order to develop the presentation model the tasks
of each dialog view are associated with interaction
elements such as buttons, trees and lists. Moreover, some
domain objects (tools or artefacts) which are related to the
tasks are also mapped to interaction elements. Presentation
patterns can be applied in order to map complex tasks (such
as advanced search) to a predefined set of interaction
elements. We are currently experimenting to describe such
presentation patterns as Velocity XUL templates [12, 15].
Presentation patterns describe fragments of the presentation
model. Each fragment describes one or a set of interaction
objects.
Finally the interaction objects are positioned following an
overall layout or floor plan described in the layout model.
Additionally, the visual appearance of each interaction
element is specified by setting fonts, colors and
dimensions. In our framework layout patterns -which are
described as XUL templates as well- are used to integrate
proven layouts and design solutions. An example of such a
layout pattern is the “3 – Column Layout” introduced by
Welie [13]. Practically the loose set of XUL fragments of
the presentation model is aggregated to XUL code. Finally
this XUL code is automatically rendered to a concrete user
interface implementation.
According to our model – based framework the
presentation model and layout model are logically
separated. In many model-based development approaches
these models are summarized to one model. However we
decided to split them up, since we believe that for each
model different kinds of patterns apply. On the one hand
patterns that describe a set of interaction elements
(presentation patterns) and on the other hand patterns that
describe the layout of the interaction elements (layout
patterns).
DISCUSSION AND OPEN QUESTIONS

In this paper we have introduced our model based
framework and have outlined the application of patterns
and the use of various tools. It was shown that patterns as a
medium for capturing and disseminating knowledge are
also an interesting tool in the domain of model – based
design. First tools and approaches for integrating patterns
into the development framework have been introduced.
However the work presented in this paper is of preliminary
nature, where the following questions remain open:
Existing patterns catalogues embody a substantial amount
of knowledge. How to make efficiently use of this
knowledge within the domain of model based design.

Different kinds of patterns exist as well as model. Which
patterns are useful for which model?
Which models would benefit most from the usage of
patterns?
Do patterns really speed up or improve the development of
interactive applications?
Is it feasible to create a universal pattern catalogue which
applies to users of different background pursuing different
goals?
What can the usage of patterns be validated?
REFERENCES

1. Alexander, C. The Timeless Way of Building. New
York: Oxford University Press, 1979.
2. Alexander C., Ishikawa S., Silverstein M., Jacobson M.,
Fiksdahl-King I., and Angel S., A Pattern Language:
Towns, Buildings, Construction. New York: Oxford
University Press, 1977.
3. Breedvelt, I., Paternò, F. & Severiins, C., “Reusable
Structures in Task Models”, Proceedings Design,
Specification, Verification of Interactive Systems '97,
Granada, June 1997, Springer Verlag, pp.251-265.
4. Gamma, E., Helm, R., Johnson, R., Vlissides, J.: Design
Patterns: Elements of Object-Oriented Software. Book
published by Addison-Wesley, 1995.
5. Forbrig, P., A. Dittmar, D. Reichart, and D. Sinnig,
“User-Centred Design and Abstract Prototypes”, in
Proceedigns of BIR 2003, (Berlin), pp. 132 - 145,
SHAKER, Sept. 2003.

6. Nielsen, J. ; Mack, R.: Usability Inspection Methods,
Book published by John Wiley & Sons, New
York,
NY, 1994, ISBN 0-471-01877-5.
7. Paternó, F. Model-Based Design and Evaluation of
Interactive Applications, Springer, 2000.
8. Sinnig, D., H. Javahery, P. Forbrig, and A. Seffah,
“The Complicity of Model-Based Approaches and
Patterns for UI Engineering”, in Proceedings of BIR
2003, (Berlin), pp. 120 - 131, SHAKER, Sept. 2003.
9. Sinnig. D., Gaffar, A., Seffah, A., Forbrig, P., “Patterns
in Model-Based Engineering, Proceedings of CADUI
04, Portugal, 2004.
10. Vanderdonckt, J., Puerta, A.: Introduction to ComputerAided Design of User Interfaces, Proceedings of the
CADUI’99, Louvain-la-Neuve, Kluwer Academic
Publishers, 1999.
11. Vanderdonckt, J., Limbourg, Q., Florins, M., Deriving
the Navigational Structure of a User Interface, In
Proceedings of INTERACT 2003, Sept. 2003, Zuerich,
IOS Press, pp.455-462.
12. Velocity, Velocity, http://jakarta.apache.org/velocity/,
2003.
13. Welie, M., Patterns in
http://www.welie.com, 2003.
14. XIML, eXtensible Interface
http://www.ximl.org, 2003.

Interaction
Markup

Design,
Language,

15. XUL, XUL Planet, http://www.xulplanet.com/, 2003.

The Journal of Systems and Software 80 (2007) 1408–1422
www.elsevier.com/locate/jss

Model-based user interface engineering with design patterns
Seﬀah Ahmed *, Gaﬀar Ashraf
Human-Centered Software Engineering Group, Department of Computer Science and Software Engineering, Concordia University, 1455,
Maisonneuve West Bvld, Montreal QC, Canada H3G1M
Received 20 June 2006; received in revised form 10 October 2006; accepted 15 October 2006
Available online 8 December 2006

Abstract
The main idea surrounding model-based UI (User Interface) development is to identify useful abstractions that highlight the core
aspects and properties of an interactive system and its design. These abstractions are instantiated and iteratively transformed at diﬀerent
level to create a concrete user interface. However, certain limitations prevent UI developers from adopting model-based approaches for
UI engineering. One such limitation is the lack of reusability of best design practices and knowledge within such approaches. With a view
to fostering reuse in the instantiation and transformation of models, we introduce patterns as building blocks, which can be ﬁrst used to
construct diﬀerent models and then instantiated into concrete UI artefacts. In particular, we will demonstrate how diﬀerent kinds of
patterns can be used as modules for establishing task, dialog, presentation and layout models. Starting from an outline of the general
process of pattern application, an interface for combining patterns and a possible formalization are suggested. The Task Pattern Wizard,
an XML/XUL-based tool for selecting, adapting and applying patterns to task models, will be presented. In addition, an extended
example will illustrate the intimate complicity of several patterns and the proposed model-driven approach.
 2006 Elsevier Inc. All rights reserved.
Keywords: Model-based user interface; User interface design patterns; Software architecture; Model-driven development; Usability; Task; Presentation
and user interface models

1. Introduction
The model-based approach was introduced to support
the speciﬁcation and design of interactive systems at a
semantic, conceptual and abstract level as an alternative
to dealing with low-level implementation issues earlier on
in the development lifecycle (Paternò, 2000). This way,
designers can concentrate on important conceptual properties instead of being distracted by the technical and implementation details. As a result, the increasing complexity of
the user interface is more easily managed. Moreover, the
UI architecture is simpliﬁed, hence allowing for better system comprehension and traceability for future maintenance
for diﬀerent context of use.

*

Corresponding author.
E-mail address: seﬀah@cse.concordia.ca (S. Ahmed).
URL: http://hci.cs.concordia.ca (S. Ahmed).

0164-1212/$ - see front matter  2006 Elsevier Inc. All rights reserved.
doi:10.1016/j.jss.2006.10.037

Unfortunately, model-based methods are rarely used in
practice (Trætteberg, 2004). One major reason for this limitation is that creating various models, instantiating and
linking them together to create lower level models is a
tedious and very time-consuming work, especially when
most of the associated activities have to be done manually;
tools provide only marginal support. This presents an overhead that is unacceptable in many industrial setups with
limited resources, tough competition and short time-tomarket. This crippling overhead can be partially attributed
to the fact that model-based methods (MOBI-D, 1999;
TADEUS, 1998; TERESA, 2004) lack the ﬂexibility of
reusing knowledge in building and transforming models.
At best, only few approaches oﬀer a form of copy-andpaste reuse. Moreover, many of these reuses involve the
‘‘reuser’’ merely taking a copy of a model component
and manually changing it according to the new requirements. No form of consistency with the original solution
is maintained (Mens et al., 1998). Copy-and-paste analysis

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

and the concept of fragmented design models are clearly
inadequate when attempting to integrate reuse in a systematic and retraceable way in the model-based UI development life cycle.
This practical observation motivates the need for a more
disciplined form of reuse. We will demonstrate that the
reusability problems associated with current model-based
approaches can be overcome through patterns. Patterns
have been mainly known as proven solutions to wellknown problems that occur in diﬀerent situations. They
are usually presented as a vehicle to capture the best practices and facilitate their dissemination. Because patterns are
context-sensitive, the solution encapsulated in the pattern
can be customized and instantiated to the current context
of use before being reused (Alexander, 1997). Nevertheless,
in order to be an eﬀective knowledge-capturing tool in
model-based approaches, the following issues require more
attention:
• A classiﬁcation of patterns according to models must be
established. Such a classiﬁcation would distinguish
between patterns that are building blocks for models
and patterns that drive the transformation of models,
as well as create a concrete UI.
• A tool support that can assist developers when selecting
the proper patterns, instantiating them once selected, as
well as when combining them to create a model.
These two aspects are the essence of this paper. After a
brief overview of existing model-based approaches, we will
introduce how we have been combining model-based
approaches and several patterns to build a framework for
the development of user interfaces. A clear deﬁnition of
the various models used and an outline of the UI derivation
process are also given. Furthermore, we will suggest how to
enhance this framework using patterns as a reuse vehicle.
We will demonstrate how HCI patterns can be used as
building blocks when constructing and transforming the
various models, and list which kind of HCI patterns lend
themselves to this use. A brief case study is presented in
order to validate and illustrate the applicability of our
approach and the proposed list of patterns.
2. Motivations and related work
2.1. Model-based user interface engineering
Model-based UI development has been investigated for
more than a decade. In most approaches, model-based UI
design is deﬁned as the process of creating and reﬁning
models (da Silva, 2000; Vanderdonckt et al., 2003). Many
models exist in order to describe the user interface at diﬀerent levels including task, user, presentation, dialog, and
platform models. Until now, no consensus has been
reached as to which models are the best for describing
UI’s (da Silva, 2000) and which model can be instantiated
and transformed at each step to create a concrete user

1409

interface. Moreover, it is to be noted that instead of automation (JANUS (Balzert, 1996), AME (Märtin, 1996)),
most model-based approaches (MOBI-D (MOBI-D,
1999), TERESA (TERESA, 2004)) provide little support
in helping developers to interactively deﬁne the mappings
between various models in the design. Consequently, the
mapping between models is done outside the semantics of
these models, and mostly manually. This is a tedious and
error prone practice that most designers prefer to avoid.
We often end up with limited local modeling or no modeling at all.
Constructing and transforming models is a very time
consuming task even for small size software. For large
systems, it is often prohibitively expensive. It requires different skills and knowledge about the various models.
Unfortunately, current approaches for model-based tools
oﬀer very limited if any support for reusing model fragments or templates. Rine (Rine and Nada, 2000) deﬁned
reuse as the use of existing software artifacts or knowledge
to create new software components. Within the scope of
model-based UI development, reuse is particularly critical.
For example, developing the task model for a medium to
large-size system that is highly interactive and providing
context-dependent UI’s is quite diﬃcult, as shown in
Paquette and Schneider (2004). Based on a case study,
Paquette observed that task modeling becomes tedious
when a task model is speciﬁed in suﬃcient detail. However,
the level of detail is crucial if task models are to be used as
a starting point for the evolution of the ﬁnal UI and for
preliminary evaluations.
Furthermore, in order to incorporate a great level of
details, the various models may grow too large to be easily
understood or fully comprehended. The MOBI-D tool
suite does not oﬀer any functionality that allows importing
model or design fragments. Similarly, TERESA only supports cutting and pasting static task fragments. Important
tasks in knowledge reuse such as resolving name or relationship conﬂicts are not supported. In essence, starting a
new project means reinventing the wheel by building and
linking all models from scratch. Constraints have to be
manually applied and reworked between models, leading
sometimes to inconsistencies that are only discovered in
later design stages, implementation, or testing. Almost no
design reuse from previous works, in terms of model fragments, is possible. Multiple views at various levels of
abstraction and granularity should be provided.
2.2. Patterns in models construction and transformation
As will be detailed in this paper, UI design patterns have
the potential to provide a solution to the reuse problem
while acting as driving artifacts in the development and
transformation of models.
Similar to the rest of the software engineering community, the Human Computer Interaction (HCI) design community has been a forum for vigorous discussion on
pattern languages for user interface design and usability

1410

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

engineering. The goals of HCI patterns are to share successful HCI design solutions among HCI professionals
and to provide a common ground for anyone involved in
the design, development, evaluation or use of interactive
systems (Borchers, 2001). Several HCI practitioners and
interactive application designers have become interested
in formulating HCI patterns and pattern languages.
However, in order to facilitate their reuse and applicability, patterns should be presented within a comprehensive
framework that supports a structured design process, not
just according to the structure of each individual aspect
of the application (e.g., page layout, navigation, etc.),
which is currently the case for most HCI patterns. This
demonstrates the virtue of using model-based design
approach in comparison to manual design practices. Gaﬀar
et al. (2005) is one attempt to seemingly integrate patterns
in the design process. Based on the UPADE Web
Language, the approach aims to demonstrate when a pattern is applicable during the design process, how it can
be used, as well as how and why it can or cannot be combined with other related patterns. Developers can exploit
pattern relationships and the underlying best practices to
devise concrete and eﬀective design solutions.
Similarly, the ‘‘Pattern Supported Approach’’ (PSA)
(Granlund and Lafreniere, 1999) addresses patterns not
only during the design phase, but throughout the entire
software development process. In particular, patterns have
been used to describe business domains, processes and
tasks to aid in early system deﬁnition and conceptual
design. In PSA, HCI patterns can be documented according to the development lifecycle. In other words, during
system deﬁnition and task analysis, it can be determined
which HCI patterns are appropriate for the design phase,
depending on the context of use. However, the concept of
linking patterns together to put up a design is not tackled.
In addition, Molina et al. (2002) found that existing pattern collections focus on design problems, and not on analysis problems. As a result, he proposes the Just-UI
framework, which provides a set of conceptual patterns
that can be used as building blocks to create UI speciﬁcations during analysis. In particular, conceptual patterns
are abstract speciﬁcations of elemental UI requirements,
such as: how to search, how to order, what to see and what
to do. Molina also recognized that the relatively-informal
descriptions of patterns used today are not suitable for tool
use. Within the Just-UI framework, a ﬁxed set of patterns
has been formalized so they can be processed by the
‘‘OliverNova’’ tool (OliverNova, 2004). Eventually, the
JUST-UI framework will use code generation to derive a
UI implementation based on the analysis model.
Breedvelt et al. (1997) discusses the idea of using task
patterns to foster design knowledge reuse while task modeling. Task patterns encapsulate task templates for common design issues. This means that whenever designers
realize that the issue with which they are contending is similar to an existing issue that has already been detected
and resolved, they can immediately reuse the previously-

developed solution (as captured by the task pattern). More
speciﬁcally, task patterns are used as templates (or task
building blocks) for designing an application’s task model.
According to Breedvelt, another advantage of using task
patterns is that they facilitate reading and interpreting
the task speciﬁcation. Patterns can be employed as placeholders for common, repetitive task fragments. Instead of
thinking in terms of tasks, one can think in terms of patterns at a more abstract level. Such an approach renders
the task speciﬁcation more compact and legible.
However, Breedvelt considers task patterns as individual
static encapsulations of a (task) design issue in a particular
context of use. Concepts for a more advanced form of
reuse, including customization and combination, are not
presented. Our approach (Gaﬀar et al., 2005) has highlighted another important aspect of the pattern concept:
pattern combination. By combining diﬀerent patterns,
developers can utilize pattern relationships and combine
them in order to produce an eﬀective design solution. We
will consider this principle in Section 5.2 and suggest an
interface for combining patterns. As a result, patterns
become a more eﬀective vehicle for reuse.
3. PD-MBUI: A pattern-driven and model based user
interface framework
3.1. Basic concepts and terminology
PD-MBUI (Pattern-Driven and Model-Based UI) aims
to reconcile and unify in a single framework the patterndriven and model-based approaches, two powerful methods
for UI and software engineering as in Fig. 1. It comprises
the following components:
1. A set of models including domain, task, user, environment, dialog, presentation and layout models. These
models as well as the process of constructing them are
detailed in Section 3.2.

Fig. 1. PD-MBUI framework.

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

2. A library of HCI patterns that can be used, as building
blocks, in this construction and transformations. A
taxonomy and examples of patterns we identiﬁed are
given in Section 4.1.
3. A method of identifying, instantiating and applying patterns during the construction and reﬁnement of these
models. This method is summarized in Section 5.2.
4. A tool, the Pattern Wizard, which helps user interface
developers in selecting and applying patterns when
constructing and transforming the various models to a
concrete user interface. This tool aims to combine all
the ingredients of the PD-MBUI in a single and integrative framework for the engineering of pattern-driven
and model-based UI’s.

1411

3.2. Models used in PD-MBUI

• UI or HCI design patterns as proven solutions to a user
problem that occurs in various contexts and projects.
We take for granted that the proposed library of patterns and the pattern-driven approach are valid. This
aspect has been largely debated by others including
our preliminary work (Gaﬀar et al., 2005; Sinnig,
2004). An example of pattern is Multi-Value Input Form
(Paternò, 2000). This task pattern provides a solution to
the typical user problem of entering a number of related
values. These values can be of diﬀerent data types, such
as ‘‘date,’’ ‘‘string’’ or ‘‘real.’’
• User interface component or widget such as buttons,
windows, dialog boxes are generally deﬁned as objectoriented classes in UI toolkits such as Java swing, etc.
• An artifact is an object that is essential in order for a task
to be completed. The state of this artifact is usually changed during the course of task performance. In contrast to
an artifact, a tool is merely an object that supports performing a task. Such a tool can be substituted without
changing the task’s intention (Sinnig, 2004).

Fig. 2 depicts the models we considered within our
approach. We have selected these models based on the fact
that they have been largely cited in the scientiﬁc literature
(Puerta, 1997, 1996, 2002). We spent some eﬀort to deﬁne
them in such a way that they do not overleap and that
the ﬂow of transformation is also clearly stated as detailed
in Fig. 1. This is fundamental in order to know precisely
which type of pattern is needed and when it applies.
The process of constructing this variety of models distinguishes three major phases.
The starting point of phase I is the domain model. This
model encapsulates the important entities of an application
domain together with their attributes, methods and relationships (Schlungbaum, 1996). Within the scope of UI development, it deﬁnes the objects and functionalities accessed by
the user via the interface. Such a model is generally developed using the information collected during the business
and functional requirements stage. Two other models are
then derived from this model: user and task models.
The user model captures the essence of the user’s static
and dynamic characteristics. Modeling the user’s background knowledge is useful when personalizing the format
of the information (e.g. using an appropriate language that
is understood by the user). The task model speciﬁes what
the user does or wants to do, and why. It describes, at
abstract meaning without any knowledge of the tasks that
users perform while using the application, as well as how
the tasks are interrelated. In simple terms, it captures the
user tasks and system behavior with respect to the task
set. Beside natural language, notations such as GOMS
and CTT are generally used to document task models.
The task model is constructed in mutual relationship to
the user model, representing the functional roles played
by users when accomplishing tasks, as well as their individual perception of the tasks. The user model is also related
to the domain since the user may require diﬀerent views

Within our framework, several notations have been used
including XUL (Extensible User Languages), UML (Uniﬁed
Modeling Language) as well as CTT (Concurrent Task Tree)
for task modeling. We feel it is beyond the scope of this
paper to deal with these notations in any substantive
detail. Readers unfamiliar with these notations can found
more details at http://www.mozilla.org/projects/xul http://
www.uml.org and http://giove.cnuce.cnr.it/concurtasktrees.
html.
The starting point of our approach is a clear description
of the user requirements that include answers to the following questions: who are the users, what are their tasks and in
which environment the system will be used. The answers to
such questions are essential in deriving and constructing
models that reﬂect the users and their real needs. They
are also at the core of the assumption made by designers
and engineers regarding the universal properties of users
and uses.

Fig. 2. Models and their relationships in the PD-MBUI Framework.

Within our framework, we will be using the following
notions as deﬁned here:

1412

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

of the same data while performing a task. Moreover, a relationship must be formed between the domain model and
the task model, because objects of the domain model
may be needed in the form of artifacts and tools for task
accomplishment.
The second stage starts with the development of the environment model. This model speciﬁes the physical and organizational context of interaction (Trætteberg, 2002). For
example, in the case of a mobile user application, an environmental model would include variables such as the user’s
current location, the constraints and characteristics presented by this location, the current time and any trigger conditions speciﬁed or implied by virtue of the location type.
This model describes also the various computer systems that
may run a UI (Prasad, 1996). The platform model describes
the physical characteristics of the target platforms, such as
the target devices’ input and output capabilities. Based on
this model and those developed in the ﬁrst stage, the dialog
and the presentation model can be developed.
The dialog model speciﬁes when the end user can invoke
functions and interaction media, when the end user can
select or specify inputs, and when the computer can query
the end user and present information (Puerta, 1997). In
particular, this model speciﬁes the user commands, interaction techniques, interface responses and command
sequences permitted by the interface during user sessions.
The presentation model describes the visual appearance
of the user interface (Schlungbaum, 1996). The presentation model exists at two levels of abstraction: the abstract
and the concrete presentation model. The former provides
an abstract view of a generic interface, which represents a
corresponding task and dialog model.
In the last stage, the ‘‘Layout Model is realized as a concrete instance of an interface. This model consists of a series
of UI components that deﬁnes the visual layout of UI and
the detailed dialogs for a speciﬁc platform and context of
use.There may be many concrete instances of layout model
that can be derived from a presentation and dialog model.

The following table summarizes some of the patterns we
considered.

4. Proposed HCI patterns

4.3. Patterns instantiation and application

4.1. HCI patterns taxonomy and samples

In this paper, we stated that patterns could be used as
building blocks for the construction and transformation
of the diﬀerent models. For the construction of models,
the following process, which is part of the PD-MBUI,
was proposed to instantiate and apply patterns:

Fig. 3 portrays which types of patterns are used to construct and transform each type of models and how this
happen in the model-driven engineering process.
4.2. Patterns as building blocks within a model based
methodology
The following are the major types of patterns we considered with our framework:
• Task and feature patterns are used to describe hierarchically structured task fragments. These fragments can
then be used as task building blocks for gradually building the envisioned task model.

Fig. 3. PD-BMUI framework revisited (putting it all together).

• Patterns for the dialog model are employed to help with
grouping the tasks and to suggest sequences between
dialog views.
• Presentation patterns are applied to map complex tasks
to a predeﬁned set of interaction elements that were
identiﬁed in the presentation model.
• Layout patterns are utilized to establish certain styles or
‘‘ﬂoor plans’’ which are subsequently captured by the
layout model.

1. Identiﬁcation: A subset M 0 of the target model M is identiﬁed thus: M 0 M. This relationship should reduce the
domain size and help focus attention on a smaller, more
pertinent subset for the next step.
2. Selection: An appropriate pattern P is selected to be
applied to M 0 . By focusing on a subset of the domain,
the designer can scan M 0 more eﬀectively to identify
potential areas that could be improved through patterns. This step is highly dependent on the experience
and creativity of the designer.

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

1413

3. Adaptation: A pattern is an abstraction that must be
instantiated. Therefore, this step has the pattern P
adjusted according to the context of use, resulting in
the pattern instance S. In a top-down process, all variable parts are bound to speciﬁc values, which yield a
concrete instance of the pattern.
4. Integration: The pattern instance S is integrated into M 0
by connecting it to the other elements in the domain.
This may require replacing, updating or otherwise modifying the other objects to produce a seamless piece of
design.
Variables are used as placeholders for the context of use.
During the process of pattern adaptation, these placeholders are replaced by concrete values representing the particular consequences of the current context of use.
Fig. 4 shows the interface of pattern A. The UML notation for parametric classes is used to convey that the pattern assumes two parameters (variables x and y). In
order to instantiate the pattern, both variables must be
assigned concrete values. In practical terms, the interface
informs the user of the pattern that the values for variables
x and y must be provided in order for the pattern to be
used. In the ﬁgure, pattern A has been instantiated, resulting in Pattern A Instance. In addition, UML stereotypes
are used to signal the particular type (role) of the pattern.
Most often, patterns are implemented using other patterns, i.e., a pattern can be seen as a composition of several
basic patterns that we refer to them as sub-patterns or
related patterns. The relationship between patterns can be
between patterns related to the same model such a series
of patterns related to the construction of a task model. It
can be also between patterns related to diﬀerent models.
For example:
• If we consider a task pattern X for building a task model
A.

Fig. 5. Pattern aggregation.

• Then the presentation patterns X and Y apply for the
construction of the presentation model B.
• Model B is seen as a transformation of the model A.
The relationship between patterns uses the concept of
class aggregation, as presented in Fig. 3. Pattern A consists
of the sub-patterns B and C. If we place patterns in this
kind of relationship, special attention must be given to
the patterns’ variables. A variable deﬁned at the superpattern level can aﬀect the variables used by the subpatterns. In Fig. 5, variable x of pattern A aﬀects the
variables yy and zz of sub-patterns B and C. During the
process of pattern adaptation, variables yy and zz will
be bound to the value of x. As such, we observe how modifying a high-level pattern can aﬀect all sub-patterns.
5. Examples of models construction using patterns
In previous sections of this paper, it was shown how patterns can generally be applied to models and how they can
be aggregated. This section provides an in-depth discussion
of how diﬀerent categories of patterns can be used together
when constructing the task, dialog, presentation and layout
model.
5.1. Patterns in task modeling

Fig. 4. Interface of a pattern.

Patterns for the task model describe generic reusable
task fragments that can serve to establish the task model.
In particular, instances of task patterns (i.e., already customized patterns) can be used as building blocks for the
task model. Examples of such patterns for the task model
include: Find something, Buy something, Search for something, Login to the system or Fill out an input form.
A typical example of a task pattern is Search (Gaﬀar
et al., 2005). The pattern is suitable for interactive applications that manage considerable amounts of user-accessible
data. The user wants to have fast access to a subset of this
data.
As a solution, the pattern suggests giving the user the
possibility to enter search queries. On the basis of these
queries, a subset of the searchable data (i.e., the result

1414

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

set) is calculated and displayed to the user. The MultiValue Input Pattern (Paternò, 2000; Sinnig, 2004) may be
used for the query input. After submission, the results of
the search are presented to the user and then they can
either be browsed (Browse Pattern (Sinnig, 2004)) or used
as input for reﬁning the search.
Fig. 6 illustrates how the Search pattern is composed of
the sub-patterns Multi-Value Input and Browse, as well as
of recursive references to itself (Search). It also demonstrates how the variables of each pattern are interrelated.
The value of the ‘‘Object’’ variable of the Search Pattern
will be used to assign the ‘‘Object’’ variable of the Browse
and Sub-Search Patterns. In addition, a subset of the
‘‘Search’’ object attributes is used to determine the various
‘‘Input Fields’’ of the Multi-Value Input Pattern, which is in
turn responsible for capturing the search query. During the
adaptation process, variables of each pattern must be
resolved in a top-down fashion and replaced by concrete
values.
The suggested task structure of the Search Pattern is
illustrated in Fig. 7. In order to apply and integrate the task
structure, the pattern and all its sub-patterns must be
instantiated and customized to the current context of use.
The top-down process of pattern adaptation can be
greatly assisted by tools such as wizards. A wizard moves
through the task pattern tree and prompts the user whenever it encounters an unresolved variable. In Section 7,
we introduce the Task Pattern Wizard, a tool that assists
the user in selecting, adapting and integrating task and feature patterns.

5.2. Patterns in dialog modeling
Our framework’s dialog model is deﬁned by a so-called
dialog graph. Formally speaking, the dialog graph consists
of a set of vertices (dialog views) and edges (dialog transitions). Creating the dialog graph is a two-step process: ﬁrst,
related tasks are grouped together into dialog views. Second, transitions from one dialog to another, as well as trigger events are deﬁned.
In order to foster establishing the dialog model, we
believe that patterns can help with both grouping tasks
to dialog views and establishing the transition between
the various dialog views.
A typical dialog pattern is the Recursive Activation
Pattern (Breedvelt et al., 1997). This pattern is used when
the user wishes to activate and manipulate several instances
of a dialog view. In practical terms, it suggests a dialog
structure where, starting from a source dialog, a speciﬁc
creator task can be used to instantiate a copy of the target
dialog view. The pattern is applicable in many modern
interfaces where several dialog views of the same type
and functionality are concurrently accessible. A typical
example of an application scenario is an e-mail program
that supports editing several e-mails concurrently during
a given session.
In the left pane of Fig. 8, we observe that in order to
adapt (instantiate) the pattern, the source dialog view
and the corresponding creator task, as well as the target
dialog view must all be set. A speciﬁc instance of the
pattern is shown in the right part of Fig. 8, simulating

Fig. 6. Interface and composition of the search pattern.

Fig. 7. Structure of the search pattern.

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

Fig. 8. Interface and ‘‘Microsoft Outlook’’ instance of the recursive
activation pattern.

the navigational structure of Microsoft Outlook when
composing a new message. For this particular example,
the visual notation of a tool called the Dialog Graph
Editor (Sinnig, 2004) was used.
5.3. Patterns in presentation modeling
The abstract delineation of user interface is determined
in the presentation model through a deﬁned set of abstract
UI elements. Examples of such UI elements are Buttons,
Lists or more complex aggregated elements such as trees
or forms. Note that all interaction elements should be
described in an abstract manner without reference to any
particular interface components. Likewise, style attributes
such as size, font and color remain unset, pending deﬁnition by the layout model. Abstraction is key to the success
of presentation model as it frees the designers from
unneeded details and allows for more eﬃcient reuse on different platforms.
Patterns for the presentation model can be applied when
describing the abstract UI elements. However, they can be
more eﬀective when applied for deﬁning and mapping complex tasks (such as advanced search) to a predeﬁned set of
interaction elements. In this many-to-many interaction,
patterns can provide insight into proven solutions ready
to reuse.
One illustrative example of a presentation pattern is the
Form Pattern. It is applicable when the user must provide
the application with structural, logically-related informa-

1415

tion. In Fig. 9, the interface of the Form Pattern is presented, indicating that the various Input Fields to be
displayed are expected as parameters. It is also shown that
the Unambiguous Format Pattern can be employed in order
to implement the Form Pattern.
In particular, the Unambiguous Format Pattern is used
to prevent the user from entering syntactically-incorrect
data. In conjunction with the Form Pattern, it determines
which interaction elements will be displayed by the input
form. XUL code will be produced for the most suitable
interaction element, depending on the data type of the
desired input as shown in Fig. 10. Three diﬀerent instances
of the Unambiguous Format Pattern are presented.

5.4. Patterns in layout management modeling
In this step, the abstract UI elements of the presentation
are physically positioned following an overall layout or
ﬂoor plan, which yields the layout model. Furthermore,
the visual appearance of each interaction element is speciﬁed by setting fonts, colors and dimensions.
There are two diﬀerent ways in which patterns can be
employed when deﬁning the layout model: (1) by providing
a ﬂoor plan for the UI and (2) by setting the style attributes
of the various widgets of the UI. The proposed solutions
and the criteria of selecting between diﬀerent designs
depend – among other factors – on the context of use, nature of the application and satisfaction of the users. Aesthetic and human behavior aspects can complicate the

Fig. 9. Interface of the form pattern.

Fig. 10. Unambiguous format pattern with three unique instances.

1416

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

Fig. 11. Floor plan suggested by the portal pattern (Welie, 2004).

design and make the ﬁnal results unpredictable. Patterns
come in handy as shortcuts to analyzing some of these considerations by oﬀering solutions that have been used before
with good results.
The layout planning consists of determining the composition of the UI by providing a ﬂoor plan. Examples of
such patterns are the Portal Pattern (Welie, 2004), Card
Stack (Tidwell, 2004), Liquid Layout (Tidwell, 2004) and
Grid Layout (Welie, 2004). Fig. 11 presents the ﬂoor plan
suggested by the Portal Pattern, which is applicable for
web-based UIs.
In the style planning, Layout Patterns are beneﬁcial when
the style attributes of the various widgets of the UI must be
conﬁgured. For instance, the House Style Pattern suggests
maintaining an overall look-and-feel for each page or dialog
in order to mediate the impression that all pages share a
consistent presentation and appear to belong together.
6. Putting it all together: the pattern wizard tool
Eﬃciently choosing and applying patterns requires tool
support. In response, we have implemented a prototype of
a task pattern wizard that is designed to support all phases
of pattern application for the task model, ranging from
pattern selection to adaptation to integration. After parsing the pattern, the tool guides the user step by step
through the pattern adaptation and integration process.
In what follows, we provide a brief description of how
the Task Pattern Wizard is used. Particular attention is
given to outlining how the tool supports each phase of pattern application.
The generic user interface description language, XUL,
has been selected as the medium by which patterns and
models will be described. This is because XUL provides a
clear separation between the high-level user interface deﬁnition (in terms of abstract widgets that comprise the UI and
that form the syntax and semantics the language) and its
visual appearance (the ﬁnal rendering in terms of layout

and look-and-feel1). XUL is particularly well suited to our
approach because, similar to XUL, we also distinguish
between the abstract deﬁnition of the UI (presentation
model) and the actual visual appearance (layout model).
Since our presentation model consists of a set of XUL fragments, patterns for the presentation model are used to
dynamically generate XUL code. Each presentation pattern
has been formulated as a so-called XUL Velocity template.
Velocity is a Java-based template engine. The focus of the
Velocity Template Language is to describe the generation
of any form of mark up code such as XUL.
Furthermore, the various XUL fragments of the presentation model are merged in the layout model, resulting in
aggregated XUL code. The loosely connected XUL pieces
are nested and associated together. The way these fragments are merged depends on the overall layout of the
application. In addition, any style attributes that are not
set are bound with concrete values. Because Velocity
templates can be used to generate XUL fragments (for
the presentation model), they can also serve when aggregating XUL code. Consequently, layout patterns are also formalized as Velocity XUL templates.
6.1. Identiﬁcation
In the identiﬁcation phase, we identify a node of an
existing task structure to which a pattern will be applied.
After opening the XUL ﬁle, the Task Pattern Wizard uses
a tree element to display the task structure. Next, the user
chooses a node representing a particular task. The user is
then prompted to decide how the new task structure,
brought in by the pattern, should be integrated into the
existing tree. Some characteristics of the new task structure
can be integrated as being optional and/or iterative.
Optional tasks can be executed, but are not mandatory.
Iterative tasks can be repeated more than once. These
two characteristics are orthogonal to each other and any
combination of them is logically correct. In addition, the
new task’s temporal relationship with the other tasks can
be deﬁned. Fig. 12 is a screenshot taken while identifying
a target node from the task model.
6.2. Selection
In the selection phase, an applicable pattern is chosen. In
order to perform the selection operation, the Task-Pattern
Wizard presents the currently-opened pattern according
to the Alexandrian form (Alexander, 1997). Speciﬁcally,
the pattern is displayed in narrative form: what issue will
be solved, when the pattern can be applied (context), how
it works (solution) and why it works (rationale).
1

The layout refers to the arrangement of the user interface real estate.
The ‘‘look’’ refers to the rendering of each component; its shape and color,
while the ‘‘feel’’ refers to how it behaves when the user interact with it. The
‘‘look-and-feel’’ is often used by java to emphasize how same interfaces
look and behave diﬀerently on diﬀerent platforms.

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

Fig. 12. The task pattern Wizard’s selection screen.

6.3. Adaptation
Once the appropriate pattern has been chosen, it must
be adapted to the current context of use. Each pattern generally contains variables that act as placeholders for context conditions. Diﬀerent kinds of variables exist, such as
‘‘substitution variables’’ and ‘‘process variables.’’
Substitution variables are simply used as placeholders
for certain values (such as the task name). During the pattern adaptation process, the Task Pattern Wizard will
prompt the user to enter values for these variables. Then,
each occurrence of the substitution variable will be replaced
(substituted) with this value in a top-down process.
Process variables are used to describe the structure of
the task fragment that will be created by the pattern. For
example, entering values in a form is very repetitive. The
same basic task (i.e., entering a value) appears over and
over again. Each peer task can be distinguished simply by
its name and input type. Thus, instead of describing each
of these tasks individually, process variables that indicate
the number of respective tasks can be used.
After all variables have been deﬁned, a pattern instance
that can be integrated into the task model is created.
6.4. Integration
In the integration phase, the pattern instance is incorporated into the current task model. In short, a new branch is
added to the task tree or an existing branch is replaced. The
new modiﬁed task structure can then be saved in XUL
format. Within our tool set, XUL serves as a universal
exchange format. This approach enables tools such as the
XUL Task Simulator and the Dialog Graph Editor to
further process the new task model (Sinnig, 2004).
7. An illustrative case study
The management of a hotel is going to be computerized.
The hotel’s main business is renting out rooms of various
types. There is a total of 40 rooms available, priced according to their amenities. The hotel administration needs a
tool capable of booking rooms for speciﬁc guests. More

1417

speciﬁcally, the application’s main functionality consists
of adding a guest to the internal database and booking
an available room for a registered guest. Moreover, only
certiﬁed guests have access to the main functionality of
the program. Eventually, the application would be running
on WIMP-based systems.
Note that only a simpliﬁed version of the hotel management system will be developed. The application and corresponding models will not be tailored to the diﬀerent
platform and user roles. The main purpose of the example
is to show that model-based UI design consists of a series
of model transformations, in which mappings from the
abstract to the concrete models must be speciﬁed. Furthermore, it will be shown how patterns are used to establish
the various models, as well as to transform one model into
another. A summary of all patterns used in this article can
be found in Table 1. For a more detailed description, refer
to Sinnig (2004).
7.1. The task model
Fig. 13 depicts the coarse-grained task structure of the
envisioned hotel management application. Only high-level
tasks and their relationships are portrayed. An impression
about the overall structure and behavior of the applications
is given. The structure provided is relatively unique for a
hotel management application; the concrete ‘‘realization’’
of the high-level tasks has been omitted. The Pattern Task
symbol is used as a placeholder representing the suppressed
task fragments.
A large part of many interactive applications can be
developed from a ﬁxed set of reusable components. If we
decompose the application far enough, we will encounter
these components. In the case of the task model, the more
the high-level tasks are decomposed, the easier the reusable
task structures (that have been gained or captured from
other projects or applications) can be employed. In our
case, these reusable task structures are documented in the
form of patterns. This approach ensures an even greater
degree of reuse, since each pattern can be adapted to the
current context of use.
The main characteristics of the envisioned hotel management application, modeled by the task structure of
Fig. 13, can be outlined as follows:
Accessing the application’s main functionality requires
logging in to the system (the login task enables the management task). The key features are ‘‘adding a guest’’ by entering the guest’s personal information and ‘‘booking a hotel
room’’ for a speciﬁc guest. Both tasks can be performed in
any order. The booking process consists of four consecutively-performed tasks (related through ‘‘Enabling with
Information Exchange’’ operators):
1.
2.
3.
4.

Locating an available room.
Assigning the room to a guest.
Conﬁrming the booking.
Printing a conﬁrmation.

1418

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

Table 1
Pattern summary
Pattern name

Type

Problem

Browse

Task

Dialog

Task

Find
Login

Task
Task

Multi-Value Input Form
(Paternò, 2000)
Print Object
Search
Wizard (Welie, 2004)

Task

Recursive Activation
(Paternò, 2000)
Unambiguous Format

Dialog

The user needs to inspect an information set and navigate a linear ordered list of objects such as
images or search results
The user must be informed about something that is requiring attention. The user must make a
decision that will have an impact on further execution of the application, or the user must conﬁrm
the execution of an irreversible action
The user needs to ﬁnd any kind of information provided by the application
The user needs to be authenticated in order to access protected data and/or to perform authorized
operations
The user needs to enter a number of related values. These values can be of diﬀerent data types,
such as ‘‘date,’’ ‘‘string’’ or ‘‘real’’
The user needs to view the details related to a particular information object
The user needs to extract a subset of data from a pool of information
The user wants to achieve a single goal, but several consecutive decisions and actions must be
carried out before the goal can be achieved
The user wants to activate and manipulate several instances of a dialog view

Form

Presentation

House Style (Tidwell, 2004)

Layout

Task
Task
Dialog

Presentation

The user needs to enter data, but may be unfamiliar with the structure of the information
and/or its syntax
The user must provide structured textual information to the application. The data to be provided is
logically related
Applications usually consist of several pages/windows. The user should have the impression that
it all shares a consistent presentation and appears to belong together

Fig. 13. Course-grained task model of the hotel management application.

As shown in Fig. 13, the Login, Multi-Value Input Form,
Find and Dialog patterns can be used in order to complete
the task model at the lower levels. In the next section, the
application of the Find Pattern will be described in greater
detail.

7.2. Completing the ﬁnd room task
The Find Pattern is essential to completing the ‘‘Find
Room’’ task. In contrast to the patterns already used in
this example, the Find Pattern suggests a number of options
rather than providing a task structure. Fig. 14 illustrates
how ﬁnding an object can be performed by searching,
browsing or employing an agent, depending on the pattern.
Within the scope of the hotel management application,
the task of ﬁnding an available room should only be performed by searching with query parameters. As shown in

Fig. 14, the ‘‘Information’’ variable of the Find Pattern
(in this case, a placeholder for the ‘‘Hotel Room’’ value)
is used to assign the ‘‘Object’’ variable of the Search
Pattern.
The Search Pattern suggests a structure in which the
search queries are entered, then the search results are displayed. Again, the Multi-Value Input Form Pattern is used
to model the tasks for entering the search parameters into a
form. The following search parameters can be used when
searching for an available room: ‘‘Arrival Date,’’ ‘‘Departure Date,’’ ‘‘Non-Smoking,’’ ‘‘Double/Single,’’ ‘‘Room
Type.’’ After submitting the search queries, the search
results (i.e., the available hotel rooms) can be manually
scanned using the Browse Pattern or, based on the search
results; a reﬁnement search can be performed by employing
the Search Pattern recursively. For the scope of this case
study, reﬁnement searches are unnecessary, and the search
results should only be browsed.

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

1419

Fig. 14. Interface and structure of the ﬁnd pattern.

According to the Browse Pattern, the list of objects (the
hotel rooms) is printed, after which it can be interactively
browsed as an option. Details of the hotel room can be
viewed by selecting it. The Print Object Pattern is used to
print out object’s properties. It suggests using application
tasks to print the object values that can be directly or indirectly derived from the object’s attributes. In the case of the
hotel management application, the following hotel room
attributes should be printed: ‘‘Room Number,’’ ‘‘Smoking/Non-Smoking,’’ ‘‘Double/Single,’’ ‘‘Room Type,’’
and ‘‘Available Until.’’
After adapting all patterns to suit the hotel management
application, the task structure displayed in Fig. 15 is
derived. Note that the ‘‘Make Decision’’ task has been
added manually, without pattern support.
A ﬁrst draft of the envisioned task model can be derived
once all patterns have been adapted and instantiated. At
this point, ﬁrst evaluations can be carried out. For
instance, the XUL-Task-Simulator (Sinnig, 2004) can be
used to simulate and animate possible scenarios. Results

of the evaluation indicate that preliminary modiﬁcations
and improvements of the task model are possible.
7.3. Designing the dialog structure
After establishing the task model for our example application, the dialog models can be interactively derived. In
particular, the various tasks are grouped to dialog views,
then transitions are deﬁned between the various dialog
views. Since the desired target platform of the hotel management application is a WIMP-based system, a dialog
view will be subsequently implemented as either a window
or a container in a complex window.
When designing the dialog graph for the hotel management application, we designated the login dialog view as
both modal and the start-up dialog. After executing Submit, the ‘‘Main Menu’’ dialog will be opened. As such, a
sequential transition between both dialog views is deﬁned.
From the main menu, either the ‘‘Add Guest’’ or ‘‘Search
Applicable Room’’ dialog view can be opened by a

Fig. 15. Concrete task structure delivered by the ﬁnd pattern.

1420

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

sequential transition. After completing the ‘‘Add Guest’’
dialog view, the main menu will be re-opened. For this reason, a sequential transition to the ‘‘Main Menu,’’ initiated
by the ‘‘Store Data’’ task, must be deﬁned.
The application’s booking functionality consists of a
series of dialog views that must be completed sequentially.
The Wizard dialog pattern emerges as the best choice for
implementation. It suggests a dialog structure where a set
of dialog views is arranged sequentially and the ‘‘last’’ task
of each dialog view initiates the transition to the following
dialog view. Fig. 16 depicts the Wizard Pattern’s suggested
graph structure.
After applying the Wizard Pattern, the dialog views
‘‘Search Applicable Room,’’ ‘‘Browse Results,’’ ‘‘Show
Details,’’ ‘‘Enter Booking Parameters,’’ ‘‘Conﬁrm Booking’’ and ‘‘Print Conﬁrmation’’ are connected by sequential
transitions.
However, the sequential structure of the booking process must be slightly modiﬁed in order to enable the user
to view the details of multiple rooms at the same time. Speciﬁcally, this behavior should be modeled using the Recursive Activation dialog pattern. This pattern is used when the
user wishes to activate and manipulate several instances of
a dialog view. In this particular case, the user will be able to

activate and access several instances of the ‘‘Show Room
Details’’ dialog view. This pattern suggests the following
task structure: starting from a source dialog view, a creator
task is used to concurrently open several instances of a target dialog view. In our example, the source dialog view is
‘‘Browse Rooms’’ and the ‘‘Select Room’’ task is used to
create an instance of the ‘‘Show Room Details’’ dialog
view.
A premature exit should be provided to oﬀer the user the
possibility to abort the booking transaction. In the hotel
management application, this is achieved by the ‘‘Conﬁrm
Booking’’ dialog view. At this point, the user can choose
whether to proceed with the booking or to abort the transaction. Another sequential transition must therefore be
deﬁned: one which is initiated by the ‘‘Select Cancel Booking’’ tasks and leads back to the main menu. The hotel
management application’s complete dialog graph, as visualized by the Dialog Graph Editor is depicted in Fig. 17.
The next step is to evaluate the deﬁned dialog graph.
The dialog graph can be animated using the Dialog Graph
Editor to generate a preliminary abstract prototype of the
user interface. It is possible to dynamically navigate
through the dialog views by executing the corresponding
tasks. This abstract prototype simulates the ﬁnal interface’s

Fig. 16. Graph structure suggested by the Wizard pattern.

Fig. 17. Dialog graph of the hotel management application.

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

1421

navigational behavior. It supports communication between
users and software developers: design decisions are transparently intuitive to the user, and stakeholders are able
to experiment with a dynamic system.
7.4. Deﬁning the presentation and layout model
In order to deﬁne the presentation model for our example, the grouped tasks of each dialog view are associated
with a set of interaction elements, among them forms, buttons and lists. Style attributes such as size, font and color
remain unset and will be deﬁned by the layout model.
A signiﬁcant part of the user’s tasks while using the
application revolves around providing structured textual
information. This information can usually be split into logically related data chunks. At this point, the Form Presentation Pattern, which handles this exact issue, can be
applied. It suggests using a form for each related data
chunk, populated with the elements needed to enter the
data. Moreover, the pattern refers to the Unambiguous Format Pattern, in conjunction with which it can be employed.
The purpose of the Unambiguous Format Pattern is to
prevent the user from entering syntactically incorrect data.
Drawing on information from the business object model, it
is able to determine the most suitable input element. In
other words, depending on the domain of the object to
be entered, the instance of the pattern provides input interaction elements chosen in such a way that the user cannot
enter syntactically incorrect data.
Fig. 18 shows the windows prototype interfaces rendered from the XUL fragments of the hotel management
application’s presentation model for the ‘‘Login,’’ ‘‘Main
Menu,’’ ‘‘Add Guest’’ and ‘‘Find Room’’ dialog views.
All widgets and UI components are visually arranged
according to the default style.
In the layout model, the style attributes that have not yet
been deﬁned are set in keeping with the hotel management
application’s standards. According to the House Style Pattern (which is applicable here), colors, fonts and layouts

Fig. 18. Screenshots of visualized XUL fragments from the presentation
model.

Fig. 19. Screenshots from the hotel management application.

should be chosen so that the user has the impression that
all windows of the application share a consistent presentation and appear to belong together. Cascading style sheets
have been used to control the visual appearance of the
interface. In addition, to assist the user when working with
the application, meaningful labels have been provided. The
Labeling Layout Pattern suggests adding labels for each
interaction element. Using the grid format, the labels are
aligned to the left of the interaction element.
The layout model determines how the loosely connected
XUL fragments are aggregated according to an overall
ﬂoor plan. In the case of this example, this is fairly straightforward since the UI is not nested and consists of a single
container. After establishing the layout model, the aggregated XUL code can be rendered together with the corresponding XUL skins as the ﬁnal user interface. Fig. 19
shows the ﬁnal UI rendered on Windows XP platform.
8. Conclusion
In this paper, we demonstrated how patterns could be
delivered and applied within be model-based UI development approaches. Within our proposed framework PDMBUI, patterns were introduced to overcome the lack of
reuse in model construction and transformation. This
represents one of the major limitations of existing modelbased UI development frameworks. In particular, we
illustrated how diﬀerent kinds of patterns can be used as
building blocks for the establishment of task, dialog, presentation and layout model. In order to foster reuse, we
proposed a general process of pattern application, in which
patterns are seen as abstractions that must be instantiated.
In addition, we described an interface for combining patterns and a possible model-based formalization. The applicability of the proposed pattern-driven model-based
development approach has been demonstrated through a
comprehensive case study. Furthermore, we introduced

1422

S. Ahmed, G. Ashraf / The Journal of Systems and Software 80 (2007) 1408–1422

the Task-Pattern Wizard tool for using, selecting, adapting
and applying patterns.
A major contribution of this work is the use of patterns
to support model reuse in the construction of speciﬁc models and their transformations. Traditionally, patterns are
encapsulations of a solution to a common problem. In this
research, we extended the pattern concept by providing an
interface for patterns in order to combine them. In this
vein, we proposed the general process of pattern application, in which patterns can be customized for a given context of use. We then transferred the pattern concept to the
domain of model-based UI development. In order to foster
reuse and avoid reinventing the wheel, we demonstrated
how task, dialog, presentation and layout patterns can be
used as building blocks when creating the corresponding
models, which are the core constituents of our development
approach.
In order to demonstrate the applicability of our
approach, we developed a UI prototype for a hotel management application. In this elaborate case study patterns
were identiﬁed and applied for each of the models that were
used during development. The main purpose of the example is to show that model-based UI development consists
of a series of model transformations, in which mappings
from the abstract to the concrete models must be speciﬁed
and – more importantly – automatically supported by
tools.
We are currently expanding the modeling concept into
an integrated pattern environment, IPE, which integrate
this and other tools into a generalized pattern driven development environment that is independent of platform and
programming languages. The transformation between
models is automated by the use of XML as a common
medium to communicate the modelling semantics between
diﬀerent models. This helps tailor the application and corresponding models to diﬀerent platform and user roles.
Acknowledgements
This research was supported partially by a grant from
the National Science and Engineering Research Consul of
Canada. The ﬁrst author thanks Nicole Li, Homa Javahery, Paul Ashutosh, and especially Mohamed Taleb and
Daniel Sinnig all members of the Human-Centered Software Engineering group at Concordia University and
who participated actively over 6 years in the development
of the approach described in this paper. A special thank
goes to Professor Peter Forbrig and his students from
Rostosk University who participated in the development
of the Task Wizard tool.

References
Alexander, C. et al., 1997. A Pattern Language: Towns, Buildings,
Construction. Oxford University Press, New York.
Balzert, H., 1996. From OOA to GUIs: The JANUS System. Journal of
Object-Oriented Programming (February), 43–47.
Borchers, J., 2001. A Pattern Approach to Interaction Design. John Wiley
& Sons, New York.
Breedvelt, I., Paternò, F., Severiins, C., 1997. Reusable Structures in Task
ModelsProceedings Design, Speciﬁcation, Veriﬁcation of Interactive
Systems ’97. Springer, Granada.
da Silva, P., 2000. User Interface Declarative Models and Development
Environments: A Survey in DSV-IS’2000. Springer.
Gaﬀar, A., Seﬀah, A., Van der Poll, J., 2005. HCI patterns semantics in
XML: a pragmatic approach, HSSE 2005. In: Workshop on Human
and Social Factors of Software Engineering, in conjunction with ICSE
2005, the 27th International Conference on Software Engineering, St.
Louis, Missouri, USA, May 15–21, proceedings of ACM.
Granlund, A., Lafreniere, D., 1999. PSA: A pattern-supported approach
to the user interface design process, July, Scottsdale, Arizona.
Märtin, C., 1996. Software Life Cycle Automation for Interactive
Applications: The AME Design Environment. in CADUI’96. Namur
University Press, Namur Belgium.
Mens, T., Lucas, C., Steyaert, P., 1998. Supporting Disciplined Reuse and
Evolution of UML Models. In UML98: Beyond the Notation.
Springer, Mulhouse France.
MOBI-D, 1999. The MOBI-D Interface Development Environment.
Molina, P., Meliá, S., Pastor, O., 2002. JUST-UI: A User Interface
Speciﬁcation Model. In: CADUI 2002, Valenciennes, France.
OliverNova, 2004. CARE Technologies.
Paquette, D., Schneider, K., 2004. Interaction Templates for Constructing
User Interfaces from Task Models. In: CADUI 2004. Funchal,
Protugal.
Paternò, F., 2000. Model-Based Design and Evaluation of Interactive
Applications. Springer.
Prasad, S., 1996. Models for mobile computing agents. ACM Computing
Survey 28 (4).
Puerta, A., 1997. A model-based interface development environment.
IEEE Software 14, 41–47.
Rine, D.C., Nada, N., 2000. An empirical study of a software reuse
reference model. Information and Software Technology, 47–65.
Schlungbaum, E., 1996. Model-Based User Interface Software Tools –
Current State of Declarative Models. Technical Report 96-30,
Graphics, Visualization and Usability Center Georgia Institute of
Technology.
Sinnig, D., et al. 2004. Patterns in Model-Based Engineering. In: CADUI
2004, Funchal, Portugal.
TADEUS, 1998. Task-based Development of User interface software.
TERESA, 2004. Transformation Environment for Interactive Systems
Representations.
Tidwell, J., 2004. UI Patterns and Techniques.
Trætteberg, H., 2002. Model-based User Interface Design in Computer
and Information Sciences. Norwegian University of Science and
Technology, Trondheim.
Trætteberg, H., 2004. Integrating Dialog Modeling and Application
Development, in Madeira, Portugal. January.
Vanderdonckt, J., Limbourg, Q., Florins, M., 2003. Deriving the
Navigational Structure of a User Interface. In: INTERACT 2003.
Zurich: IOS.
Welie, M., 2004. Patterns in Interaction Design.

Enumerating Mobile Enterprise Complexity
21 Complexity Factors to Enhance the Design Process
Ashraf Gaffar
SAP Labs Canada
ashraf.gaffar@sap.com

Abstract
Mobilizing business process can increase the efficiency of business tasks completion by allowing
ubiquitous access to the enterprise. However, we
often tend to just replicate parts of enterprise applications on mobile devices without deep considerations of actual power and limitations of mobile
environment. This approach has often resulted in
serious escalations or even failure of enterprise
mobile applications. In this paper, we shed some
light on different aspects of complexity in enterprise applications, especially from a mobile application perspective. A good design will strike a
balance between those –and other- complexity
factors rather than attempting to include all of
them in a mobile application. Our goal is to help
mobile application designers create a “genuine
mobile” application rather than a “replica of a
desktop”.

1 Complexity
Defining the right application scope is essential
for the success or failure of an application. Jesse
James Garrett emphasizes two main reasons:
“Reason #1: So you know what you’re building;
and Reason #2: So you know what you’re not
building” [1], pp 63-64. For a successful design,
we must keep an eye on different aspects of complexity, and ask the question early on: how many
features do we need, and how much interaction do
we need for each feature –and not more- to improve the overall business process?

Copyright
2009 Dr. Ashraf Gaffar. Permission to
copy is hereby granted provided the original copyright
notice is reproduced in copies made.

270

Multiple forces come into play:
Understanding the actual user needs
(user requirements), and not confuse
them with what the user wants. This can
only be achieved by iterative requirements/ prototyping sessions with actual
users and other stakeholders [2]. Users
are often not sure of what they really
need until they have seen and used the
application.
Understanding the User’s cognitive abilities and limitations, especially in mobile
environment. Good prototyping methods
with a focus on Human Computer Interaction can reveal important information
to improve user experience.
Understanding the technical and system
limitations. This can be effectively
achieved by working closely with system
architects and developers.
This paper provides an approach to help
manage the design of enterprise mobility by isolating and enumerating complexity factors and
then using them as a design language (Section 2).
We then provide a list of complexity factors, classified in three categories:
User experience, related to the end-user
of the applications at different levels of
interaction (Section 3)
System, related to application contents
and technical capabilities of the supporting systems (Section 4)
Design time challenges (Section 5)
Section 6 provides a case study of designing an
enterprise mobile application and shows the effects and interplay of some of the complexity factors, and we provide our conclusion and future
work in section 8.

2 Design Approach
By clearly isolating and understanding complexity
factors, and their effects, we can assess different
aspects of complexity and decide their relative
cost and benefits, hence find an optimal point of
design that satisfies them in the most feasible way.

2.1

Divide and Conquer

Our primary goal is to enhance our talents to produce better mobile applications by dividing complexity aspects and understanding them one at a
time in an explicit and iterative way. Enterprise
applications are inherently sophisticated in nature,
with a growing trend by designers to integrate
more applications and data together to cover the
complete spectrum of business needs. On the
other hand, the time between innovation in technology and new products introduced into markets
has steadily declined from decades to months or
even weeks [3]. To cope with this speed, we need
to improve our ability to manage complexity. As
we design for mobile enterprise application, we
need to pay more attention to the special nature of
mobile devices, platforms, and applications. By
isolating and carefully analyzing different complexity factors, we build a systematic approach to
manage complexity by enumerating it. We can
build a clear understanding of each item and then
collectively devise a good strategy to deal with
them in the most effective way.

force in the model-based development approach
as well as a medium for transferring the knowledge gained by usability experts to software engineers through software development tools [4 and
5].
A design language will explicitly identify
common notions and concepts and add names to
them for more effective communication. Identifying and using complexity factors by explicit
names can simply provide a better way of knowing if we were actually talking about the same
thing, and ensures that we did not miss anything.
This paper will enrich existing design language
vocabulary by providing 21 new terms to complexity-related “things” we implicitly know and
deal with in our daily design activities.

3 Complexity Factors –
User Experience
One of the effective techniques in design is the
use of Wireframes, which helps improve the application’s user experience. They represent what
the user will see and feel while using the application. Dan Saffer divides Wireframes into contents
(text, images…), functionality (UI controls like
button, sliders, menu items…) and navigation (the
way to find and use the contents and functionality)
[6], pp. 111-112. Following this approach, we can
isolate some complexity factors regarding the user
experience:

2.2 Design Language

3.1 Interaction Complexity
(Features per Screen)

Design is a multi-disciplinary, multi-team collaborative work. Design sessions often include
participants from diverse backgrounds who have
different understanding of the same topics. They
could go on long discussions before realizing that
they talk about different things, or that they made
different assumptions. In designing complex applications, no one has the complete picture or a
clear understanding of all aspects, especially at
the beginning. Therefore, the goal of collaborative
design sessions should be to investigate and clarify those aspects and paint a clear picture of the
application. Several research works on interactive
software design have suggested that HCI patterns
and design languages are useful design tools
which complement guidelines, act as a driving

How many features do you want to include in
each screen of the application?
A well-designed application will strike a balance between the number of screens and the number of features in each screen, allowing users to
accomplish their tasks in the most effective way.
Soren Lausen [7] defines task as a closed and
meaningful piece of work for a human user. The
term use case is often used to refer to the portion
of user task that involve the user interaction with
the application to complete their tasks. Some authors (e.g. [8] and [9]) consider the use cases to be
equivalent to tasks, which does not contradict
with our approach. However, for simplicity reasons, we will exclusively use the term task to refer
to user’s work, including both human portion and
human-application interaction.

271

In mobile applications, we have much smaller
screens; so much fewer features per screen are
possible and desired compared to desktop. As an
example of good design, in an iPhone we see few,
large buttons per screen. Each screen typically has
one main task. MS Windows applications on the
other hand tend to stuff many more text and controls per screen.
A typical mobile screen is roughly 1/50 the
size of a typical desktop screen. On top of this
huge difference, we need to consider other major
limitations like a miniature keyboard, the absence
of a mouse, the presence of strong light and
movements, etc.
Within one desktop screen and its associated
tool- and menu bars, we can easily cover thousands of features, as compared to only a handful
of features covered on a mobile screen. For Enterprise mobile applications, an important design
decision is to see if we want to cover all possible
scenarios as we typically do for desktop applications. A scenario can be defined as a concrete
instance of a use case. It contains concise description of a sequence of steps the user will follow to
complete one piece of work [7]. A more suitable
approach would be to consider using the 80/20
rule early on in our design for a more “lean mobile application”. The 80/20 rule will understand
that a typical user will spend 80% of her time
using only 20% of the application. In many cases,
especially in mobile applications, a good deal of
the other, less-used 80% is actually “never” used.

3.2 Navigation Complexity
What is the number of screens needed to accomplish each user task?
Some business tasks require deep navigation
to access and interact with large sets of application features.
The total set of steps per task need to be distributed between screens. Putting fewer items per
screen will result in a large number of screens
which is hard to go through (Navigate). Doing the
opposite will result in easier navigation, but with
over crowded and unpleasant screens.
Example: Service Order Scenario, where a technician will access and update:
a- Service order summary
b- Service order details
c- Equipments related to service order
d- Team members working on same service
order

272

e- Spare parts related to the equipments
f- Payment information
g- Problem reports
h- Service manuals of equipments
i- Quotations of extra work (spot work)
And the list can get longer…
Typically, complex tasks are more suitable
for desktop than for mobile applications. A complex desktop-like task can often be broken down
into smaller mobile tasks, and some of them
would rarely be used. A good design will look at
what tasks and features can reasonably be offered
on a mobile device.

3.3 Application Complexity
What is the number of different tasks that a user
can complete using the application?
While an application needs to be complex to
cover real-business scenarios and help users complete their tasks effectively, each task does not
have to be complex. A user is often inclined to do
one simple task at a time; the shorter, the better.
Trying to do multiple- and often intertwined tasks
simultaneously can have a negative memory load
on mobile users due to the one-screen-at-a-time
limitation of most mobile devices. The iPhone
was the first mobile device to overcome this serious limitation by offering “zoomable thumbnails”
to address our need for multiple-window feature;
a new and successful feature for their mobile UI.
Palm has recently introduced the same concept in
their new devices. Figure 1 depicts this concept.

Figure 1: Zoomable thumbnails.

3.4 Application Concurrency
What is the number of applications a user needs
to (or can) open at the same time?

Concurrent interaction with multiple applications on a mobile device can be daunting. Due to
screen size limitations, a user will need to remember the number of applications opened simultaneously, and the state of each one. While a user
may be allowed to open several applications at the
same time, it is hard to keep a global view on all
of them and move easily between them (crossapplication navigation).
The following two figures show two common
mobile navigation models: Figure 2 shows MS
Windows navigation. This model allows users to
arbitrarily navigate several scenarios across different applications at the same time, replicating
the same concept from the desktop1. Each application can have several open screens (shown in
grey), beside the active one (shown in black).
Figure 3 shows Apple’s iPhone navigation
schema. It uses a simpler and more effective
model following a “hub and spoke” navigation
pattern to limit the number of open screens to one
path, and the active screens to one. To open a new
application on your iPhone, the current application is often terminated 2 . Following the same
navigation approach in business applications
makes them easier to navigate and interact with.

Figure 2: Microsoft mobile navigation model.

1

MS Mobile has some limitation in not allowing two
applications of the same type to be opened simultaneously on mobile devices, but the user can open and
navigate across different applications.
2
The iPhone often saves the state of the application
before closing it, allowing the user to come back to the
same screen when they reopen the application.

Figure 3: Apple’s iPhone navigation models.

3.5 Novelty and Complexity of
Concepts
Does the application introduce new concepts?
We use several concepts to interact with
software applications. Users make assumptions
about the characteristics and behavior of these
concepts, creating a “user mental model”, which
can be seen as a web of these concepts as understood by the user. A clear and correct mental
model will make the application “look familiar”
to the user and allow her to intuitively interact
with it.
For example, a software button is a common
concept, and users know how to interact with it. A
Calendar is a composite concept, and users expect
it to have times and dates, events, time zones,
privacy options, etc. Users will be happy if they
found that their calendar can directly communicate with their email (a messaging concept) or
with their contact lists.
An essential part of the design process, Interaction Design, is to capture user requirements and
translate some of them into concepts entailing
certain behavior encapsulation. Common concepts
are often reused from previous releases, other
applications or borrowed from the business domain (e.g. metaphors). This interaction –if designed carefully- can help users make the right
assumptions and use the application successfully.
If new concepts need to be created to help users
do their tasks, users need to be guided through
their meaning and behavior using tips, help, and
even training, making an application more complex to learn and use. Bizarre, over-complicated,
or counter-intuitive concepts should be avoided at
all times.

273

3.6 Client-Side Processing

4.3 Application Integration

How rich is the user interface?
Some screens will have advanced visual objects that require a lot of processing power, like
compressed/encrypted digital images, audio and
video files, or interactive 3D and 2D objects. So
far, this has been avoided in enterprise mobile
application due to its unmanageable complexity.

Is the designer following a “scenario oriented”
design approach across applications rather than
an “application oriented” one?
A well designed business scenario will run
seamlessly across multiple applications without
manual application crossover. In this case, the
user should be able to interact with- and complete
their business process without the need to open
different applications to view or transfer –as with
copy and paste- information between them. Even
the copy and paste feature is not possible in several mobile devices.
This efficient design approach is not without its
challenges. Implementation of this design will
require two types of integration, transparently to
the user:
Integration between enterprise applications,
in which different applications should be
able to exchange messages and data based
on user actions.
Integration between enterprise application
and local device applications. This can be
another challenge due to several technical
and political reasons. In the mobile domain,
some device manufacturers and carriers
will not allow such integrations altogether,
while others will leave it up to designers
and architects to decide if and how to address this feature in their application.
A less-appealing alternative to integration
(when it is not possible) is one- or two-way synchronization of data between applications, which
can be a daunting task to users, and require a lot
of technical know-how and IT support.

4 Complexity Factors –
System
4.1 Back End System Connectivity
Is the back end system functionality available, and
its behavior known and well understood?
Sometimes, the number of back end services
is overwhelming, and their exact behavior in not
fully understood. An example is finding and connecting to web services in an Enterprise Service
Oriented Architecture (ESOA) environment. It
can be challenging to
i) Locate web services,
ii) Validate their behavior (often only with
trial and error), and
iii) Customize their behavior to the specific
design needs.
Connectivity through Remote Function Calls
(RFC’s) can be equally challenging for complex
functionality.

4.2 Composition of Services
Does the application need to connect to multiple
backend systems to complete the task?
Some applications require connectivity toand composing multiple back end services within
the same application. It can be a challenge to integrate two services to work together, even if they
were using same back end and were made by the
same provider. The challenge can be greater if the
composition is done across multiple back end
system with overlapping data contents, mismatching data formants and semantics as well as incompatible business logic.

274

4.4 Data Volume (Static data)
How much information does the user need to sift
through to complete a task?
Complexity can relate to size of data stored
or exchanged in the application. A typical data
drill down scenario for extremely large data set
can be hard to implement on a mobile UI. Search
and filters are often used to reduce the size of data
and speed up the drill down, but there is not a
silver bullet.

volatility), and if the same data needs to be shared
by multiple mobile devices (shared access).

4.7 Online Connectivity

Figure 4: Sifting through complex data
hierarchy
A good example is in assets and service management application, as shown in Figure 4 above.
Installed base data can be enormous (large number of devices, their repair history, their technical
data and user/maintenance manuals, their suppliers, suppliers data, …deep data hierarchy).

4.5 Transactional Data Volume
(Dynamic Data)
How much new data do you generate daily using
the application?
Some applications involve intensive transactional data covering tens or hundreds of thousands
of transactions, as in the case of retail and inventory controls. There is still a major need to mobilize part of the related business scenario.
In many cases, mobile applications can be
more practical and effective when used to manage
the analytics of this data or only a smaller subset.
Huge transactional data itself would not be suitable for mobile applications.

4.6 Data Integrity
How accurate and correct is your data?
Native mobile applications tend to replicate
data on the mobile device rather than having one
central copy. A significant problem is in synchronization and data consistency. This problem can
be challenging if data is changing often (data

Does the user need online connection all the time,
occasionally, or not at all?
Mobile devices come in a variety of forms.
Laptop computers are often considered as mobile
devices due to their ability to work on battery, be
carried around, and have access to local wireless
networks (LANs, like WIFI, Bluetooth…) and
mobile networks (WANs, like EDGE, GPRS,
using a wireless laptop PCMCIA card). However,
they are not always considered as “True mobile”
devices due to their bulkiness, fragility, and short
battery life. This puts them in a separate category,
and they should not be mixed with other mobile
devices.
Cellular phones, Smart phones, PDAs, and
special purpose mobile devices with scanners, or
micro printers are widely used and considered in
the industry as the mobile devices due to their
portability and longer battery life. A major design
decision is how much connectivity we really need
on the device. This can range from fully offline
applications, where the mobile application does
not require any wireless connection, and will only
connect with the back end application when the
device is put on the cradle to charge; to fully
online application, where the application needs to
be connected to the network all the time to work
properly. In between these two extremes, there
can be different requirements on the online connectivity mode.
Online applications can benefit from client
side processing to reduce the roundtrip delay, the
time between sending a request to server and receiving a response. Roundtrip delay can be a major irritation to online users if they happen too
often, and take longer than couple of seconds.
Applications can have scripts to reduce the need
for bandwidth by doing some of the calculations
and user action validations locally instead of
sending them to server and waiting for response.
The selection of the application connectivity
mode has major consequences on many aspects of
the application, and should be carefully considered early on during requirements and design
phases. No pre-assumptions should be taken, but
careful consideration of true customer needs as
well as device and technology limitations and
alternatives. A careful design will make the most

275

of scripting to enhance application features without overdoing it and hence suffering from its
technical drawbacks.

4.8 Bandwidth Requirements
Does the user need live connection with large
bandwidth to complete her task?
Some mobile applications will require large
bandwidth to support real-time data-intensive
connection or data streaming like TV, video or
gaming. A good example is in Mashup applications that use Google maps on mobile devices to
guide service technician in finding the location of
customers in each service order. Advanced features can be added such as providing service technicians with driving directions from their current
customer’s location to the next one, optimizing
their route based on traffic conditions, and even
planning the sequence of service orders for the
whole day, week, or month based on these conditions.
Scripting can also have significant effect on
bandwidth requirements. If an application is intended to be fully online, initial load is an important factor. Large scripts within the downloaded
page can take loner to download, making the user
interface less responsive than a native application.
Designers often dread the presence of large scripts
due to their reputation of extending initial load
time and tend to minimize their use, or even avoid
them altogether. While a larger bandwidth can
definitely help, well-optimized pages can be much
more responsive for the same bandwidth. A designer should carefully look at common performance optimization techniques before ruling out the
use of scripting.

4.9 Application Portability
Does the application need to run on multiple types
of devices simultaneously?
Enterprise applications run on multi-tier systems, where the user interface tier runs separately
from the application- and back end tiers. Desktop
variations are limited, allowing for easier design
of front end enterprise applications. Nonetheless
deploying on different desktop devices brings
several portability challenges. Due to the larger
variation of mobile devices, as seen in Figure 5,
supporting portability on multiple devices at the
same time can be quite challenging. Designers
need to abstract the application from the interface,

276

the communication channels, and even from the
device platform, which is not always feasible. On
the other hand, this is becoming a major business
need with the spread of online applications and
mobile enterprise. The need to access the same
content any time, anywhere, using any device
available is becoming a necessity rather than a
wish. While this is now often possible thanks to
web-based applications, designers still need to
carefully consider how good their application will
do in such an imperative portability need.

Figure 5: The wide range of mobile devices.

4.10 Number of Mobile Devices
How many devices can your middleware manage
(the total and concurrent number of devices)?
Bottlenecks in mobile applications can have a
more visible effect due to mobile-related factors
like longer air-time delays (compared to shortrange wireless technologies like Wi-Fi), smaller
bandwidth, and longer disconnects. A mobile
middleware will have to compensate for these
mobile factors on top of their regular server capabilities. Mobile applications can therefore be more
sensitive to scalability than wired applications; a
larger number of mobile devices can have nonlinear and often exponential effect on the mobile
server performance, and service can degrade more
rapidly than desktop counterparts.

4.11 Security
Is your enterprise data secure enough?

Enterprise security is essential for most –if
not all- enterprises. The large number and the
wide distribution of systems and people make it
more demanding. Several documents have confidential information, but are still shared between
several users with varying degrees of access rights,
which make the enterprise environment more

complex to secure than personal applications.
Design should take into consideration several
security-related factors like:
Multitude of log ins required for each
user and the use of different- or universal
authentication methods
The contents of data accessed or created
by the application and their confidentiality requirements.
User roles and access levels to different
documents and systems from within the
application
Security of networks used and its suitability to applications designed
Mobile applications make secure environment more challenging due to the use of open
space as the transmission medium where the wireless communication is accessible to almost anyone with the right equipments.

5 Design Time Challenges
The above complexity factors refer to the “run
time” of enterprise mobile solutions and must be
carefully considered for every mobile application.
Business, technical, and user requirements should
be collected, understood, and analyzed collectively to address real mobile needs. To complete
the picture, additional “design time” challenges
are also taken into consideration.

5.1 Design Portability (Prior
Knowledge of User Device
and Platform)
If the application will be deployed on one device
type only, do we know the device and platform
information at design time?
For desktop applications, the range of device
variation is limited, and often compatible. Most
applications are designed to run on 17 inch
screens or more, with resizable windows that support dynamic layout adjustments. Typically, designers will have enough space to layout their
design relatively easily, regardless of user’s
screen size, or platform specifics.

Figure 6: Mobile devices with wide variations.
The variation in mobile devices is much greater,
and platform compatibility is still a nightmare for
designers, architects, and developers. Figure 6
shows two mobile devices from the same manufacturer running the same operating system. A
clear difference in screen size and hardware controls will make it difficult to design one application optimized for both of them. For example:
Variations in user interface size and
resolution. User interfaces are often
fixed size, filling up the whole screen
real estate, which is typically too small to
support resizing or multiple windows. If
this size and the supported resolution are
unknown, designing for generic device
can be a significant design challenge.
Variations in aspect ratio and screen
orientation. Some mobile devices have
almost-square screens, while others have
a large aspect ratio (width-to-height ratio
of the screen). In addition, mobile users
can rotate their screens much easier than
they do their desktop screens. Some devices will support both vertical and horizontal screen modes (manually or
automatically adjusting to screen physical orientation), and others will only use
one orientation all the time.
Variations in hardware controls. Each
mobile device has a different set of
hardware buttons, wheels and possibly
keyboard. Including them in the software
design can greatly reduce complexity as
they reduce the need for software con-

277

trols. Designing for an unknown device –
even if the intention is to deploy on one
type only- can not make any assumptions
about hardware, and will often revert to
the least-common denominator of all devices which is namely to assume “no
hardware controls are on the device”, except for the power button. This means
that all controls will have to be made as
soft controls. This can be less efficient as
they take up space on the UI, take up
some processing power, and take longer
to respond than hardware controls.
Variations and incompatibility of platforms can be more challenging. Unlike
device variations, platform variations do
not have a least-common denominator to
consider; they vary significantly in their
entire platform stack. If the application is
intended to run as a native application,
designers often have to choose a specific
platform early on, before they start their
design. Online applications have an advantage here as they run within a
browser, and do not have to use the native platform stack. Unlike platform stark
variations, most browsers loosely follow
W3C standards, reducing (but not fully
eliminating- the platform variation challenge.
While all previous aspects point toward the
idea that it is better to know the mobile device in
advance, this is not always the case. There is a
considerable risk in designing for one dedicated
device. While it can be wise to optimize the design and run the application efficiently on one
particular device, on the long term it will be expensive to change the design if a newer version of
the device needs to be considered.
An important factor to consider in this case is
how much it would cost to redeploy the application into another device. Careful design can take
this factor into consideration based on both business needs and technical feasibility, and a modular design can hence reduce the cost of
redeployment on a different device.

278

5.2 Maturity of Development
Environment
Do we have a mature development environment to
develop a high-fidelity version of the design?
Before reaching an optimal design point that
addresses and satisfies user and business needs,
limitations of development environment must be
considered and available technologies well understood. Technology limitations and workarounds
often have negative consequences, and should be
identified and addressed early on during design.
For example, advanced UI controls and lifelike interaction are highly favored by application
designers, allowing for rich user experience with
fewer controls. However, if technology can not
deliver this richness in a quality end product, the
design can work around the available technologies
that can deliver a quality application.

5.3 Deployment and Customer
Enhancement Considerations
Do designers know all details about the end users
actual environment?
In most cases, the answer is no. Enterprise
applications are typically designed for multiple
customers rather than one. This is commonly
known as multi-instant design and architecture. A
better description would be a “meta application”
rather than an application. Designers often have to
work with the most likely of all previous complexity factors. A fictitious set of tables, screen
contents, navigation, etc. is often the solution.
With the help of previous releases, similar applications, and user interviews, designers can have a
general understanding of what the final application might look like, and an accurate estimation of
real users’ context of work. In reality, each customer will implement an instant of the application
that is not exactly similar to other instances of the
same application. To create an application instant,
customers will customize the application to their
own specific needs, data contents, screen contents,
etc. This might render the application far from
how it was designed and intended to look and
behave.
Besides application design, guidelines are often produced to help end-application designers
keep the quality (and spirit) of the original design
while trying to fulfill their specific business needs.

5.4 Future Releases and Service
Packs Consideration
Will the application support future releases without major business disruptions?
Enterprise software often runs missioncritical applications. Only few companies can
afford disruption of their business to install newer
version or add patches to their applications. On
the other hand, changes in business needs, government regulations, or simply fixing bugs often
require changes to existing applications and their
interfaces. Application design should follow a
modular approach with coherent functionality and
well-defined interfaces between them, allowing
future enhancements to easily replace older modules with newer ones without the need for major
work.

6 Design Case Study: Defining the Scope of a Mobile
Application
In this case study we consider a typical business
user who wants to view and possibly execute
some of her tasks while not in office, using her
mobile device, hence reducing her in-office work
load and responding to these requests in a timely
fashion.

6.1 Entry Points
Users typically have multiple entry points to their
new tasks, where they can keep a list of outstanding to-do tasks and get information about
newly assigned tasks. In our design approach, we
first consider some common entry points:
Email-Centered Tasks: User receives an
email about the task, and can have action
items within the email itself to complete
the task, without the need to start new applications. This entry point is good for immediate actions.
Calendar-Centered Tasks: User can open
an event on her calendar, and have actionable items related to those events. This entry point is good for scheduled actions.

People-Centered Tasks: Good for peoplerelated actions, like searching for new people, and then contacting them via email,
IM, or a phone call, or accessing their information. User will typically accesses list
of contacts and chose an action directly
from there with one click without the need
to go and open another application (like an
email application, or an IM), or read the
phone number from the list and punching it
on the keypad manually to take the action.
Application-Centered Tasks: The user
navigates the file system on the device to
look for and open task-related applications
or document to do her task. This is the traditional approach favored by developers
due to its relative ease-of-development, but
can be less favored by users, especially on
mobile devices due to the extra work
needed, the need to remember both tasks
and application/document locations, and
the lack of integration between documents.
A large number of tasks would also be hard
to manage and schedule using this approach.
We typically use all 4 entry points depending
on the nature of tasks. Users can also combine the
features of more than one entry point.

6.2 Actionable Items and Scenarios
Next we need to determine how far we want to
allow users to take actions in the application. This
will have a major impact on the scope of the application both at the interface and the application
levels.
For the interface design, we normally start
with simple design by assuming the interaction
will be text based. Early prototyping and user
testing will reveal more accurate feedback that
helps us refine our design decisions. The user will
have text, links, and forward-backward buttons to
interact with the application. These are robust and
common browser-like controls but typically have
mediocre user experience. We can improve on
that by adding advanced user controls which will
have an impact on application complexity that we
need to carefully analyze.

279

In our high level application design we identify 6
different scopes options to choose from. The simplest scope would be to build an application to
send a read-only text email (or instant message) to
the user, summarizing the task to be completed.
The user will complete her task the next day when
she comes to the office. Apparently this will be an
easy-to-develop application with a very limited
scope but also limited effectiveness.
We can extend the scope to highrt levels by
allowing users to receive actionable items in their
email message to take local actions, or take some
server-side actions, etc. A desirable scope would
be to allow the user to access different systems
and applications of the enterprise in a fully actionable mode, accessing information and updating them as needed (CRUD mode, Create, Read,
Update, and Delete).
Figure 7 is a visualization of this example,
with sample scenarios for each of the 6 possible
scopes for the application, with increased functionality.

Figure 7: Actionable Items on Email

6.3 Scope Validation through
Complexity Analysis
Increased functionality often leads to increased
complexity. The next step is to select the application scope and proceed to an evaluation of the
complexity of the application.

280

In this example, after initial analysis and selection
of the full backend access as the application scope
(level 6), we are clear to start a closer evaluation
of complexity.
Using the 21 complexity factors as a check
list, we can make sure our selection is feasible and
will not have fatal design or technical errors. As
we evaluate the feasibility of our application design, we can increase or decrease the scope depending on user and market needs, but also
depending on our ability to deliver the designed
application. The complexity factors can help validate our readiness to develop and deliver our design.
To determine the feasibility of enriching the
design, let’s assume we want to increase the scope
by replacing simple text-based interaction with a
richer user experience using graphics and interactive user controls. Apparently we can still have
the original 6 levels of scope, only with higher
complexity.
Adding rich user experience is generally a
good idea. However, if not considered carefully,
complexity can grow beyond the practical limitations of our development ability, especially if we
want to integrate middleware and backendsystems in the new application. This is where
design becomes an art besides being a science.
While it is impractical to enumerate the exact
outcome of planned enrichments separately, we
carefully study their effects and development
challenges and come up with an informed decision about their collective complexity.
Figure 8 shows a hypothetical curve of higher
complexity as we add rich GUI features to our
scope. The dotted arrows represent two boundary
design options:
Option 1 would be to keep all existing features and add rich interaction features to them.
This might lead to an unmanageable level of
complexity and render the application delivery
unfeasible.
Option 2 would be to avoid additional complexity and opt for a reduced set of application
features. This would be achieved by reducing
application features related to visual interaction
with backend systems. This can obviously reduce
the effectiveness of the application.

Figure 8: Hypothetical complexity growth with
rich UI features
Careful consideration of different complexity factors can help designers understand and estimate
the feasibility of the new design, leading to a new
optimal point that lies somewhere between the
two boundaries 1 and 2. This collaborative analysis among different teams participating in the design sessions will reveal what we can afford to
deliver without taking too much risk allowing us
to increase application richness to its optimal
point, but not beyond it.
A key success factor is to investigate complexity early on during requirements and application scoping, where designers can create a
successful application in collaboration with solution managers, architects, development, and quality assurance teams. Following this approach
early on will help avoid late discovery of complexity problems which often lead to expensive
changes or fatal problems. Applying this approach
iteratively will improve the design agility by helping capture new challenges early on as more details are added.

7 Conclusion
The complexity factors vary greatly depending on
the domain-, user-, and business requirements. A
collaborative design process will evolve around
an accurate understanding of these factors through
iterative requirements and design processes.
Document-oriented waterfall models are still used
for systematic design-develop processes of com-

plex applications. However, we believe iterative
design approaches can be more effective for handling the design of many complex applications.
[10] emphasizes that “there is nothing wrong with
plan-driven, waterfall-based, document-centric
approaches. They’re just not suited to controlling
complex activities like forward development. We
need to adopt iterative software development because it is the best technique for the activities
we’re trying to manage and control”
In this work, we defined some common complexity factors and presented a case study of a
mobile application design to show how to manage
complexity early on. An initial planning can determine the scope of the application. A more careful design will then look into complexity factors
of the planned scope and determine our ability to
deliver a working application.
We believe good design decisions based on
the same factors will vary from case to case. Actionable items on possible answers will greatly
depend on specifics of each application, and will
be impractical to enumerate and generalize. Designer expertise as well as the collaboration dynamics among design and technical teams is
essential as complexity factors may become intertwined, and often difficult to understand without
iterative, multi-disciplinary and collaborative design sessions. That may explain why design will
remain a human activity.
A first-class design will look for an optimal
balance rather than attempting to maximize all
features. This list of complexity factors can be
used as a reminder or a check list during design
sessions held between different teams and users.
By explicitly discussing each one of them, designers will be able to guide their work towards
the most critical and most difficult ones, and pay
special attention to them, collect more feedback
from experts and associated stakeholders, and
hence build better insight into their actual cost and
benefits.
Future work is needed to enhance this approach in two main directions:
First, as we continue using those factors during our design sessions, we will identify additional complexity factors. At this stage, we
believe the ideal response to each factor is best
left to designers’ judgment. However, in the future we will be looking into providing recommended response for some well known cases.
Eventually, this might lead to new design patterns
for mobilizing enterprise applications.

281

Second, we can build interrelationships between those factors. Relationships can be represented by linking each factor to some other factors
in an explicit way. Qualifying the links with further descriptions will add deeper understanding of
the interplay between those factors and help designers make more informed decisions on their
optimal point.

8 Other Legal Matters
Figures in this paper used to demonstrate mobile
devices and interfaces were obtained from existing devices made by different manufacturers and
software providers including Apple©, Microsoft©,
HP©, LG ©, Samsung ©, Nokia©, Symbol©,
Palm©, and Motorola ©.

Acknowledgements
This work was made possible with the continuous
discussions and feedback within SAP solution
managers, design, architecture, development and
research teams. Nolwen Mahe provided extensive
feedback and meticulous comments through several iterations of this paper. Other valuable feedback was also provided by Montreal’s Research
Team.

About the Author
Ashraf Gaffar works as a Senior UI Design
Specialist at SAP Canada in Montreal; first with
the User Experience team, then with SAP Research team. He is Certified Project Management
Professional (PMP) and specializes in mobile
enterprise applications design. He is member of
ACM and IEEE as well as Project Management
Institute (PMI). Dr. Gaffar holds a Ph.D. in Human Computer Interaction from Concordia University in Montreal, and can be reached at
ashraf.gaffar@sap.com

References
[1] J.J. Garrett. The elements of User Experience,
User-Centered Design for the Web. AIGA
New Riders Publishing, Berkeley, CA, USA,
2003.

282

[2] S. Robertson & J. Robertson. Mastering the
Requirements Process, Second Edition. Addison Wesley, Pearson Education, Boston, MA,
USA, 2006.
[3] D. W. Orr. The Nature of Design, Ecology,
Culture, and Human Intention. Oxford University Press, Oxford, New York, USA, 2002.
[4] T. Erickson. Lingua Franca for Design: Sacred Places and Pattern Languages. Proceedings of Designing Interactive Systems (DIS
2000, Brooklyn, NY, August 17-19, 2000).
ACM Press, NY, USA, 2000, pp. 357-368.
[5] J. O. Borchers. A Pattern Approach to Interaction Design. Proceedings of Designing Interactive Systems (DIS 2000, Brooklyn, NY,
August 17-19, 2000). ACM Press, NY, USA,
2000. pp. 369–378.
[6] D. Saffer. Designing for Interaction, creating
Smart Applications and Clever Devices.
AIGA New Riders Publishing, Berkeley, CA,
USA, 2007.
[7] S. Lausen. Software Requirements, Styles
and Techniques. Addison Wesley, Pearson
Education, Harlow, England, 2002.
[8] P. Stevens & R. Pooley. Using UML, Software Engineering with Objects and Components. Addison Wesley, Pearson Education,
Harlow, England, 2000.
[9] K. Weigers. Software Requirements, Second
Edition. Microsoft Press, Redmond, WA,
USA, 2003.
[10] J. Spence. There has to be a Better Way. Proceedings, 2005 Agile Conference, IEEE Press,
2005, pp. 272-278.

Appendix A: Copyright Notice Information
Copyright © 2009 Dr. Ashraf Gaffar.
Permission to copy is hereby granted
provided the original copyright notice is
reproduced in copies made.

Building Faculty Expertise in Outcome-based
Education Curriculum Design
Srividya Bansal, Ashraf Gaffar

Odesma Dalrymple

School of Computing, Informatics, Decision Systems Engg.
Arizona State University, Mesa, AZ, USA
{srividya.bansal, ashraf.gaffar}@asu.edu

Shiley-Marcos School of Engineering
University of San Diego, San Diego, CA, USA
odesma@sandiego.edu

Abstract— An information technology (IT) tool that can guide
STEM educators through the complex task of course design
development, ensure tight alignment between various
components of an instructional module, and provide relevant
information about research-based pedagogical and assessment
strategies will be of great value. A team of researchers is engaged
in a User-Centered Design (UCD) approach to develop the
Instructional Module Development System (IMODS), i.e., a
software program that facilitates course design. In this paper the
authors present the high-level design of the IMODS and
demonstrate its use in the development of the curriculum for an
introductory software engineering course.
Keywords—instruction design; outcome-based
semantic web-based application; user-centered design

I.

education;

INTRODUCTION

Felder, Brent and Prince [1] have made a strong argument in
support of instructional development training for engineering
faculty. This argument, which cites among other reasons:
shortfalls in graduation rates, changing demographics and
attributes of the student body, and modifications in the
expectations of graduates; can be extended to encompass all
STEM fields. Furthermore, studies show that for 95% of new
faculty members, it takes four to five years, through trial and
error (the most common method of gaining expertise in
teaching), to deliver effective instruction [2]. While there are
a number of options available to faculty for receiving
instructional development training (i.e., training focused on
improving teaching and learning), most share similar format,
features, and shortcomings. For example: workshops, courses
and seminar series, the most common program structures, are
often offered at a cost to the institution, department or
individual attendee; delivered face-to-face at specified times;
and accessible to a restricted number of persons. Even when
interest is high, these factors can become obstacles to
participation.
Outcome-based Education (OBE) is a result-oriented approach
where the product defines the process. The learning outcomes
guide what is taught and assessed [3], [4]. This approach
contrasts the preceding “input-based” model that places
emphasis on what is included in the curriculum as opposed to
the result of instruction. There is a growing demand and
interest in faculty professional development in areas such as
OBE, curriculum design, and pedagogical and assessment
strategies.
In response to these challenges and needs, a group of faculty

978-1-4799-8454-1/15/$31.00 ©2015 IEEE

researchers from two south-western universities have
undertaken a project to design and develop the Instructional
Module Development System (IMODS) that will facilitate
self-paced instructional development training while the user
creates his/her course design with the added benefits of being
free to all who are interested, accessible almost anywhere
through a web browser, and at any time that is convenient.
Additional key features of the IMODS are as follows:
1. Guides individual or collaborating users, step-by-step,
through an outcome-based education process as they
define learning objectives, select content to be covered,
develop an instruction and assessment plan, and define
the learning environment and context for their course(s).
2. Contains a repository of current best pedagogical and
assessment practices, and based on selections the user
makes when defining the learning objectives of the
course, the system will present options for assessment and
instruction that align with the type/level of student
learning desired.
3. Generates documentation of a course designs. In the same
manner that an architect’s blue-print articulates the plans
for a structure, the IMODs course design documentation
will present an unequivocal statement as to what to expect
when the course is delivered.
4. Provides just-in-time help to the user. The system will
provide explanations to the user on how to perform course
design tasks efficiently and accurately. When the user
explores a given functionality, related explanations will
be made available.
5. Provides feedback to the user on the fidelity of the course
design. This will be assessed in terms of the cohesiveness
of the alignment of the course design components (i.e.,
content, assessment, and pedagogy) around the defined
course objectives.
In this paper the authors present the high-level design of the
IMODS and demonstrate its use in the development of the
curriculum for an introductory software engineering course.
The rest of the paper is organized as follows. Background
material for this research project is presented in section 2.
Section 3 presents the high-level design of the IMODS
software system. Section 4 presents a case study that
demonstrates the use of the IMODS framework in the
development of an introductory software engineering course.
The paper concludes with future work and acknowledgements.

II.

BACKGROUND

A. Related Work
To justify the need for the development of IMODS we
conducted a competitive analysis to determine the strengths
and weaknesses of tools and approaches currently used to
support course design and related training. The tools and
approaches that were evaluated were categorized into five
groups based on primary functions and features.
Knowledge/Learning Management System (KMS/LMS):
This group contains a number of proprietary and open-source
solutions that are delivered either as desktop or web-based
applications. These tools mainly facilitate the administration
of training, through the (semi-) automation of tasks such as:
registering users, tracking courses in a catalog, recording data,
charting a user’s progress toward certification, and providing
reports to managers. These tools also serve as a platform to
deliver eLearning to students. In that context, their main
purpose is to assemble and deliver learning content,
personalize content and reuse it.
Examples: Blackboard, Moodle, Sakai, Canvas, WeBWorK,
and Olat
Educational Digital Libraries: These tools contain
collections of learning and educational resources in digital
format. They provide services that support the organization,
management, and dissemination of the digital content for the
education community.
Examples: National Engineering Education Delivery System
(NEEDS), National Science Digital Library (NSDL) and
Connexions
Personalized Learning Services: There are a number of elearning tools that leverage semantic web technologies to
support personalized learning services for their users with an
ontology based framework [5]. Some of these tools function
by initially profiling the learner and then, based on that
profile, identifying the best strategies for presenting resources
to them. They can also provide feedback to instructors on
student learning, so improvements to the content and structure
of the course can be incorporated. For many of these tools the
ontology framework is used to bridge learning content with
corresponding pedagogy; however, they seldom address
assessments and learning objectives. Examples: Content
Automated Design and Development Integrated Editor
(CADDIE), Intelligent Web Teacher (IWT), LOMster [6], and
LOCO-Analyst [7].
Understanding by Design Exchange (UbD Exchange): This
is a software framework based on Wiggins’s and McTighe’s
Backward Design principle [8] that is used for designing
curriculum, assessments, and instruction, and integrates K-12
state and provincial standards in the design of units [9]. It
provides a form-based user interface to fill in the details of the
course unit that is being designed.

Professional Development Workshops, Courses &
Seminars: Face-to-face training sessions in teaching and
learning that are facilitated by experts in the field of
instructional design.
Examples: National Effective Teaching Institute, Connect
Student Learning Outcomes to Teaching, Assessment, and
Curriculum, Content, Assessment ant Pedagogy [10].
Our search identified very few tools and approaches that
contained features or functionality that explicitly facilitated
the design of course curriculum. Of these tools few of them
facilitated the generation of design documentation and
feedback to the user on the fidelity of the design. These are
two key deficiencies that IMODS will address.
B. IMODS Framework – PC3 Model
The IMOD framework adheres strongly to the OBE approach
and treats the course objective as the spine of the structure.
New constructs (not included in the models previously
discussed) are incorporated to add further definition to the
objective. The work of Robert Mager [11] informs the IMOD
definition of the objective. Mager identifies three defining
characteristics of a learning objective: Performance –
description of what the learner is expected to be able to do;
Conditions – description of the conditions under which the
performance is expected to occur; and the Criterion – a
description of the level of competence that must be reached or
surpassed. For use in the IMOD framework an additional
characteristic was included, i.e., the Content to be learned –
description of the factual, procedural, conceptual or metacognitive knowledge; skill; or behavior related to the
discipline. The resulting IMOD definition of the objective is
referred to as the PC3 model [12].
The other course design elements (i.e., Content, Pedagogy,
and Assessment) are incorporated into the IMOD framework
through interactions with two of the PC3 characteristics.
Course-Content is linked to the content and condition
components of the objective. The condition component is
often stated in terms of pre-cursor disciplinary knowledge,
skills or behaviors. This information, together with the content
defined in the objective, can be used to generate or validate
the list of course topics. Course-Pedagogy is linked to the
performance and content components of the objective. The
types of instructional approaches or learning activities used in
a course should correspond to the level of learning expected
and the disciplinary knowledge, skills or behaviors to be
learned. The content and performance can be used to validate
pedagogical choices. Course-Assessment is linked to the
performance and criteria components of the objective. This
affiliation can be used to test the suitability of the assessment
strategies since an effective assessment, at the very least, must
be able to determine whether the learner’s performance
constitutes competency. Figure 1 shows a visual
representation of the IMOD framework. Learning domains
and domain categories defined by Bloom’s revised taxonomy
[11] are used to describe learner performance. Learning
domains are categorized into Cognitive, Affective, and

Psychomotor, which are further classified under various
Domain Categories (Remember, Understand, Apply, Analyze,
Evaluate, Create). Each Domain Category has performance
verbs associated to it. Learning objective in the PC3 model is
described in terms of Performance, Content, Condition, and
Criteria. Performance is described using an appropriate action
verb from revised Bloom’s taxonomy based on the learning
domain and domain category.
Criteria: Learning objective assessment criteria are
categorized as quality, quantity, speed, and accuracy. Criteria
for learning objectives are described in terms of one or more
of these categories with a criteria value defined or determined
later when the assessment is defined.
Knowledge Dimensions: The revised Bloom’s taxonomy
introduced an additional dimension called the knowledge
dimension that was categorized as Factual, Conceptual,
Procedural and Metacognitive.
Topic Prioritization: The IMODS framework uses a
prioritization framework that classifies topics and subtopics of
a particular course as one of the following:
• Critical
• Important
• Good to know
Achieving the right mix of the three levels of learning
(priorities) is essential to planning a good course.

enduring foundation of knowledge, skills and habits of mind
about curriculum development.
UCD is an emerging design method that focuses on both
operational and technical requirements by observing and
understanding user needs and wants, as well as by prototyping
and testing software throughout all phases of software
lifecycle. It enables the capturing and resolution of any
mismatches between users and software early on. The main
objective of UCD is to allow for a closer match between users
and the software, leading to a more intuitive interaction. As a
design process, it also has the objective of reaching that goal in
the most resource-efficient way, in terms of time and cost
through careful planning and execution [14].
The UCD process can be divided into five main phases: Plan,
User Research, Design, Develop, and Measure. Thus far, the
research team has completed the user research and design
phases of the UCD process. In this respect, 4 focus group
sessions were conducted with prospective users of IMODS to
gather insights on how faculty approach the task of designing a
course. At the beginning of each session all participants were
asked to fill an electronic background survey that collected
demographic information, primary areas of interest in teaching
and research, time spent on teaching, number of courses taught
per year (at both undergraduate and graduate levels), and
number of new courses developed (both at undergraduate and
graduate levels). Participants were also asked to fill an
electronic questionnaire about curriculum design tools that they
currently use to create and manage their courses (e.g. preparing
syllabi; communicating with students; developing teaching
materials; preparing, assigning, and delivering grades, etc.).
The results of this phase were published in ASEE 2014 and
FIE 2014 [15], [16]. The results from the focus group helped
identify the key features of the software system; an ontology
that defines the relevant terms of the domain and identifies
their specific meaning as well as the potential relationships
between them; and mental model, which is a tool to improve
understanding of the user needs and activities. Figure 2 shows
the ontological concepts and relationships between concepts as
a hierarchy. Figure 3 shows the mental model that depicts an
affinity diagram of similar activities organized sequentially into
9 towers in the upper half with detailed relevant activities in the
lower half.

Figure 1: IMODS Framework - PC3 model
C. User-centered design methodology
The IMODS system is being developed using a user-centered
design (UCD) methodology, as opposed to technology focused,
methodology [13]. This approach is well suited for the project
given the high cognitive nature of outcome-based course
design tasks, and the high levels of interactions required
between the user and the system to not only facilitate the
development of course designs, but to help users build an

Figure 2: IMODS Ontological Concepts and Relationships

Figure 5: IMODS Learning Objective Overview
Then as we planned and executed the testing, we were able to
directly ask the user to work on a “Criteria” within “learning
objectives”. Our dual purpose is to let the user know that those
are two concepts of the IMOD, as well as knowing the
structural relationship between them.

Figure 3: Mental Model
III.

HIGH-LEVEL DESIGN OF IMODS

One of the biggest challenges of software design is to make
sure the user has sufficient understanding to use the
application successfully and accomplish the required tasks.
Our User-centered design approach followed two main phases:
A. Conceptualization Phase
After the user research provided a relatively clear idea and
understanding of domain- and user needs, this initial design
phase provides a high-level design with concepts
identification, conceptual modeling and early prototyping.
During initial conceptualization and high-level design, we
focused on Brainstorming sessions and contextual analysis to
build an initial concept of the application. We gradually
consolidated it into a set of requirements on flip charts and
PowerPoint slides. The main goal of high-level design is to
plot down schematic ideas and steps into visual graphs and
models; an early blueprint. We started by investigating
different options and providing design alternatives to make
sure we have a broad view before identifying a good design.
Doing this early on, at high-level, sketchy, paper-based only,
and without going into details help provide several solution
alternatives at a very low cost.
The IMODS system is conceptualized such that a course
design is centered around the learning objectives of the course
defined by the instructor (user) as shown in Figure 4. Learning
objectives are directly associated with the course content,
assessments, and pedagogical activities as defined in the PC3
model (Figure 5).

Figure 4: IMODS System Overview
The Learning Objectives component of the IMODS system
was conceptualized with it various components based on the
PC3 model as shown in Figure 5.

B.
Development Phase
In order to validate that we were proceeding in the right
direction, we ran a series of usability tests on the application.
We chose between multiple good designs instead of focusing
on only one early on. The high-level design sketches were
discussed with the users to make sure what they said in
unstructured dialogs and vague ideas and imaginations can
now be concretely captured in design artifacts for further
validation and clarifications [17]. Our main goal was to
evaluate the simplicity and clarity of the application structure
to allow for an easy-to-recognize mental model. A mental
model can be loosely defined as the user perception of the
application. The opposite is the developers’ perception of the
application. While the latter one is the actual structure that
developers use to build the application, typically as their
interpretation of the requirements, the user mental model is
not necessarily the same. With the fact that users don’t
normally have access to the actual structure of the application,
or detailed and prolonged access to the application to know
any of it’s internal structure, they can only perceive what’s
exposed to them from the UI, and can build an “imagination:
of what the application structure might look like. In ideal
situations, this “imaginary” structure should match the actual
structure build by developers. In reality, though, it is rarely the
case. A discrepancy or vagueness on the user mental model
(we can call it a delta) is typically present and expected. The
problems arise when this delta is large, indicating an
application whose structure is not comprehensible by the user.
We have identified 2 tools that are most suitable for this
project in this phase.
C.
Tools
Navigation Model is one of the essential methods of design
that we used. A significant challenge in complex software is
not the contents of each screen, but how the user mentally
build a mental view of how all screens are connected (like a
city road map), and how to navigate between hundreds of
screens to accomplish their task. In this regard, we have
developed an effective technique, elastic prototyping, an
implementation of a participatory design to help designers and
users build a navigation model together, greatly reducing time
and effort needed. Figure 6 shows the navigation model for the
primary application. Figures 7 and 8 show the navigation
model for new user registration and user login. One of the

Figure 6: Primary IMODS Application - Navigation Model

Figure 7: New User Registration - Navigation
Model

Figure 8: User Login - Navigation Model

Figure 9: Course Overview - Navigation Model

Figure 10: Course Details - Navigation Model

Figure 11: Course Overview Mockup

Figure 12: Learning Objectives Mockup

main components of course design is describing course
overview information that includes data about course title,
description, schedule, instructors, course policies, etc. Figures
9 and 10 show the navigation model for course overview data
entry. In a similar manner navigation model for other screens
of IMODS that are used for design of Learning Objectives,
Content, Assessments, and Pedagogy were created.
Prototyping (PT) is extensively used in UCD to visualize and
validate all otherwise vague ideas and unclear expectations at
low cost and high effectiveness. We focused on three main
categories of prototyping: Paper (low-level) PT, low-fidelity
electronic (medium level) PT, and high-fidelity, detailed PT
[18]. Paper prototypes are very inexpensive and help us
capture several initial ideas and concepts, and validate them.
After explaining their needs, users often change their minds
when they see them on paper. Therefore multiple paper PT
sessions gives a head start in validating what users actually
mean and need. After initial concepts, design ideas and
directions were identified, we moved into a medium fidelity
prototyping stage where we provided a sketchy visualization
of key screens without contents and gradually validated them
and added initial contents. Figures 11 and 12 show the user
interface mockups of Course Overview and Learning
Objective components of the IMODS system
D. System Architecture
The development phase of the project included identifying
appropriate technologies to be used for the development of the
IMODS semantic web application, design of the back-end
database schema, installation and configuration of the serverside and client-side technologies, and development of the user
interface screens for login, registration, index, and creation of
an instructional module and the connectivity of these web
pages with the backend database. An Agile software
development methodology called Scrum is being used for the
development of this project. Scrum is an iterative and
incremental framework for managing product development.
The technologies chosen included Groovy on Grails, an open
source, full stack, web application framework for the Java
Virtual Machine. It takes advantage of the Groovy
programming language and convention over configuration to
provide a productive and streamlined development experience.
Grails uses Spring Model-View–Controller (MVC)
architecture as the underlying framework. MVC is a software
architecture pattern that separates the representation of
information from the user's interaction with it. PostgreSQL
was chosen as the database management system. It is a
powerful, open source object-relational database system with
more than 15 years of active development and a proven
architecture that has earned it a strong reputation for
reliability, data integrity, and correctness. Git was chosen for
source code version control. It is a distributed revision control
and source code management (SCM) system with an emphasis
on speed.

E. Testing
For the testing phase of the project, we opted to not have a
complete discovery test, where the user would be asked to do
a blind discovery of the application without any prior
knowledge [19]. That would be a simulation of a completely
novice user without any application background. Instead, we
decided to test for an average user with some level of
knowledge about the application structure. The reason is that
we already have a concrete navigation model, and we can
typically bring it to any user’s attention in few minutes to help
them in building a correct navigation model. That is one of the
main advantages of using the navigation modeling method.
Currently our research team is working on software
development and testing phases of the project.
IV.

CASE STUDY

The IMODS framework was applied to design an introductory
software engineering course titled “Software Enterprise I:
Personal Software Process” in B.S. in Software Engineering
program. This section describes the use of IMODS – PC3
model for course design.
A. About the Course
Software Enterprise I: Personal Software Process is a
sophomore course in the Software Engineering program that
introduces software engineering and object-oriented software
design principles using a modern programming language.
Students are introduced to Software Engineering, Software
Life Cycle models, Object-Oriented Programming, Personal
Software process, Effort estimation, effort tracking, defect
estimation and defect tracking. Students learn personal
software process for individual professionalism, time and
defect estimation; yield and productivity. A project-based
pedagogical model is used for delivery of all our courses in
Software Engineering program. Students in this course worked
on a game project using Java programming language.
B. Learning Objectives
Learning objectives of this course were defined using the PC3
model. The course has 6 objectives that are categorized under
Performance, Content, Condition, and Criteria as shown in the
Table 1. The objectives are as follows:
•

•

•

LO1: Design a software solution using Object-Oriented
Design principles of encapsulation, information hiding,
abstraction, inheritance, and polymorphism
LO2: Develop a software solution in an object-oriented
programming language employing standard naming
conventions and making appropriate use of advanced
features such as exception handling, I/O operations, and
simple GUI
LO3: Use object-oriented design tools such as UML class
diagrams to model problem solutions and express classes
and relationships such as inheritance, association,
aggregation, and composition

•

•

•

LO4: Use personal software process for individual
development productivity through time estimation and
tracking
LO5: Use personal software process for individual
development quality through defect estimation and
tracking
LO6: Demonstrate teamwork
Table 1: Learning Objectives based on PC3 Model

category, knowledge dimension, and criteria type that each
method is suitable for.
E. Instructional Activities
Pedagogical activities used in this course are listed in Table 4
along with the knowledge dimension and learning domain
category that they are suitable for. The list of activities
includes a mix of lectures, lab activities, Q&A discussions,
and problem solving activities.
Table 3: Course Assessments

** DPA Determined Per Assessment

C. Content
The list of Content topics and subtopics are listed in Table 2.
For each topic the knowledge dimension and topic priority is
defined. This information is used to find assessments and
instructional activities that best fit for delivering a topic.

F. Results
Software Enterprise I: Personal Software Process course in the
Software Engineering program in School of Computing,
Informatics, Decision Systems Engineering (CIDSE) at
Arizona State University was designed using the IMODS –
PC3 model and offered as a face-to-face section (with 82
students) as well as an online section (with 87 students) by the
same instructor (one of the co-authors). Using the IMODS
framework ensured the alignment between various course
elements and thereby ensuring high-quality course design.
Table 4: Course Pedagogical activities

Table 2: Content Topics based on PC3 Model

D. Assessments
Assessments chosen for this course include a mix of both
formative and summative assessments. The PC3 model aligns
assessments chosen for the course with the learning objectives
by checking compatibility of learning domains, performance,
and criteria requirements. Table 3 provides the list of
assessments with their corresponding learning domain

Alignment between various course components:
The framework supports the checking of alignment between
course assessments and learning objectives. The course
assessments are linked to the performance and criteria
elements of the learning objective as shown in Figure 1. The
framework supports the checking of alignment between course
instructional activities and learning objectives. The course
pedagogical activities are linked to the performance and
content of the learning objective as shown in Figure 1.
Topic Prioritization:
Use of the PC3 model ensured a balanced distribution of the
topics under Critical, Important, and Good to know as shown
in figure below.

V.

FUTURE WORK

Following the high-level design phase of the project, the next
step will be software development and testing of IMODS. We
will conduct usability testing of the prototype with instructors
and solicit feedback using surveys, observation, and user
interviews. The feedback will be incorporated into the iterative
software development lifecycle model. The scope of this
project will also include the evaluation of its novel approach to
self-guided web-based professional training in terms of: 1) user
satisfaction with the documentation of course designs
generated; and 2) impact on users’ knowledge of the outcomebased course design process.
ACKNOWLEDGMENT
The authors gratefully acknowledge the support for this project
under the National Science Foundation's Transforming
Undergraduate Education in Science, Technology, Engineering
and Mathematics (TUES) program Award No. DUE-1246139.
REFERENCES
[1] R. M. Felder, R. Brent, and M. J. Prince, “Engineering
Instructional Development: Programs, Best Practices, and
Recommendations.,” Journal of Engineering Education,
vol. 100, no. 1, pp. 89–122, Jan. 2011.
[2] R. Boice, Advice for new faculty members. Allyn &
Bacon, 2000.
[3] R. M. Harden, J. R. Crosby, M. H. Davis, and M.
Friedman, “AMEE Guide No. 14: Outcome-based
Education: Part 5--From Competency to MetaCompetency: A Model for the Specification of Learning
Outcomes.,” Medical Teacher, vol. 21, no. 6, pp. 546–
552, 1999.
[4] W. G. Spady and K. J. Marshall, “Beyond Traditional
Outcome-Based Education.,” Educational Leadership,
vol. 49, no. 2, pp. 67–72, 1991.
[5] G. Adorni, S. Battigelli, D. Brondo, N. Capuano, M.
Coccoli, S. Miranda, F. Orciuoli, L. Stanganelli, A. M.
Sugliano, and G. Vivanet, “CADDIE and IWT: two
different ontology-based approaches to Anytime,
Anywhere and Anybody Learning,” Journal of eLearning and Knowledge Society-English Version, vol. 6,
no. 2, 2010.
[6] S. Ternier, E. Duval, and P. Vandepitte, “LOMster: peerto-peer learning object metadata,” in Proceedings of
EdMedia, 2002, pp. 1942–1943.

[7] “LOCO-Analyst.” [Online]. Available:
http://jelenajovanovic.net/LOCO-Analyst/index.html.
[Accessed: 28-May-2012].
[8] G. P. Wiggins and J. McTighe, Understanding by design.
Association for Supervision & Curriculum Development,
2005.
[9] J. Warren, “Changing community and technical college
curricula to a learning outcomes approach,” Community
College Journal of Research &Practice, vol. 27, no. 8,
pp. 721–730, 2003.
[10] R. A. Streveler, K. A. Smith, and M. Pilotte, “Aligning
Course Content, Assessment, and Delivery: Creating a
Context for Outcome-Based Education,” K. Mohd Yusof,
S. Mohammad, N. Ahmad Azli, M. Noor Hassan, A.
Kosnin and S. K, Syed Yusof (Eds.), Outcome-Based
Education and Engineering Curriculum: Evaluation,
Assessment and Accreditation. Hershey, Pennsylvania:
IGI Global, 2012.
[11] R. F. Mager, “Preparing Instructional Objectives: A
critical tool in the development of effective instruction
3rd edition,” The Center for Effective Performance, Inc,
1997.
[12] K. Andhare, O. Dalrymple, and S. Bansal, “Learning
Objectives Feature for Instructional Module Development
System,” presented at the PSW American Society for
Engineering Education Conference, San Luis Obispo,
California, 2012.
[13] A. Gaffar, “Enumerating mobile enterprise complexity 21
complexity factors to enhance the design process,” in
Proceedings of the 2009 Conference of the Center for
Advanced Studies on Collaborative Research, 2009, pp.
270–282.
[14] A. Gaffar, N. Moha, and A. Seffah, “User-Centered
Design Practices Management and Communication,” in
Proceedings of HCII, 2005.
[15] S. Bansal, O. Dalrymple, A. Gaffar, and R. Taylor, “User
Research for the Instructional Module Development
(IMOD) System,” in American Society for Engineering
Education Annual Conference (ASEE), Indianapolis, IN,
2014.
[16] O. Dalrymple, S. Bansal, A. Gaffar, and R. Taylor,
“Instructional Module Development (IMOD) System: A
User Study on Curriculum Design Process,” in Frontiers
in Education (FIE), Madrid, Spain, 2014.
[17] J. Lazar, J. H. Feng, and H. Hochheiser, Research
methods in human-computer interaction. John Wiley &
Sons Inc, 2009.
[18] W. Lidwell, K. Holden, and J. Butler, Universal
principles of design: 125 ways to enhance usability,
influence perception, increase appeal, make better design
decisions, and teach through design. Rockport Pub, 2010.
[19] N. Moha, A. Gaffar, and G. Michel, “Remote usability
evaluation of web interfaces,” Human Computer
Interaction Research in Web Design and Evaluation. P.
Zaphiris and S. Kurniawan. Hershey, PA, Idea Group
Publishing, pp. 273–289, 2007.

IHM 2005

Articles Longs

Toulouse, 27-30 Septembre 2005

Enquête sur les pratiques de tests d’utilisabilité
Naouel Moha, Li Qing, Ashraf Gaffar, Ahmed Seffah
Human-Centered Software Engineering Group
Université Concordia
1455 de Maisonneuve Blvd West
H3G 1M8, Montréal, Canada
{n_moha, q_lix03, gaffar, seffah}@encs.concordia.ca

RESUME

KEYWORDS : Usability practitioners, usability testing,

Cet article présente les résultats d’une récente enquête
réalisée sur les tests d’utilisabilité impliquant approximativement une centaine de praticiens de l’utilisabilité.
Cette enquête avait pour but d’identifier les pratiques des
professionnels de l’utilisabilité dans la conduite de leurs
tests. L’analyse des résultats de l’enquête a permis de
présenter un état de l’art dans ce domaine et d’en relever
les forces et faiblesses. Comme faiblesse, nous avons relevé entre autre le manque d’outils spécifiques pour la
collecte et l’analyse des données de tests ; comme force,
la progressive valorisation de ce domaine d’expertise au
niveau des entreprises.

methods, process, web survey, questionnaire.

MOTS CLES : Praticiens de l’utilisabilité, tests
d’utilisabilité, méthodes, processus, enquête en ligne,
questionnaire.
ABSTRACT

This paper reports the results of a recent survey on usability testing involving nearly a hundred usability practitioners. The purpose of this survey was to identify the
practices in usability testing. The analysis of those results allows to present a state of art in this domain and to
identify the strengths and the weaknesses. As weakness,
we have noted the lack of specific tools for collecting
and analyzing test data; as strength, the promotion of this
expert domain inside companies.
CATEGORIES AND SUBJECT DESCRIPTORS: H.5.2

[User Interfaces]: Evaluation/methodology|usability testing; D.2.5 [Testing and Debugging]: Testing tools.
GENERAL TERMS: Human Factors, Measurement, Ve-

rification.

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies
are not made or distributed for proﬁt or commercial advantage and that
copies bear this notice and the full citation on the ﬁrst page. To copy
otherwise, or republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee.
IHM 2005, September 27-30, 2005, Toulouse, France.
Copyright 2005 ACM 1-59593-192-9/05/0009 $5.00

INTRODUCTION

Cet article décrit les résultats d’une récente enquête de
recherche destinée à interroger les professionnels de
l’utilisabilité sur leurs pratiques dans la conduite des
tests d’utilisabilité. Ces pratiques incluent les méthodes,
les activités, les outils et les infrastructures de tests
d’utilisabilité. Cet article s’intéresse également au positionnement de l’utilisabilité au sein des entreprises.
Le terme ‘tests d’utilisabilité’ est utilisé pour faire référence au processus qui emploie des participants qui sont
représentatifs d’une population cible pour évaluer le degré auquel un logiciel est conforme à des critères
d’utilisabilité spécifiques [1]. La norme ISO 9241-11 définit l'utilisabilité de la manière suivante : « un système
est utilisable lorsqu'il permet à l'utilisateur de réaliser sa
tâche avec efficacité, efficience et satisfaction dans le
contexte d'utilisation spécifié ».
Peu de travaux ont été réalisés sur la modélisation et la
formalisation des tests d’utilisabilité impliquant des utilisateurs. Nous pensons que la qualité du processus des
tests d’utilisabilité a un grand impact sur la pertinence
des données collectées et des problèmes identifiés à la
fin des tests d’utilisabilité. Gellner présente une critique
pertinente sur la faible modélisation des processus de
tests d’utilisabilité existants [1, 2]. La plupart des processus sont des synthèses des expériences de travail de
conduite des tests d’utilisabilité [3].
Un des buts de notre recherche est de définir un processus pour conduire des tests d’utilisabilité qui décrit
l’ensemble des activités de tests, ainsi que les méthodes
et outils pour réaliser ces activités. Mais avant d’être capables de présenter un tel processus, nous avons conduit
cette enquête afin d’identifier les meilleures pratiques
ainsi que les forces et faiblesses dans la conduite des
tests d’utilisabilité. 86 professionnels de l’utilisabilité y
ont participé. Les résultats de cette enquête vont nous
permettre de corriger, redéfinir et valider le processus de
conduite des tests d’utilisabilité que nous avons défini au
sein de notre équipe.

115

Articles Longs

Dans la première section de cet article, nous passons en
revue les travaux similaires réalisés dans ce domaine. La
section suivante présente les motivations qui ont conduit
à une telle étude. Cette section est suivie de la description de la méthodologie suivie pour planifier et conduire
cette enquête. Enfin, la dernière section présente
l’analyse et les résultats de l’enquête.
TRAVAUX SIMILAIRES

Plusieurs enquêtes ont été réalisées sur la conception
centrée utilisateur ou UCD (User-Centered Design) [46]. La conception centrée utilisateur est définie comme
étant une approche de conception itérative et multidisciplinaire basée sur une participation active des utilisateurs
pour une meilleure compréhension de leurs besoins et de
leurs tâches [5]. L’enquête réalisée par Vredenburg et al.
portait essentiellement sur l’étude des pratiques UCD en
terme de budget, d’impact organisationnel, de mesures
de succès, et de méthodes et techniques les plus largement utilisées [5]. Cette enquête a montré que bien que
les praticiens en UCD sont convaincus de leur impact
positif au niveau des entreprises, ils ont des difficultés à
estimer l’importance de leur contribution à travers des
mesures claires et précises. L’enquête réalisée par Venturi et Troost investiguait l’intégration et l’adoption de
l’UCD au sein des entreprises en termes de management,
d’infrastructure et de communication [6]. Les tests
d’utilisabilité constituent une technique spécifique utilisée dans la conception centrée utilisateur pour mesurer
l’utilisabilité d’un produit. Plusieurs autres enquêtes se
sont focalisées sur le test logiciel [7, 8]. Cependant, nous
n’avons trouvé aucune enquête ou étude réalisée sur les
tests d’utilisabilité qui permette d’avoir une idée précise
sur les pratiques actuelles dans ce domaine.
MOTIVATIONS

Un certain nombre de raisons nous a poussés à conduire
cette enquête. Premièrement, l’étude des résultats de
cette enquête constitue un état de l’art des pratiques actuelles dans la conduite des tests d’utilisabilité. Les
questions de cette enquête ont été conçues afin
d’identifier les meilleures pratiques. Ces pratiques seront
ensuite diffusées à l’ensemble des praticiens de
l’utilisabilité. Deuxièmement, l’analyse de ces résultats
permettra de valider un processus plus formel de
conduite de tests d’utilisabilité basé sur l’expérience des
professionnels du domaine. Enfin, ces résultats permettront de fournir des indications pour de futures directions
de recherche et ainsi améliorer les pratiques de tests.
METHODOLOGIE
Le Questionnaire

Cette enquête a débutée en octobre 2004 et s’est déroulée sur une période de quatre mois. Elle se présentait
sous la forme d’un questionnaire, subdivisé en 4 sections
incluant un total de 12 questions [9]. Les deux premières
sections étaient destinées à collecter des informations re-

116

IHM 2005

Toulouse, 27-30 Septembre 2005

latives aux répondants et aux entreprises dans lesquelles
ils travaillent. La troisième section était consacrée aux
méthodes et aux activités de tests. La dernière section
présentait des questions relatives à l’infrastructure et aux
outils utilisés durant les tests d’utilisabilité. A la fin du
questionnaire, les répondants ont été invités à faire des
commentaires libres et à donner des éléments de réponses à la question : D’après vous, qu’est-il nécessaire
d’améliorer dans les tests d’utilisabilité en termes
d’activités, de méthodes et d’outils ?
D’après les pré-tests que nous avions réalisés au préalable sur quatre sujets, le questionnaire pouvait être complété entre 10 et 15 minutes. La courte durée pour compléter ce questionnaire a été un des arguments présentés
pour susciter le plus de réponses possibles. De plus, nous
avons assuré aux répondants que l’information collectée
à travers ce questionnaire sera strictement confidentielle
et ne sera utilisée qu’à des fins de recherche. Aucune information personnelle (sauf l’adresse électronique et le
nom du répondant) ni aucune information permettant
d’identifier l’entreprise n’a été demandée.
Le questionnaire se présentait sous la forme d’un formulaire à remplir sur Internet et incluait un système de validation afin d’éviter des soumissions partielles. Toutes les
données ont été collectées dans une base de données
MySql pour une analyse automatisée via l’outil
d’analyse statistique SPSS [10].
La Population Cible

La population cible des répondants de cette étude était
principalement constituée de professionnels de
l’utilisabilité et de chercheurs qui ont une expérience
dans la conduite des tests d’utilisabilité. Le questionnaire
a été envoyé par courrier électronique à des listes de diffusion et des newsgroups liés à l’utilisabilité : ACMSIGCHI, UPA Montréal, UPA Toronto, AFIHM, ErgoIHM, et Interactif parmi d’autres. 86 praticiens ont
complété l’enquête sur une durée de trois mois. Les répondants provenaient principalement du Canada
(24.4%), des Etats-Unis (32.6%) et de France (34.9%).
57 répondants se sont identifiés comme étant des spécialistes de l’utilisabilité et des interfaces utilisateurs. 25
comme étant des spécialistes du facteur humain et 14
comme des concepteurs d’interface web (cf. Tableau 1).
Les répondants avaient la possibilité de sélectionner plusieurs positions professionnelles parmi la liste qui leur a
été proposée et d’éventuellement spécifier d’autres catégories de positions. Ceux qui appartiennent à la catégorie ‘Autre’ sont essentiellement des chercheurs du domaine. Il s’agit donc d’un échantillon pertinent composé
principalement de professionnels de l’utilisabilité ayant
une expérience en interaction homme machine et en ergonomie.

IHM 2005

Articles Longs

Toulouse, 27-30 Septembre 2005

Catégorie

Fréquence

Consultant
Spécialiste en facteur humain
Marketing
Programmeur/Développeur
Testeur de logiciel
Ingénieur système
Support technique
Spécialiste utilisabilité et interface
utilisateur
Concepteur Web
Autre

36
25
4
9
4
1
2
57
14
20

Tableau 1 : Catégories professionnelles des répondants.
La Marge d’erreur

Est-ce que ces 86 répondants constituent un échantillon
représentatif ? Pour répondre à cette question, nous
avons calculé la marge d’erreur. La marge d’erreur représente la mesure de précision des résultats d’une enquête et est égale à 1 divisé par la racine carrée du nombre de personnes de l’échantillon. Ainsi, un échantillon
de 86 personnes nous donne une marge d’erreur de plus
ou moins 10.8% ce qui signifie qu’il y a une forte probabilité (95% de chance) que la plupart des personnes de
la population cible dans son ensemble donneront des réponses similaires (avec une précision de 10.8%) aux réponses obtenues de l’échantillon.

d’utilisabilité. Les parties suivantes sont quant à elles
consacrées aux infrastructures et aux outils de tests. La
dernière partie donne les résultats de l’analyse qualitative des commentaires récoltés.
Le Profil des Répondants

Comme l’indique l’analyse de la population cible, les répondants sont principalement des professionnels de
l’utilisabilité ayant une expérience significative dans le
domaine.
Les répondants ont été répartis en trois différentes catégories selon deux critères : le nombre de tests qu’ils ont
conduit durant les trois dernières années et le niveau de
leur expertise d’après leur autoévaluation. Ces trois catégories sont les suivantes : les novices, les intermédiaires et les experts (cf. Figure 1). Nous avons dénombré 8
experts, 66 intermédiaires et 12 novices.

Validation des Données

Avant d’entreprendre des analyses détaillées, nous avons
parcouru les réponses afin de détecter des incohérences.
Le système de validation en JavaScript que nous avons
défini permettait d’éviter d’omettre des questions ou de
fournir des réponses biaisées comme une adresse électronique erronée ou une chaîne de caractères au lieu d’un
chiffre. De plus, le questionnaire était constitué de questions à choix multiples et de listes de sélection pour éviter d’avoir des données incohérentes. Aucune donnée
manquante ou incorrecte n’a été détectée.
Partitionnement des Données

Après avoir validé les données, nous avons partitionné
les réponses en différents sous-groupes basés sur
l’expertise des répondants et des catégories d’entreprises
auxquelles ils appartiennent. La subdivision des sousgroupes des répondants est détaillée au niveau de la section ci-dessous dédiée au profil des répondants. Le partitionnement aide à interpréter plus facilement et plus fidèlement les données.
RESULTATS ET ANALYSE DE L’ENQUETE

Les résultats de l’enquête sont organisés comme suit.
Dans les deux premières parties, nous présentons des informations relatives au profil des répondants et aux entreprises dans lesquelles ils travaillent. Puis, une partie
est dédiée aux méthodes, activités et matériels de tests

Figure 1 : Partitionnement des répondants.

Ce partitionnement a permis d’interpréter les réponses de
la majorité des questions de l’enquête en se basant sur
l’expertise des répondants. Ainsi, les réponses fournies
par des experts avaient un poids de valeur 3 plus important que les réponses fournies par des intermédiaires ou
des novices ; de même que les réponses fournies par les
intermédiaires avaient un poids de valeur 2 par rapport
aux novices dont le poids de valeur était seulement de 1.
Le Profil des Entreprises

Le tableau suivant donne la proportion en fréquence et
en pourcentage des différentes catégories d’entreprises
auxquelles les répondants appartiennent.
Il apparaît que 24.4% des répondants proviennent
d’entreprises qui comptent plus de 5000 employés.
12.8% des répondants viennent d’entreprises qui comptent entre 1001 et 5000 employés. Néanmoins, 27.9%
des répondants sont soit des praticiens indépendants
(11.6%) soit appartiennent à une entreprise de moins de
10 employés (16.3%).

117

Articles Longs

Nombre d’employés
Consultant indépendant
2-10 employés
11-20 employés
21-50 employés
51-100 employés
101-250 employés
251-500 employés
501-1000 employés
1001-5000 employés
Plus de 5000 employés
Je ne sais pas
Total

IHM 2005

Toulouse, 27-30 Septembre 2005

Fréquence
10
14
5
4
5
2
6
5
11
21
3
86

Pourcentage
11.6
16.3
5.8
4.7
5.8
2.3
7.0
5.8
12.8
24.4
3.5
100.0

Tableau 2 : Catégorie des entreprises.

33.7% de l’ensemble de ces entreprises n’ont qu’entre 3
et 5 ans d’expérience dans la conduite des tests
d’utilisabilité (cf. Figure 2). Très peu d’entreprises ont
plus de 15 années d’expérience.

de formalité et de maturité, et surtout son manque de valorisation au sein des entreprises.
Nous nous sommes également intéressés au nombre de
spécialistes de l’utilisabilité qui travaillent dans ces entreprises. Dans les grandes entreprises de plus de 1000
employés, un praticien en utilisabilité représente moins
de 1% des employés de l’entreprise soit 10 personnes.
Le tableau ci-dessous présente la proportion des professionnels de l’utilisabilité par rapport à l’ensemble des
employés de l’entreprise.
Taille de l’entreprise
Grande
( + de 1000 employés)

Proportion
< 1%
~ 10 personnes

Moyenne
(100 < employés < 1000)

< 5%
~ 10 personnes

Petite
(< 100 employés)

~ 10%
~ 10 personnes

Tableau 4 : Proportion des professionnels de l’utilisabilité
par rapport à la taille de l’entreprise

Ces résultats montrent que peu importe la taille de
l’entreprise, les équipes de tests d’utilisabilité sont généralement composées d’un petit groupe d’environ 10 personnes. A noter que l’enquête conduit par Venturi et
Troost a également montré que les praticiens en UCD
sont employés par des grandes entreprises et représentent moins de un pour cent de l’ensemble des employés
[6]. Il serait pertinent dans le cadre d’une autre enquête
d’évaluer le nombre de professionnels de l’utilisabilité
par rapport au nombre de développeurs et d’identifier le
secteur de l’entreprise et les budgets alloués aux tests
d’utilisabilité afin de mieux interpréter ces résultats.
Figure 2 : Nombre d’années d’expérience dans les tests
d’utilisabilité des entreprises.

Le tableau ci-dessous donne le nombre d’années
d’expérience en utilisabilité par rapport à la taille de
l’entreprise.
Taille de l’entreprise
Grande
( + de 1000 employés)
Moyenne
(100 < employés < 1000)
Petite
(< 100 employés)

Expérience
~ 6 ans

Un certain nombre de questions étaient dédiées aux activités, aux méthodes et matériels de tests d’utilisabilité.
Ceux-ci ont été sélectionnés afin de pouvoir valider et
raffiner le processus de conduite de tests d’utilisabilité
que nous avons défini au sein de notre équipe de recherche et qui intègrent ces méthodes, activités et matériels.
Ces questions consistaient à en évaluer l’importance et la
pertinence sur une échelle constituée des 5 valeurs suivantes : Très faible, Faible, Moyen, Bon et Très bon.

3 à 5 ans
3 à 5 ans

Tableau 3 : Années d’expérience en utilisabilité
par rapport à la taille de l’entreprise.

Cette analyse permet de montrer combien la conduite
des tests d’utilisabilité est une pratique encore jeune au
sein des entreprises que ce soit dans les grandes ou les
petites entreprises et ceci explique en partie son manque

118

Les Méthodes, Activités et Matériels de Tests
d’Utilisabilité

La figure 3 présente les résultats de l’évaluation de
l’importance de l’activité ‘Sélectionner des séquences
vidéo’ en fonction de l’expertise des répondants. Comme
le montre la figure, la majorité des experts ont répondu
qu’il s’agissait d’une activité peu importante alors que
les novices ont répondu que cette activité avait un niveau
d’importance moyen. Les avis sont partagés selon le niveau d’expertise des répondants. Il apparaît donc que
cette activité n’est pas très pertinente dans la conduite
des tests d’utilisabilité.

IHM 2005

Articles Longs

Toulouse, 27-30 Septembre 2005

Interrogation des utilisateurs aux moyens de questions posées verbalement sur leur expérience et leurs préférences avec le produit.

Le prototypage

Très bon

Évaluation de l’utilisabilité du produit final à partir d’un prototype
de celui-ci.

Les questionnaires

Moyen

Listes écrites de questions distribuées aux utilisateurs.

Les scénarios de tests

Très bon

Scénarios spécifiant comment les participants doivent exécuter certaines tâches dans un contexte précis.

Le prototypage papier (Storyboard)

Moyen

Prototype de basse fidélité constitué d’une série d'esquisses d’écrans
sur papier.

Penser à voix haute (Thinking aloud)

Bon

Encouragement des participants à dire haut ce qu’ils pensent.

Figure 3 : Activité de tests : Sélectionner des séquences vidéo.

Une analyse similaire a été réalisée pour l’ensemble des
activités, méthodes et matériels de tests. Les trois tableaux ci-dessous résument les résultats de l’analyse de
l’évaluation de l’importance des méthodes, des activités
et des matériels de tests dans la conduite de tests
d’utilisabilité.

L’évaluation cognitive

Bon

Procédure spécifique pour simuler les processus cognitifs des utilisateurs quand ils sont en interaction avec une interface.

Le magicien d’OZ

Bon

Technologie non implémentée pour être évalué en utilisant un humain pour simuler la réponse du système.

Le focus group

Faible

Collecte d’information lors de réunions informelles des utilisateurs
pour discuter sur un sujet spécifique.

Tableau 6 : Niveau d’importance des méthodes
de tests d’utilisabilité.

Activité
Définir un profil utilisateur
Définir les profils des équipes de tests et
des testeurs
Conduire un pré-test vous-même
Conduire un test pilote
Collecter les commentaires informels du
participant après le test
Revoir les questionnaires de pré-test et de
post-test avec le participant
Ajouter les commentaires des testeurs et
des observateurs
Identifier les patterns et les conclusions
des résultats de tests
Préparer un rapport préliminaire
Sélectionner des séquences vidéo
Produire ou modifier des guidelines de
conception

Niveau
Très bon
Moyen
Moyen
Très bon
Moyen
Moyen
Bon
Très bon
Bon
Faible
Bon

Tableau 5 : Niveau d’importance des activités
de tests d’utilisabilité.

Méthode
L’enquête contextuelle

Niveau
Bon

Étude de l’activité de vrais utilisateurs directement sur leur lieu de
travail et dans les conditions réelles.

Les incidents critiques

Bon

Les utilisateurs identifient des incidents spécifiques qu’ils ont rencontrés personnellement.

L’étude ethnographique

Bon

Étude sur le comportement et les pratiques d’un groupe d’individus,
par exemple, à partir d’observations sur le terrain ou à partir de
questionnaires.

Les entretiens

Tout comme l’enquête menée par Venturi et Troost, notre analyse a montré que les entretiens et le prototypage
sont des techniques très recommandées par les professionnels de l’utilisabilité. Les résultats de l’enquête réalisée par Vredenburg et al. sont en accord avec nos analyses : ils ont également trouvé que le focus group avait
une importance faible par rapport aux autres méthodes
UCD et que les enquêtes contextuelles ont un bon niveau
d’importance. Par contre, leurs résultats ont montré que
les enquêtes ont un niveau d’importance assez faible.

Très bon

Matériel
Questionnaire de sélection des participants aux tests
Questionnaire de pré-test
Questionnaire de post-test
Plan des sessions de test
Accord de confidentialité
Accord d'enregistrement
Check list de l'environnement de test
Formulaire de collection de données
Rapport préliminaire de tests
Rapport final de tests

Niveau
Bon
Bon
Bon
Bon
Moyen
Bon
Bon
Bon
Moyen
Bon

Tableau 7 : Niveau d’importance des matériels
de tests d’utilisabilité.

Ces résultats ont permis de relever quels sont les activités, méthodes et matériels de tests à considérer dans la
conduite des tests d’utilisabilité selon les praticiens et
experts du domaine.

119

Articles Longs

IHM 2005

Toulouse, 27-30 Septembre 2005

Les Logiciels de Tests d’Utilisabilité

Une question de l’enquête consistait à demander aux répondants de spécifier les différents outils et logiciels
qu’ils utilisent lors de la conduite de leurs tests
d’utilisabilité. Le tableau 8 présente la liste des outils et
logiciels spécifiés par les répondants. Certains utilisent
des logiciels de bureau tels que Excel ou Word, d’autres
conçoivent leurs propres outils de tests (cf. outils en gras
dans le tableau 8). Morae semble toutefois devenir de
plus en plus populaire. Morae est un logiciel conçu par
TechSmith qui permet d’enregistrer une session de tests
à distance et d’annoter la vidéo de tests en temps réel
pour des analyses futures [11]. L’analyse des outils montre qu’il n’y a pas d’outils ou de logiciels de tests prédominants pour la conduite des tests d’utilisabilité
comme ceux qu’on pourrait trouver pour le développement de logiciels.
Outils
Bailey's Testing
Camera
Camlan
Custom logging database
Digital Video Camera + Excel
Excel (data analysis)
Free software
HTML Prototype and video
In house data logger
Kronos
Leximancer
Macshapa
Mobile wireless UT lab
Morae
MSN Encoder
Own ad hoc software tools
Own logger
Own logging software
RapidPlus
Self-developed tool
Test logger (very old DOS based)
Usability Datalogger (see TZ)
Video recording
Virage
WebEx for remote testing
Word
Mobile wired UT Lab
Notes by hand
Specific software patches
WebSurveyor

Fréquence
1
1
1
1
1
2
1
1
1
1
1
1
1
8
1
2
1
1
1
2
1
1
2
1
1
1
1
1
1
1

Internet sont une autre nouvelle forme d’infrastructure
qui émerge dans ce domaine. Les tests à distance sont
des tests d’utilisabilité où les testeurs en charge d’opérer
l’observation et l’analyse des participants sont séparés
dans l’espace et/ou dans le temps des participants [12].
Dans certains cas, la conduite des tests d’utilisabilité ne
nécessite pas de réelles infrastructures et sont conduits
principalement sur le site ou lieu de travail du participant
aux tests.
Au vu de l’analyse des résultats de l’enquête, il apparaît
que les laboratoires d'utilisabilité fixes et les tests sur site
restent prédominants à 68% dans la conduite des tests
d’utilisabilité. Cependant, même si les laboratoires mobiles et les tests à distance sont encore peu répandus, ils
deviennent de plus en plus exploités (Cf. Tableau 9). Par
contre, les laboratoires d’utilisabilité de location ou dits
externes sont utilisés de manière occasionnelle par 40%
des répondants. A Montréal (Canada), le coût de location d’un laboratoire d’utilisabilité est assez excessif; il
s’élève à environ 600€ par jour et atteint 1200€ par jour
si des spécialistes sont mis à disposition.

Laboratoire mobile
Tests à distance
Moyenne

Jamais
49%
60%
54.5%

Occasionnel Souvent
31%
20%
29%
10%
30%
15%

Tableau 9 : Proportion des fréquences d'utilisation
des infrastructures de tests.

Les consultants travaillent souvent sur site et utilisent de
manière
occasionnelle
les
laboratoires
fixes
d’utilisabilité. Néanmoins, ce sont les premiers avec les
petites entreprises de moins de 100 employés à utiliser
des infrastructures mobiles et à distance.
Nous pensons que les tests à distance via Internet gagnent en popularité et l’analyse des commentaires libres
de cette enquête le témoigne. En effet, nombreux sont
les professionnels de l’utilisabilité qui en ont vanté les
mérites. Les tests d’utilisabilité à distance ont cet avantage sur les laboratoires traditionnels de permettre le test
d’un nombre de participants plus élevé et plus divers
dans leur propre environnement de travail, à budget plus
réduit et en un temps relativement court [13].
ANALYSE QUALITATIVE

Les Infrastructures de Tests

L’analyse qualitative porte essentiellement sur les commentaires récoltés à la fin du questionnaire. Cette analyse a permis de relever un certain nombre de points importants liés à la formalisation de la conduite des tests
d’utilisabilité, au développement d’outils spécifiques et à
la valorisation du domaine au sein des entreprises.

Différentes infrastructures permettent de conduire des
tests d’utilisabilité : les plus connus sont les laboratoires
fixes et mobiles d’utilisabilité. Les tests à distance via

Les répondants ont souligné l’effort initié par la communauté des professionnels de l’utilisabilité pour une stan-

Tableau 8 : Outils et logiciels de tests d’utilisabilité.

120

IHM 2005

Articles Longs

Toulouse, 27-30 Septembre 2005

dardisation des procédures de tests et des rapports des
résultats de tests. UPA qui est l'association des professionnels de l'utilisabilité est actuellement entrain de travailler sur la création d'une base de connaissance pour
les professionnels de l'utilisabilité qui regrouperait toutes
les pratiques de tests. Le CIF (Common Industry Format) en est un exemple. Ce format industriel commun
pour le rapport des résultats de tests d’utilisabilité est
devenu un standard ANSI en décembre 2001 (ANSI/NCITS 354-2001) et est entrain de devenir un standard international. Le même phénomène se produit dans
le plus large domaine de la conception centrée utilisateur. En effet, la plupart des entreprises ont développé
des terminologies communes, des modèles et des outils
pour l’échange des données entre les différentes professions de l’UCD [6]. Par contre, ce domaine souffre d’un
manque de critères et de mesures claires et précises pour
estimer l’importance et l’impact de leur contribution
dans le monde industriel [5]. Tous ces efforts de standardisation et de formalisation sont un défi pour la
communauté de l’utilisabilité afin d’assurer leur développement et leur acceptabilité au sein des entreprises.
Nombreux sont les répondants qui ont exprimé leur besoin d'avoir sur le marché des logiciels de récolte et
d'analyse des données de tests mais également des logiciels d'annotation et d'indexation des vidéos. Ils ont besoin d'outils qui leur permettent d'indexer automatiquement les vidéos, de les annoter et d’extraire des séquences vidéo afin de traiter la considérable quantité
d’information vidéo. L'outil Morae répond en partie à ce
besoin mais il est actuellement le seul outil sur le marché
à offrir de telles fonctionnalités. Ils ont également exprimé le besoin d'avoir des outils d'analyse de données
qui soient non seulement faciles à utiliser et à configurer,
mais également qui soient fiables et abordables en termes de prix.
Mais surtout et avant tout, les commentaires récoltés ont
montré que les tests d'utilisabilité sont de plus en plus
valorisés au sein des entreprises et les managers des entreprises sont de plus en plus convaincus de l'utilité de
tels tests. Ainsi, ils sont plus disposés à investir des budgets pour l'achat des outils et infrastructures et à mobiliser du personnel pour conduire les tests. Ceci offre une
belle perspective pour le développement et la formalisation des tests d’utilisabilité.
CONCLUSION

Cet article a présenté les résultats d’une enquête sur la
conduite des tests d’utilisabilité impliquant 86 praticiens
de l’utilisabilité. Cette enquête a permis de présenter
l’état de l’art sur les pratiques actuelles dans la conduite
des tests d’utilisabilité et de situer l’utilisabilité au sein
des entreprises.

L’analyse de cette enquête a permis de relever les différents points suivants :
•

Quelles étaient les activités, méthodes et matériels
de tests à considérer dans la conduite des tests
d’utilisabilité.

•

Même si les laboratoires fixes d’utilisabilité et les
tests sur sites restent prédominants comme infrastructures dans la conduite des tests, les tests à distance offrent une nouvelle plateforme de tests de
plus en plus populaire.

•

La nécessité de développer des outils pour la collecte et l’analyse des données de tests ainsi que pour
l’annotation et l’indexation des vidéos.

•

L’utilisabilité est un domaine encore jeune qui n’est
pas encore bien implantée au niveau des entreprises
mais ce domaine est de plus en plus valorisé et a
ainsi de bonnes perspectives de développement. Une
volonté de formaliser la conduite des tests
d’utilisabilité se concrétise de plus en plus.

D’autres directions de recherche ont pu être identifiées
suite à cette enquête. Un premier axe de recherche est de
concevoir et développer d’une part des outils d’aide à la
collecte et l’analyse des données de tests et d’autre part
des outils pour l’annotation et l’indexation des séquences vidéo. Le second axe de recherche est de proposer
une plateforme pour conduire des tests d’utilisabilité incluant la spécification du processus, des logiciels, et des
méthodes de tests. Les résultats de cette enquête vont
être mis à profit pour valider et raffiner le processus de
conduite de tests d’utilisabilité que nous avons défini au
sein de notre équipe de recherche. Néanmoins, il est important de préciser que cette enquête, de part son nombre
de questions, n’a pu traiter tous les problèmes liés aux
tests d’utilisabilité et aux autres méthodes d’évaluation
en général. Cependant, des enquêtes et études complémentaires sont envisagées pour étudier d’autres aspects
qui n’ont pu être traités dans cette enquête tels que les
motivations des professionnels pour choisir les tests utilisateurs (par exemple : temps, budget, exigence du
client, etc.), les étapes du cycle de vie où ces évaluations
sont réalisées et les secteurs d’entreprise où l’utilisabilité
est pratiquée.
REMERCIEMENTS

Un grand merci à toutes les personnes qui ont accordé de
leur temps pour compléter le questionnaire et partager
leurs expériences dans le domaine. Tous nos remerciements vont également à nos collègues qui nous ont fait
profiter de leurs expertises pour la conception du questionnaire et l’analyse des données. Nous remercions personnellement: Daniel Engelberg, Gabriel Michel, Armand Nganou, Bill Reimer et Mohamed Taleb.

121

Articles Longs

BIBLIOGRAPHIE

1. Rubin, J. (eds.). Handbook of usability testing: how
to plan, design, and conduct effective tests. Wiley, New
York, 1994.
2. Nielsen, J. (eds.). Usability Engineering. Morgan
Kaufmann, 1994.
3. Gellner, M. and Forbrig, P. Modeling the Usability
Evaluation Process with the Perspective of Developing a
Computer Aided Usability Evaluation (CAUE) System.
In Proceedings of INTERACT 2001 Workshop on “Usability throughout the entire systems development lifecycle” (July 10-14, 2001, Tokyo, Japan), 2001.
4. Rosenbaum, S., Rohn, J.A., and Humburg, J. A Toolkit for Strategic Usability: Results from Workshops,
Panels and Surveys. In Proceedings of CHI 2000 : Conference on Human Factors in Computing Systems (April
1-6, 2000, The Hague, Netherlands), 2000, pp. 337-344.
5. Vredenburg, K., Mao, J.Y., and al., e. A survey of
User Centred Design Practice. CHI letters, Vol. 4, No.
1, 2002.
6. Venturi, G. and Troost, J. Survey on the UCD integration in the industry. In Proceedings of NordiCHI04
conference proceedings (October, 2004, Tampere,
Finland), 2004.

122

IHM 2005

Toulouse, 27-30 Septembre 2005

7. Ng, S.P., Murnane, T., Reed, K., Grant, D., and
Chen, T.Y. A Preliminary Survey on Software Testing
Practices in Australia. In Proceedings of Australian
Software Engineering Conference (ASWEC'04) (2004,
Melbourne, Australia), 2004.
8. Torkar, R. and Mankefors, S. A Survey on Testing
and Reuse. In Proceedings of IEEE International Conference on Software-Science, Technology & Engineering
(November 04-05, 2003, Herzlia, Israel), 2003.
9. Survey on Usability Testing Process and Practices.
Disponible à l'adresse http://rana.cs.concordia.ca/survey/
10. SPSS, logiciel d'analyse statistique. Disponible à
l'adresse http://www.spss.com/
11. Morae, logiciel de conduite et d'analyse des tests
d'utilisabilité pour les applications web et les logiciels.
Disponible à l'adresse
http://www.techsmith.com/products/morae/default.asp
12. Hartson, H.R., Castillo, J.C., Kelso, J., Kamler, J.,
and Neale, W.C. Remote Evaluation: The Network as an
Extension of the Usability Laboratory. In Proceedings of
the ACM Conference on Human Factors in Computing
Systems (CHI ’96) 1996, pp. 228–235.
13. Moha, N., Li, Q., Seffah, A., and Michel, G. Towards a Platform for Usability Remote Tests via Internet. In Proceedings of OZCHI2004 (November 22-24,
2004, University of Wollongong, Australia), 2004.

TAMODIA 2004 | PAPERS

15-16 November | Prague, Czech Republic

Modeling Patterns for Task Models
A. Gaffar1, D. Sinnig1, 2, A. Seffah1 and P. Forbrig2
(1) Human-Centred Software Engineering Group
(2) Software Engineering Group
Department of Computer Science,
Department of Computer Science,
Concordia University,
University of Rostock,
1455 De Maisonneuve Blvd. West,
18051 Rostock, Germany
H3G 1M8, Montreal, Canada
pforbrig@informatik.uni-rostock.de
{gaffar, d_sinnig, seffah}@cs.concordia.ca
that they need to deal with multiple threading, event
handling, real time and graphics (non-functional
requirements). On the domain side, they typically have to
accomplish sophisticated tasks (functional requirements).
On the human side, interactive systems have to support –
and simplify- user perception, conception, operation and
consummation of the system (usability). Adding these
aspects together makes it a difficult job to design a
successful interactive system. Models are proposed as a
way to help in the design and development processes.

ABSTRACT

Models allow us to describe complex systems at different
abstract and conceptual levels, hence amplify our
analytical and problem solving capabilities. However, a
lot of human effort and experience is needed to build
correct models, and to translate them to concrete artifacts;
in our case a usable user interface. This paper introduces
the concept of task and pattern models to leverage the
process of task modeling, and show how it can help build
generic task models, link them, and instantiate them more
readily. Once seen as patterns, we will demonstrate that
task models can be disseminated and reused more easily
by representing them as predefined types.

The creation of various models and the process of linking
them to each other is a tedious, time-consuming activity.
Current model-based frameworks [11, 17, 18] lack the
flexibility of reusing already modeled solutions. Only few
approaches offer a form of copy-and-paste reuse.
However, with this kind of reuse, the “reuser” takes a
copy of a model component and changes it to new
requirements without maintaining any form of
consistency with the original component [9]. Obviously,
copy-and-paste of analysis and design model fragments is
not adequate to integrate reuse in a systematic and
retraceable way into the model-based UI development life
cycle.

Author Keyword

Task models, task patterns, generic pattern types, usercentered design.
ACM Classification Keywords

H.5 Information Interfaces and Presentation: H.5.2 User
Interfaces: User-centered design H.5.3 Group and
Organization Interfaces: Theory and models
INTRODUCTION

From this emerges the need for a more disciplined
approach for modeling patterns to supplement current
model-based approaches by facilitating the construction
and transformations of models as well as formatting them
to encourage reuse.

Generally speaking, a model is an abstract representation
of a real system. Using abstraction, we remove the
unnecessary, or irrelevant details from the system
representation to be able to analyze it better. The same
“real” artifact can be presented with several models,
addressing different points of interest for different actors
or stakeholders. Traetteberg [20] raises the question:
“How can models be used as a representation tool in the
development of interactive systems” and presents several
points of views associated with model-based design
approach. We use this section to demonstrate our work as
an answer to his question.

PATTERNS AS A TOOL FOR TASK MODELING

Inspired by the early work of Breedvelt, [1], we will use
patterns as a medium to describe reusable fragments for
the creation of several models and in particular task
models. The Pattern Supported Approach [7] has also
demonstrated the applicability of patterns in the abstract
and concrete phases of UI development. In addition,
patterns have been used to create a UI multi-model
containing the abstract and concrete aspects of the UI,
within the context of UI reengineering for multiple user
interface (MUI) migration [8]. Therefore, in contrast to
Breedvelt, we will use patterns not only as building
blocks for the task model, but also for the more concrete
models of the UI development lifecycle.

Interactive systems entail several aspects of complexity.
On the technical side, the complexity stems from the fact
Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies
are not made or distributed for profit or commercial advantage and
that copies bear this notice and the full citation on the first page. To
copy otherwise, or republish, to post on servers or to redistribute to
lists, requires prior specific permission and/or a fee.

The Pattern-Oriented Approach, POD has highlighted
another important aspect of the pattern concept: pattern
combination. By combining different patterns, developers

TAMODIA’04, Prague, Czeck Republic.
Copyright ©2004 ACM 1-59593-000-0/04/0011…$5.00

99

TAMODIA 2004 | PAPERS

15-16 November | Prague, Czech Republic

among a myriad of pattern artifacts, and see if they could
ever be made compatible with his line of work. When the
activities of pattern reuse is explicitly understood and
defined, design languages can build on and improve this
natural activity, and can result in dramatically better
interactions.

can exploit pattern relationships and combine them in
order to come up with an effective design solution. We
will consider this principle and suggest an interface for
combining patterns. As a result, patterns can be a more
effective vehicle for reuse.
Furthermore, in order to select and apply patterns
efficiently, tool support is necessary. Unfortunately, the
purely narrative nature of most patterns and pattern
languages does not support reasoning, decision-making,
automatic transformations or model building. In Just-UI,
Molina [12] recognized the need for a formalization and
tool support for patterns. Within our framework, we will
also jump on this bandwagon and propose a possible
formalization of patterns according to their target model.
Moreover, we will propose a tool that helps the pattern
user in selecting, adopting and integrating task patterns to
task models.

Traetteberg [20] mentions that the role of representing
knowledge is both to capture knowledge, and to support
the design process. In this context, he analyzes the work
of Nonaka [13] to distinguish between tacit and explicit
knowledge and suggests 4 modes of knowledge transfer:
• Internalization (creating tacit knowledge by acting
upon explicit knowledge)
• Combination (creating new explicit knowledge by
linking existing explicit knowledge)
• Socialization (sharing tacit knowledge with others
through implicit interaction)

In summary, patterns have the potential to inherently
promote the reuse of ideas and knowledge. However, for
patterns to be an effective tool for capturing the
knowledge, the following issue needs to be investigated:

• Externalization (sharing tacit knowledge with others
through explicit verbalization)
In HCI, the concept of a pattern language is not different.
It can be described as a “way of communicating design
knowledge and idioms between design team members”
[19].
In an HCI pattern language, this is done using a natural
language: something like “Are we going to use menubar
or sitemap within the homepage?” where the three
italicized words are actual HCI patterns. Duyne [3]
explains, ”In fact, though you may not know it, you may
already be using some form of a pattern language to
articulate and communicate your design”; some form of
externalization as mentioned above. We agree that
without these words, communication between designers
would be more difficult, but we also believe that there
could be more to a pattern language than just that. In our
work, we will refer to those 4 modes of knowledge
transfer.

Figure 1: Languages and the Communicating Parties

Patterns rarely exist in isolation. Pattern authors have
generally put them in collections, generally known as
“pattern languages” used for design; or design languages.
Rheinfrank and Evanson [15] explain that design
languages have been used to design all kinds of objects
and services and that these languages are “often used
unconsciously, arising out of the natural activity of
creation and interaction with the created things. Yet,
when consciously understood, developed, and applied,
design languages can build on and improve this natural
activity, and can result in dramatically better interactions,
environments, and things of all kinds”. This statement
explains part of our research activities. We identified the
problem with ineffective pattern reuse as a difficulty of
interacting with the things we created; patterns. As
pattern authors have developed different “pattern
languages”, the mere facts of multiplicity of these
languages and their incompatibilities seem to be part of
the problem. The user has to define their own “activities”
of interacting with patterns; selecting and using them.
The user also has to “go shopping” for useful tools

One categorization of languages and communicating
parties can be as shown in Figure 1. Accordingly, we can
see that in the paradigm of pattern languages in HCI
domain, the two communicating entities are humans. The
computer was not meant to be an entity in this language.
Adopting this point of view, we define the issue of this
argument as a possible answer to the question: “Is it
possible to redefine the HCI pattern language to be a
human-Computer Interaction language, and not just a
human-human Interaction language?”
From the above figure, it seems that moving pattern
language from HHI to HCI space improves the level of
automation (the scalability) by allowing computers to
help in preprocessing patterns for the user, but it also
brings less flexibility with it. We believe that while this is
possibly true, the degradation in flexibility is insignificant
compared to the benefits of automation. By using modelbased approach, the decrease of flexibility can be
insignificant (for example by building a well-defined
model for patterns and then adding semantic labeling and

100

TAMODIA 2004 | PAPERS

15-16 November | Prague, Czech Republic

behavior to natural languages instead of using imperative
programming languages, the same pattern can be both
machine- and human-readable). As we implemented our
models, we emphasized that automation can be achieved
using natural languages.
In what follows we will define the general process of
pattern application and we will introduce variables as
placeholder for the context of use. Then, patterns for the
construction of the user task model and their application
with our tool the Task-Pattern-Wizard will be discussed.
Finally we will briefly describe our prototypical Task
Pattern Mark-up Language and we will motivate the
usage of XML for pattern modeling.
Figure 3 : Pattern Interface Aggregation

Often one pattern is implemented using other patterns. In
other words a pattern can be composed of several subpatterns. In Figure 3 we have visualized this pattern –
sub-pattern relationship using the concept of aggregation
of classes. The pattern A consists of the sub-patterns B
and C. If we place patterns in this kind of relationship, we
have to pay special attention to the variables of the
pattern. A variable, defined at the super-pattern level can
affect the variables used in the sub-patterns. In Figure 3,
the variable “x” of the pattern A affects the variables
“yy” and “zz” of the sub-patterns C and B. During the
process of pattern adaptation, the variables “yy” and “zz”
will be bound with the value of “x”. We can see that
modification of a high level pattern can affect all subpatterns.
Figure 2: Pattern and Pattern Instance

So far, we have shown how patterns are generally applied
to models and how they can be aggregated. In the next
section, we will discuss how particular patterns can be
applied on the user-task, dialog, presentation and layout
model.

Task Modeling Patterns and their Usage

As motivated in the previous sections, using patterns can
be an effective way to transmit experiences about
recurrent problems in the software and UI development
domain. Therefore a solution should be generic enough to
apply to different contexts of use. In other words patterns
should be formulated generically enough to withstand
variations of context and domain. Before the pattern
solution stated in the pattern is really tangible and
applicable, it must be adapted to the current context of
use. Thus we suggest that patterns contain variables,
which can act as placeholders for each particular context
of use. During the process of pattern adaptation, these
placeholders will be replaced by concrete values
representing the particular consequences of the current
context of use. In Figure 2 the UML notation for
parametric classes is used to visualize the interface of the
pattern, which is needed to instantiate the pattern. In
particular it is illustrated that the pattern assumes two
parameters (Variable “x”, “y”). In order to instantiate the
pattern both variables must be assign concrete values.
Practically the interface tells the patterns user, that values
for variable “x” and “y” must be provided in order to use
the pattern. In Figure 2 pattern A has been instantiated
resulting in Pattern A Instance. In addition UML
stereotypes are used to signal the particular type (role) of
the pattern.

DEFINING THE TASK MODEL

With respect to the design of interactive systems, “among
all these models, the task model has (today) gained much
attention and many acceptances in the scientific
community to be the model from which (a) development
should be initiated” [4]. The user task model specifies
what the user does, or wants to do, and why. It describes
the tasks that users perform using the application, as well
as how the tasks are related to each other. In other words,
it captures the user task and system’s behavior with
respect to the task-set. In essence, the system will be
viewed through the set of tasks performed by the user,
which create input to and output from, the system.
Patterns for the Task Model

Patterns for the task model describe generic reusable task
fragments, which can be used to establish the task model.
In particular the instances of task patterns (already
customized patterns) can be used as building blocks for
the task model. Examples of such patterns for the task
model are: Find something, Buy something, Search
something, Login yourself or Filling out an input form.

101

TAMODIA 2004 | PAPERS

15-16 November | Prague, Czech Republic

task structure the pattern and all its sub patterns must be
instantiated and customized to the current context of use.

A task pattern that is particularly often applicable is
Search [16]. The pattern is applicable in interactive
applications that manage considerable amounts of data,
which can be accessed by the user. The user wants to
have fast access to a subset of this data.

Tool Support – Task Pattern Wizard

In order to choose and apply patterns efficiently, tool
support is necessary. By integrating the idea of patterns
into development tools, patterns can be a driving force
throughout the entire UI development process. Therefore,
we have implemented a prototype of a task pattern
wizard, which is aiming to support all phases of pattern
application for the task model, ranging from pattern
selection to pattern adaptation, to pattern integration. Our
tool is able to read and visualize already existing task
descriptions that are specified in XIML [4]. It is also
capable to interpret task patterns descriptions documented
in a prototypical XML based mark-up language (TPML,
see next section). After parsing the pattern, the tool
guides the user, step by step through the pattern
adaptation and integration process. In particular after the
task pattern has been interactively adapted to the context
of use, the Task Wizard will insert the resulting task
fragment into the task model.

As a solution, the pattern suggests to give the user the
possibility to enter search queries. On the basis of these
queries, a subset of the searchable data is calculated and
displayed to the user. The Multi-value Input Pattern [14,
16] may be used for the query input. After submission,
the results of the search are presented to the user and can
then, in turn, either be browsed (Browse pattern [16]) or
used as input for refining the search.
Figure 4 shows the Interface and the composition of the
Search pattern. In this view detail of the suggested task
structure are omitted. Here, the Search pattern contains
the variable “Object” which is a placeholder for the
particular object of information one is trying to search.

PATTERNS MODELING IN XML -- TOWARDS A
GENERIC PATTERN TYPE

In order to model task patterns in a usable manner, the
Task Pattern Markup Language (TPML) has been
developed. This language is the heart of the task Wizard.
We proposed an XML Schema for the specification of
task patterns. We will briefly explain the structure of the
TPML XML Schema as well as the semantics of some of
the tags.

Figure 4: Interface and Composition of Search Pattern

As mentioned previously, a pattern can be composed of
several sub-patterns. In Figure 4 it is portrayed that the
Search pattern is composed of the sub - patterns Multivalue Input, Browse and recursively to itself (Search). It
also demonstrates how the variables of each pattern are
interrelated. The value of the variable “Object” of the
Search pattern will be used to assign the “Object”
variable of the Browse and the Sub- Search pattern. In
addition a subset the attributes of the “Search” object is
used to determine the various “Input Fields” of the Multivalue Input Pattern, which is responsible for the
capturing the search query. During the process of
adaptation, the variables of each pattern must be resolved
top-down and replaced by concrete values.

The basic structure of TPML consists of five descriptor
elements (Name, Problem, Context, Solution and
Rational) and the pattern body containing the formalized
solution. The descriptor elements are mostly used for
selection of an appropriate pattern. Based on these
attributes the user can make a decision whether the
patterns are appropriate or not. In contrast to the pattern
description to pattern body captures the formalized
essence of the task pattern.
Technically the body consists of a hierarchically
composition of Task and TaskTemplate elements.
Whereas the Task element embodies basically the XML
formalization of an “ordinary” task structure, the
TaskTemplate element contains an abstract task structure
augmented with variables. These variables act as
placeholder for the particular context of use. Practically,
during the process of pattern application a TaskTemplate
element is transformed into a Task element by resolving
all variables and replacing them by concrete values.
Besides modeling patterns from their task point of view,
they need to be put in a generic form that effectively
enhances reuse. In the end, task patterns are patterns that
are intended for reuse. To be effectively usable, pattern
models should have syntax and semantics. The XML
handbook [6] explains that semantics can be further
divided into semantic labeling of contents, and abstract
interoperable behavior.

Figure 5: Structure of Search Pattern

The suggested task structure of the Search pattern is
illustrated in Figure 5. In order to apply and integrate the

102

TAMODIA 2004 | PAPERS

15-16 November | Prague, Czech Republic

In the GPT model, we defined the syntax of the generic
pattern template, and the semantic labels used for the
syntax. Our work on GPT model focuses on the abstract
interoperable behavior, which involves the behavior
underlying the meaning of some of the tags we are using.
We start by some preconditions and definitions.

processing it into a useful artifact. As we discussed
earlier, because patterns are documented using natural
language, this processing is solely done by humans,
adding a cognitive load to pattern users and greatly
reducing the number of patterns that can be located and
processed in a certain amount of time.

As we investigated most of the pattern formats used so
far, we extracted and analyzed the similarities and
differences between them. Our analysis revealed many
observations that guided us in constructing the schema,
for example:

Second we have extrinsic information, which is
knowledge about how a pattern relates to other patterns,
and what the types and implications of these relationships
are. This information does not relate to each pattern in
isolation, but to the way in which a pattern interacts with
other patterns. This part of the information is generally
implicit, and is normally only clear to experts,
contributing to the difficulty of reusing the pattern.
Experts assume that part of this knowledge is simply
“common sense” and hence they don’t bother writing it
down. Users, especially novice ones, often don’t have this
knowledge. This could mean the difference between a
good and a bad design. Furthermore, this might have been
a reason for motivating many pattern writers to collect
patterns into sets and to show how they might be related
or connected together in a useful way. We have also seen
patterns for writing patterns, and patterns for writing
pattern languages [10]. However, part of this information
is generally scattered inside patterns and mixed with
pattern’s intrinsic information or implicitly written as
recommended clusters of patterns within a collection [2].
Other parts of this information are missing altogether. It
is indeed a complex task to connect many patterns related
to different phases of design in several possible ways.
Therefore, we emphasize that for explicit and
unambiguous pattern modeling, and for true
interoperability, extrinsic data should be separated from
intrinsic data, and analyzed more thoroughly. Defining
the contextualized relationship between patterns is a key
notion in the understanding of patterns and their usages
[5]. For example, Zimmer [21] divides the relationships
between the patterns of Gamma catalog [5] into 3 types:
“X is similar to y”, “X uses Y”, and “Variants of X uses
Y”. Originally, this information was only implicit and
was left unspecified by the authors of the catalog. It was
later extracted and explicitly defined by Zimmer. Based
on his work, we can present extrinsic data as binary
relationships Ri from pattern Px to pattern Py in the form
(Ri, Px, Py). Likewise, a ternary relationship can be
represented as (Ri, Px, Py Pz). At this stage we have not
felt the need for higher-rank relationships, but they can be
represented following the same concept.

• All patterns start with one pattern name and at least one
pattern author.
• All patterns have exactly one occurrence of the three
items: the problem, the context and the solution. Even
the majority of pattern definitions involve this triangle
in some variation. This makes the common
denominator between most pattern definitions: “a
solution to a problem in a context”.
• Different representations add dissimilar items to the
three items above.
• The solution part, common to all patterns, is presented
in different -sometimes confusing- ways
• All patterns have illustrative examples. They differ in
where to put them inside the pattern. Some patterns
start off with an example as the very first part, while
others have their examples scattered throughout the
pattern body.
• Some of the knowledge related to patterns is not only
about each pattern in isolation, but also about the kind
of relationships to other patterns. That is why most
patterns have hints regarding the relationship to other
patterns within the collection.
Based on Nonaka’s work [13], we need to present
knowledge within patterns in an explicit form. Tacit
knowledge is a source of confusion in pattern reuse.
While working on the implementation issues, guided by
our pattern-oriented approach, we noticed that software
developers generally found HCI patterns to be highly
informative when presented to them in a concise
collection, yet experienced difficulty when attempting to
understand and apply them correctly in their development
process. They also found it more challenging when they
were asked to implement same patterns for different
context of use and further for different platforms. Once
they were guided through these variants, translating a
pattern into a program block or a component was a
straightforward task. This motivated us to further define
the assimilation data part of the pattern. We divide the
information within a pattern into three categories:
intrinsic, extrinsic, and assimilation information.

For illustration, we define the following types of extrinsic
pattern data:
• (Subordinate, X, Y) if and only if X is embeddable in
Y. Y is also called superordinate of X.
• (Equivalent X, Y) if X and Y can replace each other.

Our first category, intrinsic information, is made up of
the information and analysis about each pattern
independently. Patterns are meant to encapsulate relevant
knowledge inside them. The importance of this
knowledge lies in understanding the pattern and

• (Competitor X, Y) if X and Y cannot be used together.
• (Neighboring X, Y) if X and Y belong to the same
pattern category (family) or to the same design step as
the described pattern.

103

TAMODIA 2004 | PAPERS

15-16 November | Prague, Czech Republic

Ternary relationships are generally more complex, but the
concept of extrinsic data covers then equally consistently.
To demonstrate, we provide the following relationships:

5-

Gamma, E., Helm, R., Johnson, R. and Vlissides, J. Design
Patterns: Elements of Reusable Object-Oriented Software,
Addison Wesley (1995).

• (Combine, X, Y, Z) if X, Y, and Z can be combined
together in a design artifact.

6-

Goldfarb, C. F., Prescod, P., The XML Handbook, 5th
edition, Prentice Hall PTR (2004).

7-

Granlund, A. and Lafrenière D. PSA: A pattern-supported
approach to the user interface design process. Scottsdale,
AZ. July 1999. Usability Professionals Association
Conference.

8-

Javahery, H., Seffah, A., Engelberg, D. and Sinnig, D.
Migrating User Interfaces between Platforms Using HCI
Patterns. Multiple User Interfaces: Multiple-Devices,
Cross-Platform and Context-Awareness, Wiley (2003).

9-

Mens, T., Lucas, C. and Steyaert, P. Supporting Disciplined
Reuse and Evolution of UML Models. UML98: Beyond the
Notation, Mulhouse, France, Springer (1998).

• (ExclusiveCombine, X, Y, Z) if X can be combined
with either Y or Z, but not with both of them at the
same time. The notation is read as “X
ExclusiveCombine Y and Z”.
It is worth mentioning that unlike “Competitor, X, Y”,
the “ExclusiveCombine, X, Y, Z” denotes that Y and Z
are only competitors in the presence of X.
Our third category comprises assimilation information,
which is information about when, where, and how to
apply a pattern in an integrated design process. This part
concentrates mainly on the final phases of a design,
where more information about the context and the
environment is available. In the end, patterns have to be
transferred from an abstract representation into concrete
objects within a final product. This is where we need to
add some extra information to guide the final design to be
implementable on a desktop or a PDA environment. As
we demonstrated earlier, we have used variables as
placeholders to the assimilation data that can be bound to
concrete values as a pattern is instantiated and integrated
into a particular design at a later stage.

10- Meszaros, G., and Doble, J. A Pattern Language for Pattern
Writing.
(1997)
http://hillside.net/patterns/writing/patternwritingpaper.htm
11- MOBI-D. The MOBI-D Interface Development
Environment
http://smiweb.stanford.edu/projects/mecano/mobi-d.htm.
12- Molina, P., S. Meliá and Pastor, O. JUST-UI: A User
Interface Specification Model. Proceedings of CADUI
2002, Valenciennes, France.
13- Nonaka, I., Takeushi, H. A Theory of the Firm’s
Knowledge-Creation Dynamics. In: The Dynamic Firm.
The Role of Technology, Strategy, Organization and
Regions. Chandler jr. A.D., Hagstrom, P., Sovell. O. (Eds).
Oxford University Press (1998).

CONCLUSION

Task models are used to effectively represent complex
software artifacts. They are becoming a popular modeling
technique, but they still require a lot of experience, and
tedious manual transformations. We have introduced
model and task patterns as a vehicle supporting a more
disciplined and comprehensive form to promote the reuse
of task models. We proposed and used several patterns to
represent task models in a generic way as well as to
transform them into a concrete UI. As we modeled task
patterns using the GPT model, we demonstrated how to
help instantiate task model patterns into final products,
and how we can represent patterns in a reusable way.

14- Paternò, F. Model-Based Design and Evaluation of
Interactive Applications, Springer (2000).
15- Rheinfrank, J and Evanson, S. Design languages. In:
Bringing Design to Software, Winograd, T., ACM press
1996, pp 63-80
16- Sinnig, D. The Complicity of Patterns and Model-Based UI
Development. Master Thesis in the Department of
Computer Science. Montreal, Concordia University (2004).
17- TADEUS. Task-based Development of User interface
software
http://xml.coverpages.org/MuellerDSVIS2001.html.
18- TERESA. Transformation Environment for Interactive
Systems
Representations
http://giove.cnuce.cnr.it/teresa.html.

REFERENCES
1-

Breedvelt, I., Paternò, F. and Severiins, C. Reusable
Structures in Task Models, Proceedings of Design,
Specification, Verification of Interactive Systems ’97,
Granada, June 97, pp.251-265, Springer Verlag.

2-

Coram, T., and Lee, J. Experiences -- A Pattern Language
for
User
Interface
Design
http://www.maplefish.com/todd/papers/Experiences.html

3-

Duyne, D. K. Van, Landay, J. A., and Hong, J. I. The
design of sites. Patterns, Principles, and Processes.
Addison-Wesley (2003).

4-

19- Tidwell, J. Common Ground: A Pattern Language for
Human-Computer
Interface
Design,
(1997).
http://www.mit.edu/~jtidwell/interaction_patterns.html
20- Traetteberg, H. Model-Based User Interface Design. Ph.D.
Thesis, Norwegian University of Science and Technology,
Faculty of Information Technology, Mathematics and
Electrical Engineering, (2002).
21- Zimmer, w. Relationships between patterns. In: Coplien, J.
O. and Schmidt, D. C. (eds.) Pattern Languages of Program
Design. Addison Wesley 1995.

Forbrig, P., Dittmar, A., Reichart, D. and Sinnig, D. UserCentered Design and Abstract Prototypes. Proceedings of
BIR 2003, Berlin, SHAKER (2003).

104

HCI Pattern Semantics in XML: a Pragmatic Approach
Ashraf Gaffar

Ahmed Seffah

John A. Van der Poll

Computer Science and Software
Engineering
Concordia University
+1 (514) 848 2424 ext. 42

Computer Science and Software
Engineering
Concordia University
+1 (514) 848 2424 ext. 24

School of Computing
University of South Africa
http://www.unisa.ac.za

gaffar@cs.concordia.ca

seffah@cs.concordia.ca

vdpolja@unisa.ac.za

During the last few years, UI practitioners started to look at
patterns as an alternative approach to guidelines [2, 3, 4, 5]. A
user interface design pattern, also called an HCI pattern, is
generally defined as a proven solution to a common user problem
that occurs in various contexts of work [2, 3]. Compared to
guidelines, patterns are problem-oriented solutions to precise and
concrete user and usability problems.

ABSTRACT
User interface design is a multidisciplinary field at the crossroads
between software engineering, computer science, psychology and
cognitive science. HCI pattern writers focus on usability and
human aspects of the interface. They use elaborate narrative
formats to convey theories and practices of interaction design.
Pattern users are typically software developers who need concise
and pragmatic guidance of when and how patterns can be used.
Narrative descriptions make it difficult to integrate patterns into
design (CASE) tools. In this paper, we discuss how patterns can be
represented in XML to effectively support their dissemination and
assimilation in a programmable environment.

Several collections of patterns have emerged from day-to-day
practices; among them Tidwell’s “Common Ground”, Coram’s
“Experience” and Welie’s “Amsterdam” play a major role in this
field and wield significant influence [3, 4, 5]. It has been claimed
that HCI patterns and pattern languages are a more useful design
tools which can complement guidelines, act as a driving force in
the model-based development approach as well as a medium for
transferring the knowledge gained by usability experts to software
engineers through software development tools [6, 7, 8, 9].

Categories and Subject Descriptors
D.2.11 [Software Architectures]: Data Abstraction
D.2.13. [Reusable Software]: Domain engineering, Reusable
libraries, Reuse models

However, the text-based formats commonly used to document
HCI patterns coupled with the lack of tool support and integration
compromises these potential benefits of HCI patterns [10, 11].
Lack of formality in representing patterns makes them similar to
design guidelines. They are ambiguous, abstract, and therefore
difficult to fully understand and master in a specific design
context [4]. We believe that the onset of prevalent uses of patterns
is severely hindered by the lack of an interoperable language and
proper models for representing and disseminating patterns. A
clear representation can facilitate the patterns assimilation by
developers in their own context of work and applications.

General Terms
Documentation, Design, Standardization, Languages, Theory,

Keywords
Programmable
patterns,
knowledge
reuse,
knowledge
representation, knowledge dissemination, XML, information
modeling.

1. INTRODUCTION
User interface engineering is a challenging task especially for
novice software developers, being unfamiliar with usability
engineering techniques and human interaction concepts [1].
Capturing best design practices and transforming them into user
interfaces building blocks is a fundamental task in the usercentered design process. User interface- and style guidelines have
been proposed as one tool for disseminating the design
knowledge. However, ambiguity and lack of formality make it
difficult to understand and apply them effectively, especially
when they came into conflict.

In our research, we investigate notations to document and
represent patterns and to facilitate the combination of several
patterns to create a pattern-oriented design. Among various
possible notations including UML and formal notations, XML is a
promising candidate for the following reasons:
XML has proven its power as a markup language for
documenting structured information in different fields.
Information about patterns can be extracted and stored in a
database. The presentation of pattern documentation can then
be customized and delivered to the developers using different
formats [12, 13].
XML is a good option for building a pattern ontology that
can support some semantic reasoning such as when applying
a pattern and why other patterns can be used.
XML-UML transformation tools are starting to emerge. This
can be used to map XML description of a patterns into an
object-oriented model and vice-versa
- Several XML-based languages for UI programming have
been introduced recently including UIML (User Interface

Permission to make digital or hard copies of all or part of this work for
personal or classroom use is granted without fee provided that copies are
not made or distributed for profit or commercial advantage, and that
copies bear this notice and the full citation on the first page. To copy
otherwise, to republish, to post on servers or to redistribute to lists,
requires prior specific permission and/or a fee.
Human and Social Factors of Software Engineering (HSSE) May 16,
2005, St. Louis, Missouri, USA
Copyright 2005 ACM ISBN # 1-59593-120-1/05/05
.

1

Markup Language), XUL (Extensible User Language) and
XIML (eXtensible Interface Markup Language). The XMLbased implementation of a pattern can be rendered to
different programming languages including HTML, Java and
the Wireless Markup Language. This can fix one of our
major problems the dissemination of patterns into machinereadable code as well as the integration patterns into CASE
tools.

3. PATTERN REUSE: A CONCEPTUAL
APPROACH
Anecdotal evidence shows that one of the challenging problems
with patterns in general and HCI patterns in particular is the lack
of reusable format. By reusable patterns we refer to patterns that
are written in a suitable way to promote effective assimilation and
interaction with design tools. This allows us to distinguish
between two important challenges associated with patterns: the
sending end- and the receiving end challenges. The former refers
to the process of “packing patterns” or encapsulating the
knowledge content into patterns, currently the main focus of the
majority of pattern community. The latter refers to “unpacking
patterns” or creating a mechanism for delivering them to software
practitioners; an activity often neglected and simply considered a
patterns user responsibility.

Using XML, our approach consists of moving from a natural
language representation to a machine-readable and semantic
format. This can be a relief to pattern users as it allows machines
to recognize the underlying essence of patterns. This is not
achieved by simply rewriting patterns in an XML format, but by
building representative models to govern the semantics of
patterns. Concrete models can offer a common understanding and
a common interface to patterns.

To address these challenges, we approach patterns with the
following goals in mind:

The rest of the paper is organized as follows. In part 2 we explain
how we planned for and used a systematic approach towards a
solution. In part 3, we define our main goals and the conceptual
approach for our solution. Part 4 provides details of using XML as
the infrastructure for representing patterns. Part 5 gives an
example of a design using our pattern-oriented approach. Part 6
presents an experimental tool that we developed to demonstrate
the communication with our XML patterns. We conclude this
paper in part 7.

1- Facilitating interoperability between applications: patterns
should be independent objects, easily accessible by different
applications and tool writers in a machine-readable format.
2- Resolving questions of mixing patterns together: is one pattern
a special case, a variation, or a component of another, and how
–if possible- can they work together, and so forth.
3- Resolving the question of validation: does "this piece of code"
implement "this pattern"?
4- Automating the activities related to patterns; namely discovery,
documentation, validation, integration, and implementation.

2. PATTERN DOCUMENTATION: THE
7C’S METHODOLOGY

At a conceptual level, we divide the information pertinent to
patterns into three distinctive and dissimilar categories:
Our first category is that of intrinsic information made up of the
information and analysis about each pattern independently.
Patterns are meant to encapsulate relevant knowledge inside them.
The importance of that knowledge lies in understanding the
pattern and processing it into a useful artifact. As we discussed
earlier, because patterns are documented using natural language,
this processing is solely done by humans, adding a cognitive load
to pattern users and greatly reducing the number of patterns that
can be reasonably located and processed.

In the software engineering community, the majority of members
are engineers or programmers with a core of common design
skills. In contrast, in the more heterogeneous HCI community,
there is a more apparent problem because pattern writers and users
do not necessarily share a common background. On the one hand,
pattern writers use improvised techniques to capture and
disseminate their ideas, creating several uncommon and
incompatible approaches. Pattern users, on the other hand, often
get disoriented as they browse through hundreds of pattern-related
books and web sites in search for some useful patterns to use in
their kind of work. The dilemma is that while patterns are mainly
intended to help novice designers, they need to become -in some
way- pattern experts before they can find and effectively use
patterns. They often have to read through and understand many
patterns before realizing that these are simply not what they need.
Clearly, there is a large cognitive load associated with this
process. It has become difficult for potential authors to represent
patterns and for readers to fully understand them. This problem is
well known in the pattern community in general [12, 13].

Second we have extrinsic information, which is knowledge about
how a pattern relates to other patterns, and what the types and
implications of these relationships are. This information does not
relate to each pattern in isolation, but to the way in which a
pattern interacts with other patterns. This part of pattern
information is generally implicit, and is normally only clear to
experts, contributing to the difficulty of reusing patterns. Experts
assume that part of this knowledge is simply “common sense” and
hence they don’t bother writing it down. Users, especially
novices, often don’t have this knowledge. This could mean the
difference between a good and a bad design. Furthermore, this
might have been a reason for motivating many pattern writers to
collect patterns into sets and to show how they might be related or
connected together in a useful way. We have also seen patterns for
writing patterns, and patterns for writing pattern languages [15].
However, part of this information is generally scattered inside
patterns and mixed with patterns’ intrinsic information or
implicitly written as recommended clusters of connected patterns
within a pattern collection [5]. Other parts of this information are

We proposed the Seven C’s methodology [14] as a systematic
approach to reduce the gap between pattern writers and users in
our project. The methodology gradually moves from the current
impromptu techniques to a more structured one to create one
common pattern format in one common place. It aims to create a
mainstream pattern approach that encourages and guides both
pattern writers and pattern users to “talk the same language”. This
uniformity of approaches facilitates the final steps of the
methodology to connect patterns in a more formal way to be able
to apply automated processing on them.

2

a high-level description of a pattern-oriented design. The reason is
that XML is machine-readable. This would open the door for
specialized tools to read an XML file, process it, and generate
desired output, be it another XML document, an HTML
presentation, or a source code document in another programming
language. XML standards, frameworks and tools are well
established today.

missing altogether. It is indeed a complex task to connect many
patterns at different phases of design in several possible ways.
Defining the contextualized relationships between patterns is a
key notion in the understanding of patterns and their reuse [13, pp.
11-13]. Therefore, we note that it should be separated from
intrinsic pattern information, and analyzed more thoroughly.
Our third category comprises assimilation information, which is
information about when, where, and how to apply a pattern in an
integrated design process. This part is a key component,
especially in the concept of generative patterns. It helps delay
unnecessary or unknown details until the final phases of design,
where more information about the context and the environment is
available. In the end, many patterns have to be transferred from an
abstract representation into concrete objects within a final
product. This is where we need to add extra information to guide
the final design to be implementable –for example- on a desktop
or a PDA environment. In sinnig et al. [16] we suggest that
patterns should contain additional variables, which act as
placeholders for different contexts of use (assimilation
information), and that these variables be bound to specific values
(assimilated) as a pattern gets instantiated and integrated into a
particular design. Our current approach is focusing on two
different development stages. First we are using patterns and
pattern tools to generate design artifacts at high level of design.
Second we are using patterns to generate artifacts at the code
level. In this paper, we elaborate on the first approach. As for the
second approach, we are extending the assimilation data to
support code fragments that can be modified during design
process then inserted directly into existing source code. Please
refer to [16] for more details.

The first step to represent patterns in an XML format is to agree
on the format. This is, however, one of the problems of the current
pattern collections, making it an obstacle to be removed. We need
a common format as per the Seven C’s to facilitate the
representations [14]. It is not meant to be a simplistic, rigid format
that satisfies a specific author’s needs and considered useless by
other authors. It should be a flexible, less restrictive format that
covers the different needs within a pattern community. We built a
generic XML schema that achieves this goal: be flexible enough
to cover the different representations available, yet remain
restrictive enough to have a clear structure and validating power.

4.1

The Scale of Restriction

Any valid XML schema would work, but the better the schema is,
the easier it becomes to produce compliant documents as well as
tools and applications to read and understand these documents. As
we experimented on different options, we defined the “scale of
restriction” of the proposed schema. We experimented and
analyzed its effect on the pattern-oriented approach as follows: At
one extreme we can actually write patterns in an XML format
with no schema at all (the “non-restrictive” end of the scale). This
would easily cover any pattern representation, as it allows every
pattern writer to add arbitrary tags wherever it occurs to them and
then ignore validating such documents against any schema.
However, it is extremely difficult to write sophisticated tools
capable of parsing, understanding and processing a large
collection of these patterns. At the other extreme we can have a
simplistic schema to impose one rigid pattern format that every
pattern writer has to follow (the “fully restrictive” end of the
scale). While this makes it much easier to write powerful tools
that can efficiently process any number of patterns and totally
understand each part of each pattern, it will eradicate the
creativity associated with patterns and appreciated by pattern
writers, leading to a lack of enthusiasm to use it. It is, therefore,
the fine balance between these two ends that we are seeking. We
should keep in mind that the design process is creative, so we
must allow room for ingenuity in pattern-oriented design. In fact,
like other engineering disciplines who have these kinds of
extremes, it is not impossible to strike a balance somewhere
between the two ends after exploring the factors and forces
affecting this scale.

The generic schema (sec 4.2) is used to implement these concepts
in a concrete XML format. This allows us to access the required
aspects of our patterns repository that are pertinent to each design
phase. The XML allows us to access patterns using other tools
that can interact with patterns at the code level.
An established design process instigates good design by allowing
designers to follow structured methods in their activities. Patternoriented design is meant to be a process that offers a further
enhancement by using patterns as core guidance in different
stages of the design process. An ethnographic interview in which
we asked 20 developers to describe their experiences in
combining patterns to create a design showed us that each pattern
description should also include a pointer to the design step in
which the pattern applies. A similar study conducted by the
DENIM team [17] confirmed the advantages of a processsensitive design approach to Web design. Achieving effective
reuse requires attention to both process and product. Therefore,
pattern oriented designs embed product-oriented patterns in the
various user-centered design activities that the developers carry
out when designing a user interface. To a certain extent, these best
practices in user-centered design are process patterns [18].

4.2 The Schema
As we investigated several pattern formats on the Web, we
extracted and analyzed the similarities and differences between
them. Our analysis revealed several observations that guided us
in constructing the schema:

4. IMPLEMENTING A SOLUTION: THE
XML PLATFORM

-

XML is the logical choice for structuring the semantics and
describing a standardized behavior of patterns needed to automate
the design process. Moreover, as will be discussed later, it allows
for paving the road towards automating the code generation from

3

All patterns started with a pattern name and a pattern author.
All patterns have what we call “the minimal triangle” which
is the problem, the context and the solution parts. The
majority of pattern definitions involve this triangle in some

-

-

variation, making it the common denominator between most
pattern definitions.
Different authors added different items to the minimal
triangle.
The solution part also had some commonalties and
differences inside them.
All patterns had examples to show. They differed in where to
put them in the pattern. Some started off with an example as
the very first part, while others had their examples scattered
throughout the pattern definition.
Much of the data related to patterns lies not only within each
pattern, but also in the kind of relationships between different
patterns. That is why most pattern representations had some
entries regarding the relationship between each pattern and
other patterns in the collection.

minimal triangle and other relevant information. The minimal
triangle refers to the triad problem, context, and solution, which
are the common denominator between most patterns and
essentially the minimum information for a useful pattern. While
other theory items can be missing in any pattern, we found that
this triad is critical for realistic pattern documentation and reuse.
Any missing one of the three parts can turn a pattern into a useless
document.
The practice part collects all information about a pattern as being
used in practice by the author and/or other users. This part
encourages users by giving them real-life examples that they may
want to follow, and possibly other bad examples or pitfalls that
they may want to avoid.

4.3 A Bridge to a Formal Model
The above model for patterns may be formalized in Z [19] and
below we present a partial specification of Fig 1. We define some
basic types
[P_ID, B_ID, Pr_ID, NAME, AUTHOR, NARRATIVE, IMAGE,
CODE]
which represent the set of all pattern identifiers, body identifiers,
practice identifiers, names, authors, narratives, images and code
examples respectively.
The state is given by:
» Pattern_____________________
Æhead: P_ID ß Head
Æbody: P_ID ß Body
Ærelations : P_ID ß P P_ID
–_________________________

Figure 1: The hierarchy of some pattern attributes
The above analysis led us to build a generic schema to instantiate
our conceptual approach. The schema allows us to include
patterns from different collections in a programmable approach.
Figure 1 shows part of this hierarchy. This schema covers
different pattern formats in a structured predefined model.
Concrete interfaces are derived from this schema, hence allowing
communication with other tools. We briefly discuss some of these
ideas below. We divided the pattern representation into four main
parts: head, body, relations, and assimilations. They reflect the
three main categories that we made distinct in section 3. The head
is an additional part that holds essential metadata about a pattern.
It contains the unique keys to a pattern (like a unique name,
pattern ID, etc.) as well as the pattern authors. The body contains
the intrinsic information about the pattern, while the relation part
collects the information pertinent to the relationship between this
pattern and other members of the collection (the extrinsic
information). The assimilation part is used to hold variables that
need to be instantiated in a concrete design

At the top level of our hierarchy a pattern is defined as a threecomponent structure. Each component is uniquely identified by a
pattern identifier from the set of all pattern identifiers, namely,
P_ID. The relations component indicates that a pattern may have
a relationship with zero or more other patterns.
The head contains a unique pattern identifier, a name for the
pattern and a set of pattern authors.
» Head______________________
Æid: P_ID
Æname: NAME
Æauthors : P AUTHOR
–_________________________
The body and the practice for which the pattern is useful are given
below:

Due to space restrictions, we elaborate on one part –the body- as
an illustration. The body part has two main subcategories, namely,
the theory and the practice:

» Body______________________
Ætheory: B_ID ß Theory
Æpractice: B_ID ß Practice
–_________________________

The theory part contains all information about a pattern as seen by
the pattern author(s), resulting from the author’s analysis and
understanding of the pattern. This part encourages pattern authors
to express their insight and analysis of a pattern. It contains the

4

» Practice_____________________
Æexample: Pr_ID ß Example
Æbad_example: Pr_ID ß Bad_Example
Æknown_uses : Pr_ID ß P Known_Use
–_________________________
At one of the lowest level of the pattern hierarchy we find an
example of the use of the pattern.

way to link users to more in-depth information than can be
presented on the home page.
7. Executive summary pattern. Don't just provide a link to some
pages behind the homepage. Show some of your best or most
recent content. This can be achieved via the use of different
instance executive summary patterns. Such patterns provide
an abstract of information distributed among many pages.
8. Index Browsing pattern. Your homepage should offer users a
clear starting point for the main pages that users can
undertake when visiting your site.
9. Disclaimer pattern.
10. Maintainer info pattern. Sometimes pages are wrong; even
the best proofreaders make mistakes. To ensure the pages are
accurate, you can put your visitors to use. They will find
errors you don't, as well as out-of-date material. Therefore, a
home page provides a link to the page's maintainer. This link
can take a variety of forms: a mailto: link, a link to a page
with an email form, or a link to a page with the maintainer's
contact information.
11. Go back to safe place pattern. This pattern allows the user to
go back to the home from any page. To familiarize the user
with it, this pattern should be visible on the home page.

» Example______________________
Ænarrative : NARRATIVE
Æimage : IMAGE
Æcode : CODE
–__________________________
The rest of Fig. 1 may be formalized in a similar fashion.

5. PATTERN-ORIENTED DESIGNS: AN
EXAMPLE
To illustrate the idea described in sections 2, 3 and 4, we discuss
the redesign of the homepage of a popular website for bioinformatics, the National Center for Bioinformatics Information
http://www.ncbi.nlm.nih.gov/. This extra large website provides
information and offers a large set of powerful, yet difficult to use
services for biologists. In the absence of deep linking, the home
page is its face to the world and the starting point for most user
visits. Improving the home page multiplies the entire website's
usability and increases the accessibility and visibility to the over
10, 000 pages included in this site.

For an experienced user interface designer, there should be no
doubt that these patterns will significantly increase the usability of
the Website. However, embedding these patterns in the home
page, while making sure that they work together correctly is not
an easy task, in particular for novice developers. For example,
figure 2 describes how these patterns could be combined in a
pattern-oriented design process of a home page. This combination
assumes that developers know about the intrinsic, extrinsic and
assimilation knowledge that exist for all of them. Some of the
patterns are competitors while others are similar. Furthermore,
there is information about where these patterns should be placed
and organized, how many instances of each pattern we need, etc.
Incorporating this knowledge in the pattern description, while
helping designers to correctly use and apply it is an important step
towards effective reuse.

Based on our empirical studies [2, 20] and recommendations from
others [17] a usable home page for this large Website can be
developed by combining the following patterns:
1.

2.

3.

4.

5.
6.

Tagline pattern. The home page ought to explain what the
site does and what makes it unique among its competitors.
The tagline pattern explains their products and services in
short enough text so that a user will actually read it online.
Web Convenient toolbar pattern. This pattern provides an
access to the most common services such as help, feedback,
etc.
Search pattern is important for any big Web site. When users
want to search, they typically scan the homepage looking for
"the little box where I can type," so your search should be a
box. Make your search box at least 25 characters wide, so it
can accommodate multiple words without obscuring parts of
the user's query.
Frequently- or most visited pages pattern. Users will often
remember good articles, products, or promotions. However,
when these are not featured on the homepage, users normally
do not know how to find them. To help users locate key
items, keep a short list of recent features on the home site,
and supplement it with a link to a permanent archive. This is
exactly the mission of the shortcut pattern.
Site Map pattern. This pattern summarizes the structure of
the underlying content architecture.
About pattern. People often need details about who you are.
Good corporate information is especially important if the site
hopes to support recruiting, investor relations, or PR, but it
can also serve to increase a new or lesser-known company's
credibility. An "About <company-name>" pattern is a good

5.1 Pattern Relationships and Reasoning
We introduce a simplified example to illustrate the complexity of
the relationships between patterns. For the context of a large Web
site, we have the three patterns “site map”, “index browsing” and
“home page”. The following two relationships exist among them:
- Site map can be “combined with” index browsing.
- Site map can be “embedded in” home page.

Figure 2: A Typical HCI pattern-oriented home design

5

Using past experience and common sense reasoning, we can
deduce the following relationship from the other two: ‘Index
browsing can be “embedded in” home page’. For a novice user,
however, this might not be immediately obvious. Therefore we
need to explicitly deliver these relationships to novices in a
suitable way before they can arrive at the same conclusion. What
we need is to specify the presence and meaning of each
relationship as well as the implications that can arise from
combining them. With many patterns applied in one page, the
relationships and implications can be immense, and, therefore,
need to be separated from the patterns’ intrinsic information.

tool can automatically examines the compatibility of patterns and
offers relevant context-sensitive advice/tips to the designer.

6. TOWARDS A PATTERN-ASSISTED
DESIGN ENVIRONMENT
In order to foster HCI patterns dessmination and assimilation,
tools support is necessary. Our research focus on developing an
Integrated Pattern-assisted design Environment (IPE), which will
unite all necessary functionality. Our first prototype, MOUDIL,
was originally designed with two major objectives: First as a
service to promote, via HCI patterns, the human-centered software
engineering best-practices. Second as a research forum for a
scholarly discussion on how patterns are really discovered (or
invented), represented, validated, learned, perceived and used. We
are using MOUDIL as a prototypical implementation of an IPE.
The project is designed to be able to provide functionality that
supports every step of the Seven C’s methodology [14], which
aims to formalize a complete HCI lifecycle.
MOUDIL provides the following key features:

Figure 3: A view of MOUDIL
.
As a future step, we are planning to have MOUDIL work more
closely with existing software developments tools, in particular
GUI builders. Apart from the further investigations needed to
generate scripts and program blocks from a high-level XMLbased representation of patterns, it would be desirable to allow
pattern writers and users to identify relationships between patterns
and to combine them in a visual way. Furthermore, the academic
evaluation of our approach needs to be followed up with industryoriented case studies of a larger range of software developers with
varying backgrounds working in different contexts and using the
same pattern languages.

•

7. CONCLUSION AND FUTURE WORK

•

•

•

•

It has been designed to disseminate proposed or potential
patterns in many different formats or notations. Therefore
patterns in versatile formats can be submitted for reviewing.
An editorial board can participate in reviewing and validating
patterns. Before publishing, collected and contributed
patterns, they need to be accessed and acknowledged by the
editorial committee. We have invited HCI pattern
practitioners and researchers to join this committee.
Editor allows us to attach semantic information to the
patterns. Based on this information and our ontology,
patterns can be placed in relationships, grouped, categorized
and displayed.
The pattern navigator provides different ways to navigate
through patterns or to locate a specific pattern. The pattern
catalogue can be browsed by pattern groups or searched by
keyword. Moreover, a pattern wizard will find particular
patterns by questioning the user.
The pattern viewer provides different views of the pattern,
adjusted to the preferences of the specific user.

In this paper, we show how we: (1) document patterns at a high,
semantic level in a standardized way to support patterns
dissemination, assimilation and new designs, (2) represent the
knowledge encapsulated in internal pattern descriptions,
relationship to other patterns as well as integration into design
processes, and (3) implement them as programmable artifacts
using XML. These three ingredients are the first steps of our
approach towards an environment for effective reuse of patterns.
Such environment aims to bridge user interface design experience
and the concept of software patterns and transform them into
program building blocks. Besides rejuvenating patterns reuse, the
project can be seen as a knowledge-intensive CASE tool. In
addition to its potential for automation, the XML-based approach
can contribute greatly to the patterns’ understandability and
usability [9].
While focusing on several practical implementations for
validation, our work incorporates findings from different
empirical studies on patterns [2, 7, 20] as well as lessons learned
from the development of several pattern engineering tools [11,
12]. We were able to identify the cognitive load associated with
using patterns due to the lack of intelligent tool support. We do
know that the natural language approach used so far, albeit
somehow structured, is greatly limiting the development of more
serious tools and interoperability.

Moudil has its foundations in the software engineering
community, where several tools have been suggested for patterndriven designs [11, 12] and for knowledge dissemination in
general. Moudil offers several tools for browsing, searching,
editing, and for using the relationships between patterns to create
pattern-oriented design while combining existing user interface
patterns

Currently, we are expanding the XML concept to cross over to
object-oriented paradigm. After having represented patterns as
XML objects, we are now automatically generating programming
objects and classes with well defined interfaces. Using existing

An important feature can be provided by MOUDIL is a
mechanism to dynamically check if patterns were combined
correctly. Using different knowledge about patterns semantics, a

6

[8] Erickson, T.: Lingua Franca for Design: Sacred Places and
Pattern Languages. DIS 2000: Proc. of Designing Interactive
Systems, New York, August 17-19, ACM Press 2000.

XML marshalling techniques, and with the help of emerging
XML tools, we have generated java and C# classes from our XML
patterns. This allows us to work with the same pattern in textual
format for human reading, in XML format for interoperability and
readability by most XML tools, as well as in two major objectoriented languages. Well-defined application programmer
interfaces (API’s) for patterns are allowing us to write tools to
communicate with patterns in a runtime environment Rethinking
patterns as programming object is the first step towards a more
pragmatic approach than just text.

[9] Seffah, A., Forbrig, P.: Multiple User Interfaces: Towards a
Task-Driven and Pattern-oriented Design Model. DVS-IS:
Symposium on Design, Specification and Validation of
Interactive System. Rostock, Germany, June 10-14, 2002.

[10] Florijin, G., Meijers, M., Winsen, P. V.: Tool Support in
Design Patterns. In: Lecture Notes in Computer Science.
No.1241, Askit, M., Matsuoka, S. (Eds.): ECOOP,
Springer Verlag 1997.

8. ACKNOWLEDGMENTS
This work is supported by the National Science and
Engineering Research Council (NSERC) Canada, le Fonds
Québécois de la Recherche sur la Nature et les
Technologies (FQRNT) Canada, and Daimler Chrysler
Software Technology Center (Web Engineering project,
Star Phase I), Ulm, Germany.
9.

[11] Budinsky, F., Finnie, F.J., Vlissides, J.M., Yu, P.S.:
Automatic Code Generation from Design Patterns. Object
Technology, Vol.35, No.2, 1996.
[12] Zimmer, W.: Relationships between Patterns. In Pattern
Languages of Program Design. Coplien, J.O., Schmidt, D.C.
(Eds), Addison Wesley 1995.
[13] Gamma E., Helm, R., Johnson R., Vlissides, J.: Design
Patterns: Elements of Reusable Object-Oriented Software.
Addison Wesley, 1995.

REFERENCES

[1] Myers, B.A.: Challenges of HCI Design and Implementation.
ACM Interactions, Vol. 1, No. 1, January 1994.

[14] Gaffar, A., Seffah A., Javahery, H., Sinnig, D.: MOUDIL: A
Platform for Capturing and Sharing Patterns. Patterns in
Practice Workshop, ACM CHI Conference, Florida, April
2003.

[2] Javahery, H., Seffah, A.: A Model for Usability PatternOriented Design. In Pribeanu, C., Vanderdonckt, J. (Eds.):
Task Models and Diagrams for User Interface Design.
Proc.1st Int. Workshop on Task Models and Diagrams for
User Interface Design, Tamodia, Bucharest, 18-19 July 2002.

[15] Meszaros, G., Doble, J.: A Pattern Language for Pattern
Writing.
at
http://hillside.net/patterns/writing/patternwritingpaper.htm

[3] Tidwell, J.: Common Ground: A Pattern Language for
Human-Computer
Interface
Design.
1997,
at
http://www.mit.edu/~jtidwell/common_ground.html

[16] Sinnig, D., Gaffar, A., Reichart, D., Forbrig, P., Seffah, A.:
Patterns in Model-based Engineering. In Proceedings of
CADUI 2004, Funchal, Protugal, 13.-16. Jan., 2004, pp. 197
– 210

[4] Welie, M.V., Veer, G.C. V-d., Eliëns, A.: Patterns as Tools
for User Interface Design. Int. Workshop on Tools for
Working with Guidelines. October 7-8, 2000, Biarritz
France.

[17] Lin, J. M., Newman, W., Hong, J.I., Landay, J.A.: DENIM:
Finding a Tighter Fit Between Tools and Practice for Web
Site Design. CHI Letters: Human Factors in Computing
Systems, CHI 2000, 2000. 2(1): pp. 510-517

[5] Coram, T., Lee, J: Experiences – A Pattern Language for
User
Interface
Design.
1998,
at
http://www.maplefish.com/todd/papers/experiences

[18] Ambler, S.W.: Process Patterns: Building Large-Scale
Systems Using Object Technology. SIGS Books, Cambridge
University Press, July 1998.

[6] Lafrenière, D., Granlund, A.: Usability Professional
Association Workshop on Pattern-Supported Approach to the
User
Interface
Design.
1999,
at
http://www.gespro.com/lafrenid/Workshop_Report.pdf

[19] Bowen J.P.: Z: A Formal Specification Notation. In Frappier,
M., Habrias, H., (eds.): Software Specification Methods: An
Overview Using a Case Study. Springer-Verlag, FACIT
series, 2001, pp. 3 – 19.

[7] Borchers, J.O.: A Pattern Approach to Interaction Design.
Proceedings of the DIS 2000 Int. Conference on Designing
Interactive Systems, New York, August 16–19, 2000, ACM
Press, 2000, pp. 369–378.

[20] Engelberg, D., Seffah, A.: Design Patterns for the Navigation
of Large Information Architectures. 11th Annual Usability
Professional Association Conference. Orlando, Florida, July
8-12, 2002.

7

2017 IEEE 11th International Conference on Semantic Computing

Exploring Double Subjectivity Through
News Frames In Online News Sources:
A Network Approach
Loretta H. Cheeks

Ashraf Gaffar

CIDSE, Computer Science
Arizona State University
Tempe, AZ U.S.A.
loretta.cheeks@asu.edu

CIDSE, Software Engineering
Arizona State University
Mesa, AZ U.S.A.
ashraf.gaffar@asu.edu
The automation of data processing can be generally
categorized under two main areas: formal data and informal
data.

Abstract—The Internet is a major source of online news content.
Current efforts are made to unlock latent meaning in online news
content using advanced language processing tools and machine
intelligence. This necessitates exploring the internal structure of news
narratives to cope with the challenges posed by limitations of existing
tools. This article explores the conceptualization of Double
Subjectivity in news frames as deployed by online news sources. We
propose a new perspective by exploring a) a News Frame Issues
Network that is useful for describing the structure of online news
media and b) formulating an influence model for understanding the
dynamics of bias that underpins Double Subjectivity. This research
has the potential to inform more intelligent conclusions about
narrative text meaning (or semantics) to address real-world socioenvironmental issues. We use water insecurity in the Southwestern
United States as our contextual case. Our experimental evaluation
shows the proposed network and model is an effective approach for
advancing what we know about the production of language in
narrative text where subjectivity exist.

Formal data represented by mathematical formulas and
computer languages have little room for subjective
interpretation, and is typically concise and predictable. A
correctly developed source code can compile and run on a
computing machine and will always produce the same output
for a specific input. The combination of the formal set of
instructions resulting from successful compilation and run of
source code will transition the computer through a set of
predefines states, depending exclusively on the compiled code
and input data. This leaves no room for interpretation or
subjectivity. In other words, the meaning and interpretations
must be fully represented in the source code. A good
programming language must therefore have sufficient
expressiveness to fully represent a feasible solution in a
specific problem space. If the source code arrived to an
undefined state, it will simply freeze or crash, and is unable to
make any independent decision. Some areas of computer
science like fuzzy logic and AI attempt to address these
inherent limitations. However, it’s not the focus of our work.

Keywords –Subjectivity; sentiment; sentiment analysis; social
influence; bias; subjectivity; framing; news source; natural language
processing
I.

INTRODUCTION

While source code is a good medium of communication
with computers, natural languages are the medium of
communication among humans in an informal way. Such
informal data can be further divided into two subcategories
depending on the source of origination: direct and indirect.

Approximately 80% of all data today exists in digital form
as unstructured text (e.g., news, e-mails, social media feeds,
contracts, memos, clinical notes, and legal briefs) [14]. The
Internet is the premier digital platform for the dissemination of
online news content and unstructured text. The ability to unlock
hidden structure and latent meanings in unstructured text is an
important area of research because text is a fundamental device
of communication and human interaction for expressing realworld issues.

Direct informal data arises when a person encounters an
event and perceives, in part, its details firsthand. Human
perception of events leads to their personal interpretation of the
event. This interpretation depends greatly on the viewer
perception as different people can view different prospects of
the same event. Perception is often associated with the viewer’s
state of mind, prejudice, background, and beliefs. Two persons
witnessing the same event or being involved in the same
situation could assign different interpretations and end with
separate conclusions. We believe that while the external
situation was the same (we define it as the Absolute Baseline),
it could be internalized differently by different people. We
define this case as first level subjectivity. Even if different

The value of knowledge depends on communication among
other things. Data is one common medium of capturing and
communicating valuable information and hence knowledge.
While computers have been used to leverage our ability to
communicate and acquire knowledge, it’s mostly an automated
approach. An approach of the generation and dissemination of
data with less ability to delve deeper into the hidden meanings
of data. Humans still have an unprecedented ability to get
beyond the syntax of data.
978-1-5090-4284-5/17 $31.00 © 2017 IEEE
DOI 10.1109/ICSC.2017.50

24

Beyond natural language and direct communication, the
invention of printing, and multimedia was followed by the
Internet and the WWW which led to an explosion of indirect
informal data. While we can still directly perceive some events
and build our own subjective interpretation of them. We can
then receive a much larger number of events indirectly. We do
not witness the events; hence we do not have an Absolute
Baseline. We rather “hear about the events” through written or
spoken reports. Our baseline will hence be relative to the
reporter subjectivity or simply “float”.

people were asked to report an incident or a situation (the same
Absolute Baseline), we often end up with different views.
Many factors further affect this subjectivity.
•

Complex situations, such as watching and reporting a
movie, are harder to perceive and interpret compared to
simple or atomic events, like an incident of a rocket
launch.

•

Unlike formal languages, the medium of
communication, a natural language, does not fully
express the contents in its syntax. Natural languages
report “about” something, rather than fully describes
the event.

While we still perceive the indirect reports and interpret
them differently (adding our subjectivity), we lost the Absolute
Baseline, and we start with a reporter-relative or a floating

Figure 1. A depiction of the evolution of First Level Subjectivity and Double Subjecting potentials.

•

Humans have different expressive abilities and styles
in reporting events using natural languages, leading to
increase in subjectivity.

•

The ambiguity of natural languages allows for different
interpretations of the spoken or written sentences.

•

Therefore, even for different people directly witnessing
the same situation, significant subjectivity can be
present in reporting or discussing it amongst
themselves. This is seen in long debates and
discussions or exchanges in correspondences.

baseline. The difference here is that if the reporter subjectivity
is strongly biased towards certain beliefs, we already start with
a completely different baseline that could strongly affect our
own beliefs. We refer to it as “Double Subjectivity”.
An analogy drawn from photocopying an original
document illustrates “Double Subjectivity” in that, ideally, a
photocopy should be a replica of the original with no distortion
(with distortion being metaphorically equivalent to bias). Yet,
in actuality, the resulting photocopy entails some distortion.
Two photocopies of the original will not be the same as a
photocopy of a photocopy. The latter case will have a
cumulative distortion effect similar to that in Double
Subjectivity.

This first level subjectivity has been identified and we often
try to reduce it. For example, TV reporters try to abide by
certain rules to maximize neutrality and leave it up to the
viewers to build their own opinions freely. The scientific
community tries to prove the stated facts through rigorous
research and scientific experiments in an attempt to eliminate
or reduce subjectivity. However, this is easier said than done.
We’ve seen reporters who are known for their “opinions.”
Even some scientific research based on rigorous experimental
results was later refuted after being followed by more
experiments.

Online news is exemplary of “Double Subjectivity,” in that
its assemblage consists of subjective properties; such as,
context, interpretation, multi-modal interaction, background,
compensation, and assumptions. These properties are critical
building blocks that characterizes narrative text for its a)
signification, i.e., the semantic content signifying an
association or concept given a word, sentence, or phrase and b)
significance, i.e., the relevance, rank, importance, or capacity

25

to make a difference. Unfortunately, there remain significant
gaps for advancing what we know about the production of
language in narrative text where “Double Subjectivity” exists.
Therefore, exploring deeper levels of expressivity with an
emphasis on “Double Subjectivity” may inform a new direction
in research.

particular word provides a useful measure of its significance
and identified the concept Term Frequency (TF), which states it
is possible to identify significant terms solely based on the term
calculated frequency of the term within that document. It
relates to average information, or entropy, of a term or group of
terms ranking in relationship to each other.

Learning “Double Subjectivity,” in narrative text poses a
difficult problem, as it seeks to give insight and meaning to
open-ended statements and indirect data. More complex
structures within the narrative text provide an expansive
landscape for advancing effective tools and crafting
applications to automate many language-related tasks. For
example, document summarization, automated text generation,
and many others. To show the gains in logic and reasoning,
Fig. 1 depicts advances made using current tools and new
frontiers that Double Subjectivity may shed light on, such as,
poems, metaphors, idioms, jokes, art, and storytelling. This is
to be achieved in exploring levels of narrative text.

Other outstanding contributions to text data mining in the
1990s and beyond with the advent of machine learning include
text representation and models construction [16]; [17]; [18];
[19]; [20]; data dimensions reduction research in feature
extraction [21]; [22]; and deep semantic mining [23].
Our research of Online News Frames is motivated by
framing theory which focuses on understanding the latent
meanings of observable messages in their contexts [24], and
can provide important insight into how the presentation or
“framing” of an issue affects the choices people make. Other
disciplines have focused on framing: in linguistics research,
similar approaches are also described as “latent semantic
analysis” (LSA) [25]. Social Network Analysis (SNA) focuses
on the importance of relationships among interacting units [26].

The Double Subjectivity framework may be useful for
learning some embedded internal structures of unstructured
narrative text that contain valuable embedded information cues
and biases. The human ability is unprecedented, but unscalable
in text comprehension. Currently, much of the online news and
other forms of narrative text (e.g., studies, earning call
transcripts, annual reports, letter to shareholders, and
disclosures statements) remains untapped due in large part to
human limitations of readability. Moreover, the Double
Subjectivity framework visualization will expose the dynamics
of migration paths of narrative text, the bias intensity, and the
intersection of forces where shifts in beliefs are realized.

B. Opinions and Social Influence
While text data mining techniques and methods have
proven to give insight to first-order subjectivity, we look to
dynamical systems modelling for insights into Double
Subjectivity that exist in narrative text. Models of social
influence, cultural dynamics, and information diffusion (i.e.,
topic modeling, sentiment analysis, and opinion mining), are
active areas of research [7], [1], [27]; [28]).
The opinions models, such as the voter model give insight
into the spread and distribution of opinions [1]. According to
[6] model, social impact theory, it posits the impact of a social
group on an agent as being dependent on the prominence of the
social sources, their proximity, and on source group mass (i.e.,
the number in the group). Political opinions and Axelrod’s
cultural dynamics model behave similar to these models that
capture the interplay between selection and influence [2], [3],
[4], [5].

We seek to give insight into the following questions in this
research inquiry: What is the migration path of online news
frames evolving over time? What is the effect of “Double
Subjectivity?” What are the conditions observed for
determining shift in beliefs?
In this manuscript we cover an examination of online news
framing of articles (i.e., a form of narrative text) for exposing a
deeper level of expressivity we coin Double Subjectivity. It is
our aim to demonstrate news framing as a step toward a deeper
learning about the production of language that may inform
scholars about machine intelligent behavior.

III.

To the best of our knowledge, examining Double
Subjectivity using online news and framing effects has not
previously been addressed for this class of learning problem in
computer science scholarly research. The following sections
will describe the methods, observations, and a discussion.
II.

BACKGROUNG ON THE ISSUE

Water is a fundamental resource affecting all aspects of life
on earth. Water is used for human consumption, industrial
processes, production of food, sanitation, as well as other
usages. The way water policy and water decisions are framed
affects water rights allocations, policy decisions, human
consumptions, emerging technologies, farming techniques, and
agricultural outcomes [29]. The issue of water insecurity in the
Southwest Region is particularly important in that the seven
states that make up the Southwest Region (Arizona, California,
Colorado, Nevada, New Mexico, Utah, and Wyoming) rely
primarily on fresh groundwater flows originating from the
Colorado River. The Colorado River was an efficient source of
water for decades, however, due to a decade of drought, this
once plentiful source of water cannot meet the demand to
sustain life as it exists in this region. This contributes to water
insecurity throughout the Southwest Region of the United
States.

RELATED WORKS

A. Text Data Mining, Text Summarization, Information
Retrieval
Scholarly research in computer science on latent meanings
in association of terms and documents to reveal relationships is
found in literature related to text summarization, information
retrieval, and text data mining. The earliest paper on text
summarization is that of [15] that describes work done at IBM
in the 1950s. In his work, [15] proposed that the frequency of a

26

When online news sources use strategic devices for
presenting prominent aspects and perspectives about an issue
using certain keywords as well as stereotyped images and
sentences for the purpose of conveying latent meanings about
an issue, it is called framing [30]. Water insecurity in the
Southwest Region of the United States exemplifies an issue
that is appropriate for study through the lens of Double
Subjectivity that exists in framing by online news sources
because this issue is context specific, complex and
characterized by uncertainty. Newspapers in the Southwest
regularly produce in-depth articles about drought, water and
climate change that are published online. However, the general
public outside of the Southwest has very little experience with
water insecurity. Biased framing or terminology are more
likely to influence uninformed respondents [31] or respondents
with reduced exposure to or interest in an issue [23]. Therefore,
citizens’ attitudes and beliefs about water insecurity are likely
influenced by the way reporters frame this issue. This source of
unstructured text offers researchers a body of content in which
to explore the production of language in the context of a socioenvironmental issue. The issue of water insecurity is a case
study needed to explore the patterns of interaction between
online news sources and the effects of their frame choices. This
research can generally apply to any large, unstructured dataset
which is affected (or biased) by framing. It can therefore be
extended to other applications such as economics or political
discourse.
IV.

dynamics and social influences and hence make better
informed decisions. Having a visual tool that automatically
processes vast amounts of online news will expose policy
implications, risk, and public perceptions over the short and
long term; thereby offering a mechanism for adjusting policies
in a positive direction.
A. Dataset Description
The news data for our study was collected from Google
News1, which is a news feed aggregator. Our feature selection
comprises four different characteristics of a given article.
Namely a) the news articles being published by online news
sources, b) the news source that generate the articles, c) the
frequency of news publications by sources over time, and d)
the salient terms contained in the article.
We restrict the time period from which the news articles
published on the Internet by online news sources. Which for
this research, was January 2006 to March 2015.
Articles were gathered by limiting the search for keywords
associated with water or sub-topics of water consequences
within Arizona, Colorado, California, and Nevada. 55,000
news articles were collected and the articles were then stored in
a database for undergoing data pre-processing that included
removing errors and inconsistencies in order to improve the
quality of data. After data pre-processing, 30,000 articles were
deemed relevant for our news dataset and 25,000 were deemed
irrelevant. We plan to publish our dataset in Fall 2017 to the
"Data Exchange Network2."

METHODS

Online news framing of critical socio-environmental issues
is a complex and dynamic social network, which can be studied
as a graph. Graph analysis has become important in understand
the dynamical process in the production of news frames.
Graphs allows for the visualization of the social network that
show interdependency of actors (or nodes) in terms of the
social relationships, such as friendship, kinship, or financial
exchange [33]; [34]. The presence of the phenomenon of
influence appears as a dynamic process for the formation and
transmittal of group standards, values, attitudes, and skills as
accomplished in online news communications [35]. Influence
is the tendency of people to become similar through
endogenous interactions [28]. This phenomenon coupled with
the vast amounts of online news articles being produced every
second poses a potential challenge when seeking to gain
knowledge about critical issues. Graphs represent objects
where order and disorder co-exist. Graphs prove well for
showing social interactions, influence, migration paths, and
framing effects. For instance, a graph may expose news
sources which hold central positions that function as points of
prominence, control, and stability and edges that act as
highways for lead relationships and exchanges of news frames.
These intertwined dynamics coupled with the vast amounts of
online news being produced daily, makes graphs an important
tool for visualization and analysis of information flows
pertaining to critical issues. Furthermore, the output of our
graph will be a human readable network visualization, which
show the overall spatial-temporal behavior of the paths. This
visualization will enable one to see at a glance the cultural
1

B. News Frame Issues Network Construction
We start the construction of our news frame issues network
by defining our nodes; which we consider as our edge
connections between two nodes, and the boundary of the
network in question, i.e. what relations and what nodes should
be included in the dataset.
In this research we chose news articles being published by
online news sources and the news sources that generate the
articles to serve as our nodes. We reason that news sources
play a critical role in the propagation of bias about issues and
bias in online news drive a wedge between evidence and
beliefs [36]. In total, 280 news sources were identified to
potentially influence public perceptions of the issue of water
insecurity using strategic framing. Coverage of elites in articles
is a property of particular interest in this study, as this factor
has an effect on the bias intensity that news sources adopt over
time. According to Druckman (2001), the way elites frame an
issue is a driving force for shaping public opinion. The
boundary of our network is water or sub-topics of water
consequences within Arizona, Colorado, California, and
Nevada, as shown in Fig. 2.

2

http://news.google.com/

27

http://www.insna.org/connections.html.

ሼܽǣ ሺܽଵ ǡ ܽଶ ǡ ‫ ڮ‬ǡ ܽ௛ ሻ ‫ܧ  א‬ଵ ሽis the set of neighbors of ࢇࢎ such
that ࢇࢎ are articles with the similar sub-issue.
ࡾ૛ . A & S (articles produced by the same source). A
directional edge connection is constructed for ‫ܧ‬ଶ when
ܵ௚  ‫ܧ  א‬ଶ ՜ ‫ܣ‬௛ ሺܽሻ ൌ ሼܽǣ ሺܽଵ ǡ ܽଶ ǡ ‫ ڮ‬ǡ ܽ௛ ሻ ‫ܧ  א‬ଶ ሽis the source
(or producer) of the set of neighbors of ࢇࢎ articles, where ࢇࢎ is
similar article sub-issues.
ࡾ૜ . S & F (sources with sub-issue to sub-issue with the
same frame choice). A non-directional edge connection is
constructed for ‫ܧ‬ଷ when ܵ௚ ሺ‫ݏ‬ሻ ൌ ൛‫ݏ‬ǣ ൫‫ݏ‬ଵ ǡ ‫ݏ‬ଶ ǡ ‫ ڮ‬ǡ ‫ݏ‬௚ ൯ ‫ܧ  א‬ଷ ൟ is
the set of neighbors of ࢙ࢍ such that ࢙ࢍ share the same dominant
frame choice.

Figure 2. Drought severity impacting the U.S. Southern Region.
Source: National Climatic Data Center, National Drought Mitigation
Center, U.S. Department of Agriculture, National Oceanic and
Atmospheric Administration.

Since water is a fundamental resource affecting all aspects
of life, we can expect to see a relationship between the number
of articles being produced on the issue as an indicator of its’
prominence and the framing choices of the news sources.
Which is key for driving policy and decision-making and
shaping attitudes, values, and bias. We make connection ties
from one news source to another through the capture of
framing adoption overtime as it happens during migration.
Though we recognize the value of reciprocal relationships (i.e.,
acknowledgement of both news sources as using the same
frame choice), this type of hand shaking is a challenge to
capture using the article content itself. This is largely due to
news sources not crediting other news sources in their reports.
The resulting network aim is to capture structures that were
created and maintained through repeated patterns of framing
and its migration path overtime.

Figure 3. A subset of the News Frame Issues Network that comprises
two news source nodes with connecting articles using the same subissue and using the same frame choice. Our visual design language is
expressed as follows: a) blue circles around the notation ܵ௚ denotes
online news sources node that produced the article and propagates a
central organizing idea (i.e., framing), b) orange circles around the
notation ‫ܣ‬௛ denotes an online news articles node, c) thin black lines
correspond to edge connections among neighboring articles covering
the similar issue, d) thick golden lines correspond to edge
connections of news sources who produce articles covering similar
issue and e) thick red lines correspond to managerial news frame.

C. Problem Formalization of News Frame Issue Network
The overarching research problem is expressed through the
construction of an issues network defined as follows:
We model a news frame issues network as a graph ‫ ܩ‬ൌ
ሺܵ௚ ௧ ǡ ‫ܣ‬௛ ௧ ǡ ‫ܧ‬௥ ௧ ሻ consisting of a) ܵ௚ that denote a set of source
nodes containing ݃ ൌ ሼ‫ݏ‬ଵǡ ‫ݏ‬ଶ ǡ ‫ ڮ‬ǡ ‫ݏ‬௚ ሽ elements and b) ‫ܣ‬௛ is a
set of article nodes containing ݄ ൌ ሼܽଵǡ ܽଶ ǡ ‫ ڮ‬ǡ ܽ௛ ሽ elements
that operate within the time window ‫ݐ‬. In general,‫ݐ‬indicates
one discrete time step of a reporting period by ܵ௚ . Let ܵ௚ ൌ
ሼ‫ܥ‬௜ ǡ ‫ܨ‬௜ ሽ be the set of source properties, where a) ‫ܥ‬௜ is the set of
terms (i.e., sub-issue keywords or content-descriptors) and b)
‫ܨ‬௜ is dominate frame choice (identity) the news source uses.
Let ܴ be the number of relations. Each relation has a
corresponding set of edge connections, ‫ܧ‬௥ ௧ , directed/undirected
as edge elements. The issues network, subscript ‫ ݎ‬ൌ ͵
correspond to the total number of relations. The edge set
represents the communication channels between node pairs. ‫ܣ‬௛
are children of ܵ௚ , therefore, they may inherit the properties of
the parent news source, as shown in Fig. 3.

Problem: Given ‫ ܩ‬ൌ ሺܵ௚ ௧ ǡ ‫ܣ‬௛ ௧ ǡ ‫ܧ‬௥ ௧ ሻ about ‫ ܫ‬issue, construct
a graph for determining how frames are produced in online news
media over time.
The aim of constructing a news frame issues network using
water insecurity as a contextual case is a) for deeper
understanding of how framing advances novel knowledge
discovery with sensitivity to “Double Subjectivity” as a factor in
the production of language in text narratives and b) to explicitly
examine the temporal dynamics of structural changes that may
exist within the network.
The definition of our overarching research problem was
defined: “How is the issue of water insecurity in the Southwest
Region of the United States being framed in online news media
over time?”
D. Model Setup
To model our news frame issues network, we propose
formulating a new version of information feedback on a social
system in the framework of [1] model for cultural dynamics
with an emphasis on bias that emerges as “Double

The relations (or rules) for ‫ܧ‬௥ edge connections are as
follows:
ࡾ૚ . A & A (articles to articles). A non-directional edge
connection is constructed for ‫ܧ‬ଵ when ‫ܣ‬௛ ሺܽሻ ൌ

28

Subjectivity” in narrative text. Axelrod’s [7] model is built on
two simple assumptions: a) people are more likely to interact
with those who are more similar to them, and/or to be more
receptive to influence from those who are similar—a
mechanism of Selection and b) these interactions tend to cause
similarity among interacting actors—Influence. Though our
model behaves similar to Axelrod’s [7] when deciding how to
interact in the network, it differs in that we give insight into the
endogenous and exogenous forces that may be at play in
dynamic systems. Therefore, our Double Subjectivity social
influence model, integrates cultural dynamics extensions [28]
with cusp catastrophe model [38]. Cusp catastrophe model is
useful for describing nonlinear relationships such as found in
narrative text. We particularly focus on the different forces at
work in the bias slant employed in news frames as it allows for
the degrees of freedom whereby alternative pathways may be
realized. The cusp catastrophe model allows for understanding
the different forces at work when quantifying bias and the
migration path of bias formation.

enter the overall conversation about water consequences by
linking to the most prominent mass. Thereby, leveraging facts
and neighboring nodes relative baseline. This is similar to
operation of observed in Hidden Markov Model (HMM),
whereby the news sources absolute baseline is hidden with
adjustments made over time. In contrast, the relative baseline is
likened to the observations one can make in the HMM for
getting a sense of the state [13]. Furthermore, we imagine that
ߙ௚ correspond to the endogenous propensity of the news source
nodes to express its own bias (or Double Subjectivity), while
ߚ௚ represent the exogenous force in the network.
At the start of the process, each news source ݃ ‫ܵ א‬has a
non-negative node mass associated with it, corresponding to
the fraction of the news sources that initially report (i.e.,
through signaling) on similar sub-issues about water insecurity.
The dynamical system allows for each news source to switch
frame choice, ‫ܨ‬ሺ݁ሻǡand sub-issue interest, thereby enabling
random selection of news source interaction. As well, news
sources are susceptible to be influenced when they interact with
neighboring news sources who share similar bias intensity.
The full state space may be calculated by counting the news
sources as expressed as the mass vector ܵ௚ ሺ‫ݐ‬ሻ.

The integration of cultural dynamics and cusp catastrophe
model for defining our new Double Subjectivity social
influence model may shed insights on deeper levels of
expressivity in narrative text where bias offers alternative
pathways and possibilities. This remains an emerging research
topic for understanding the production of language that may
help in synthesizing vast amounts of unstructured text and
learning online social behaviors. Here we explore the process
news sources use when producing online news articles. The
main factors we consider in this production are the facts, bias
intensity, and signals that derive from neighboring news
sources. The signals that derives from news sources is liken to
the reporter-relative or a floating baseline as mentioned earlier.
In the process of time, the news sources Absolute Baseline will
undergo adjustments as the bias intensity change.

F. Defining Bias Intensity for Expressing Double Subjectivity
We situate the quantification of Bias Intensity in terms of a
mathematical catastrophe theory [38]. Catastrophe theory is a
branch of non-linear dynamic systems theory that originates
with the work of the mathematician Rene´ Thom [38] to help
explain biological morphogenesis as one of the great mysteries
confronting mathematical biology. A key property in
catastrophe theory is that the system under study is driven
toward an equilibrium through its use of gradient descent or
potential function for seemingly automatic guidance (i.e.,
through the law of attraction) occurring in the system, which is
important in research of social influence, particularly when
considering the property of convergence and stable states. The
cusp model is the most well-known and simple model of
catastrophe theory positing that nonlinear transition from one
state to another of a system are guided by two controlling
variables, the asymmetry, and bifurcation factor.

E. Double Subjectivity Social Influence Model
Online news sources tend to produce articles about an issue
‫ܫ‬of interest to society, such as water insecurity, the state of the
economy, or affordability of health care. Additionally, news
sources may receive signalsߚ from other news sources on the
importance of the issue, based on observed increase to the
number of articles other neighboring news sources produce.
They receive facts ݂ about an issue. The news sources then,
selects a Bias strategy ߙ using as the basis of its calculation of
the bias intensity. More specifically, each news source ܵ௚ with
interest in ‫ ܫ‬issue at time ‫ ݐ‬generate news articles
ሺሻ  ൌ ߙ௚  ൅  ߚ௚ ሺ݂ሻ

Consider, for example, the social and economic inequality
movement, Occupy Wall Street Movement. What began as
small grassroots pressure points to address pay inequality by
fast food workers and Walmart employees has transition to
giving voice to 99% and moving the political conversation in
the U.S. election. This transition, from a grassroots protest in
Manhattan’s Zuccotti Park to making inequality and the wealth
gap the core of the political race, is a catastrophe.

(1)

where ߙ௚ and ߚ௚ are the coefficients of the news source
while ݂ are the facts received. In the first interaction, set ߙ௚  ൌ
Ͳ, denoting bias intensity; this value will be calculated upon
interacting with neighboring nodes and should change for
giving shape to the news source Absolute Baseline. Time
evolves in discrete steps t = 0, 1, 2, . . ., and ܵ௚ ሺ‫ݐ‬ሻ denotes the
mass count on ܵ௚ at time ‫ݐ‬. The maximization of ሼܵ௚ } gives
the sub-issue most important, ‫ܯ‬௜ ; a count of the largest
cluster—the mass—of nodes reporting on a water sub-issue.
This initialization of ߙ௚ and ߚ௚ provides access to new nodes to

Let ‫ ܯ‬ൌ ሼ‫݈ܽ݅ݎ݁݃ܽ݊ܽܯ‬ǡ ‫ܿ݅݉݋݊݋ܿܧ‬ǡ ‫ݐ݈݂ܿ݅݊݋ܥ‬ሽ and ܵ ൌ
ሼ‫ݐݏ݁ݎ݁ݐ݊ܫ݊ܽ݉ݑܪ‬ǡ ܵܿ݅݁݊ܿ݁ሽ be the aggregate count of the
sets of frame choices obtained from the edge connection. ܵ௚ is
assigned the Frame Identity corresponding to their ‫ܨ‬௜ property
at time ‫ݐ‬.
Definition: ࢠ is Bias, a projection on the behavior surface
for predicting the migration path that show the gradual shift in
bias intensity of the online news source when shaping the

29

frame narrative about the issue of water insecurity. This factor
is a measure of the strength of bias, that is, “weak bias (safe)”
or “strong bias (insecure or harmful)”—respectively S(ecure)
and I(nsecure).

We combine Index-1, Index-2, and Index-3 to denote state
transitions for updating shrinkages and growth. For instance,
SJS denotes strong frame identity (S), a sense of justness (J),
and a sense of security or being safe (S).

Definition: ࢞ is the asymmetry control (or normal) factor ‫ݔ‬.
This factor receives the label Justice, denoted on a scale that
range from ‫ܬ‬ሺ‫ݐݏݑ‬ሻ‫ܷ݋ݐ‬ሺ݆݊‫ݐݏݑ‬ሻ. Justice is a measure of the
news source perception of fairness of water consequences.

VI.

A. Influence Dynamics and Migration Path
Traditional cultural dynamics models show the network
sizes are power law distributed. We integrate models of cultural
dynamics with the cusp catastrophe model to explore Double
Subjectivity through quantifying the bias intensity. Our analysis
show this measure has potential to change the network structure
as the heavy reliance on prominent mass count is not the only
law of attraction at work.

Definition: ࢟ is the splitting factor or the bifurcation factor.
This factor receives the label Frame Identity, denoted as
ܵሺ‫݃݊݋ݎݐ‬ሻܽ݊݀ܹሺ݁ܽ݇ሻ.
We argue that, Frame Identity and the perception of Justice
are key forces for predicting the Bias Intensity of news sources
when producing articles. Naturally, Frame Identity is one form
of bias, because of the strategic devices for presenting
prominent aspects and perspectives about an issue using a
strong slant for the purpose of conveying latent meanings about
an issue [30]. We view Justice as being of equal importance as
it captures the perceived sense of fairness about an issue. Fig.
4 provides a depiction of the News Source Bias Intensity

Though our model is posed to scale to full dataset capacity,
we focus on a small subset of the network for this preliminary
evaluation. Our model allows for news sources generating
articles about water consequences to interact freely with other
news sources. However, because news sources receive signals
that provide a relative-baseline—leveraging other news sources
opinions, interpretations, and perceptions—it is most likely that
a news source will choose interactions with those that are
similar. There is a chance for a news source to interact with
another news source based on an increase in their bias
intensity, even though there exist no connection. And there is a
higher chance that news sources will only interact with those
whom they’re connected with, meaning breaking out of the
cluster is caused by catastrophic shifts in bias.
Further analysis of the Bias Intensity function, a variant of
cusp catastrophe model, shows interesting behavior for making
decisions about trust and distrust. We note that any space on
the surface response represent the state of the news source
under observation. For instance, as the news source perceive
the issue will not lead to fair water consequences, as they move
toward the cusp, this will trigger them to start attributing blame
toward the population who is causing the harm. A
contextualization of this case with water insecurity would
show, as a news source who has ties to nodes employing
scientific frame choice perceive unfairness (unjust), they will
notice the population more aligned with elites are becoming
increasingly bullish in their handling of the water and are
attracting other news sources (i.e., homophily), because their
narrative is spreading. At this point when feelings of unfairness
intersect with the dominance of the elites, they will start
scanning for those to attribute blame; thereby entering a space
of distrust and strong bias. This kind of model exhibit
hysteresis, thereby making it hard to shift between surface
response planes, as the migration path will be different. We
will give treatment to other hypotheses associated with bias
that lead to trust, as a result of perceived positive water
consequences in future work.

Figure 4. We depict the Cusp Catastrophe Model for measuring the
shift in News Sources Bias Intensity.

following cusp catastrophe model for predicting gradual shifts
of views and showing the possibility space. A discretized
approach to opinion research has been conducted in scholarly
research [39] and applications of cusp catastrophe [40].
V.

OBSERVATIONS OF THE MODELS

POSSIBILITY SPACE TRANSITIONS

Nonlinear relationships represent a variety of possibilities
and pathways of which the linear case is but a limiting one.
Here we propose expressing our possibility space using three
variables; a) Frame Identity=[Index-1 ((S, S(trong), 0), (W,
W(eak), 1))], b) Justice=[Index-2 ((J, J(ust), 1), (U, U(njust), 1), (0, N(eutral), 0))], and Bias Intensity=[Index-3 ((S,
S(ecure), 1), (I, I(nsecure), -1), (0, N(eutral), 0))]. Index-1
represents the control variable Frame Identity, which is the
perceived dominance of elites in the reporting the news. Index2 represents the sense of Justice in the handling of the issue.
Index-3 represents the dependent variable Bias Intensity, which
has the effect of signaling secure (or safe) or insecure (or
harmful) issue.

VII. CONCLUSION AND OPEN QUESTIONS
We have presented a new concept that allows for an
adjustment of the absolute baseline of a news source (or agent)

30

that takes into account ones’ bias for expressing Double
Subjectivity through news frames.

[18] A. Tan, N. Zhong and L. Zhou, "Text Mining: The state of the art and
the challenges." Proceedings of the PAKDD Workshop on Knowledge
Discovery and Data Mining, 65—70, Beijing, China 2000.
[19] S. Tan, X. Cheng, B. Wang, H. Xu, M. M. Ghanem, Y. Guo, “Using
dragpushing to refine centroid text classifiers”, In Proceedings of the
28th annual international ACM SIGIR conference on Research and
development in information retrieval (SIGIR '05). ACM, New York,
NY, USA, 653-654. 2005.
[20] M. Tsytsarau & T. Palpanas, Survey on mining subjective data on the
web, Data Mining and Knowledge Discovery, 24(3), 478-514, 2012.
[21] H. Karanikas, C. Tjortjis, and B. Theodoulidis. "An Approach to Text
Mining using Information Extraction", Proc. Workshop Knowledge
Management Theory Applications (KMTA 00), 2000.
[22] Q. Hu, D. Yu, Y. Duan, & W. Bao, A novel weighting formula and
feature selection for text classification based on rough set theory, in
Proceedings of the 2003 International Conference on Natural Language
Processing and Knowledge En C. Jiang, F. Coenen, R. Sanderson, M.
Zito, “Text Classification Using Graph Mining-Based Feature
Extraction”, Knowledge-Based Systems, vol. 23, no. 4, pp. 302-308,
2010.gineering (pp. 638-645), 2003. IEEE.
[23] B. Liu, Sentiment analysis and opinion mining, Synthesis lectures on
human language technologies, 5(1), 1-167, 2012.
[24] D. A. Scheufele, “Framing as a theory of media effects”, The Journal of
Communication, 49(1), 103-122, 1999.
[25] S. Dumais, G.W. Furnas, T.K. Landauer, S. Deerwester, Using latent
semantic analysis to improve information retrieval. In Proceedings of
CHI’88: Conference on Human Factors in Computing, New York:
ACM, 281-285, 1988.
[26] C. Fellbaum, “A Semantic Network of English: The Mother of all
WordNets,” in: Computers and the Humanities 32: 209-220. 1998.
[27] D. Bindela, J. Kleinberg, & S. Orenb, How bad is forming your own
opinion?, Games and Economic Behavior, 92, 248–265, 2015.
[28] D. Kempe, J. Kleinberg, and ´ E. Tardos, “Maximizing the spread of
influence through a social network,” in Proceedings of the ninth ACM
SIGKDD international conference on Knowledge discovery and data
mining. ACM, pp. 137–146, 2003.
[29] M. Lombard, J. Snyder-Duch, C. C. Bracken, Content analysis in mass
communication: Assessment and reporting of intercoder reliability.
Human Communication Research, 28, 587–604, 2002.
[30] R. M. Entman, “Framing: Towards clarification of a fractured
paradigm”, Journal of Communication, 43(4), 51-58, 1993.
[31] G.F. Bishop, R.W. Oldendick, A.J.Tuchfarber,. Effects of presenting one
versus two sides of an issue in survey questions. The Public Opinion
Quarterly 46, 69–85, 1982.
[32] J.A., Krosnick, Survey research. Annu. Rev. Psychol. 50, 537–567, 1999
[33] K. C. Chen, M. Chiang, H. V. Poor, “From technological networks to
social networks,” accepted and to be published in IEEE J. Sel. Areas
Commun.., 2013
[34] Y. F. Chou, R. G. Cheng, and H. H. Huang, “Performance evaluation of
referral selection algorithms in human centric communication
networks,”in Proc. 2012 International Symposium on Wireless Personal
Multimedia Communications, pp. 638–642.
[35] D. P. Cartwright, “Analysis of qualitative material”, In L. Festinger & D.
Katz (Eds.), Research Methods in the Behavioral Sciences (pp. 421470). New York: Dryden, 1953.
[36] R. K.Garrett, B. E. Weeks, R. L. Neo, Driving a Wedge Between
Evidence and Beliefs: How Online Ideological News Exposure Promotes
Political Misperceptions, Journal of Computer-Mediated
Communication, 4 August 2016
[37] Robert Axelrod. The dissemination of culture. Journal of Conflict
Resolution, 41(2):203–226, April 1997.
[38] Thom, Rene´. Structural Stability and Morphogenesis, 1972. D. H. Fowler
(trans.). Reading, MA: W.A. Benjamin.
[39] Sobkowicz, P. (2012). Discrete model of opinion changes using
knowledge and emotions as control variables. PloS one, 7(9), e44489.
[40] Homer-Dixon, T. F. (2006). The upside of down: Catastrophe, creativity,
and the renewal of civilization. Washington: Island Press.

We present in this article a) the first formal computer
science news frame issues network, b) a model for learning the
migration paths and patterns about issues, and c) the first
formulation of a bias intensity function using the Cusp
Catastrophe Model for showing gradual shifts surface response
space. Preliminary experiments suggest the integration of
cultural dynamic models with Cusp Catastrophe Model are
promising for exploring Double Subjectivity for revealing
latent relationships found in online news articles. Future work
involves testing other hypothesis and unfolding the potential
function to explore conditions of convergence.
REFERENCES
[1]
[2]
[3]

[4]

[5]

[6]
[7]

[8]

[9]

[10]

[11]
[12]

[13]
[14]

[15]
[16]

[17]

P. Cliord and A. Sudbury. A model for spatial conict. Biometrika,
60(3):581{588, 1973.
Eli Ben-Naim, Paul Krapivsky, and Sidney Redner. Bifurcations and
patterns in compromise processes. Physica D, 183, 2003.
Claudio Castellano, Santo Fortunato, and Vittorio Loreto. Statistical
physics of social dynamics. Reviews of Modern Physics, 81:591–646,
2009.
Guillaume Deffuant, David Neau, Frederic Amblard, and G´erard
Weisbuch. Mixing beliefs among interacting agents. Advances in
Complex Systems, 3:87–98, 2000.
Rainer Hegselmann and Ulrich Krause. Opinion dynamics and bounded
confidence: Models, analysis and simulation. Journal of Artificial
Societies and Social Simulation, 5(3), 2002.
B. Lataneƍ. The psychology of social impact. American psychologist,
36(4):343, 1981.
R Axelrod. The dissemination of culture - A model with local
convergence and global polarization. Journal of Confict Resolution,
41(2):203{226, APR 1997. ISSN 0022-0027. doi:
f10.1177/0022002797041002001g.
K. C. Chen, M. Chiang, H. V. Poor, “From technological networks to
social networks,” accepted and to be published in IEEE J. Sel. Areas
Commun.., 2013
Y. F. Chou, R. G. Cheng, and H. H. Huang, “Performance evaluation of
referral selection algorithms in human centric communication
networks,”in Proc. 2012 International Symposium on Wireless Personal
Multimedia Communications, pp. 638–642.
Miller McPherson, Lynn Smith-Lovin, and James M. Cook. Birds of a
feather: Homophily in social networks. Annual Review of Sociology,
27:415–444, 2001.
Mullainathan, Sendhil, and Andrei Shleifer. 2005. “The Market for
News.” American Economic Review 95 (1): 1031-1053.
Thomas A. DiPrete and Gregory M. Eirich, Cumulative Advantage as a
Mechanism for Inequality: A Review of Theoretical and Empirical
Developments, Annual Review of Sociology, Vol. 32: 271-297 (Volume
publication date August 2006)
L. R. Rabinerand B. H. Juang,”An introduction to hidden
Markovmodels,” IEEE ASSP Mag., vol. 3, no. l, pp. 4-16, 1986.
P. Raghavan, S. Amer-Yahia and L. Gravano eds., “Structure in Text:
Extraction and Exploitation”, In. Proceeding of the 7th international
Workshop on the Web and Databases(WebDB), ACM SIGMOD/PODS
2004, ACM Press, Vol 67, 2004.
H. P. Luhn. “The Automatic Creation of Literature Abstracts,” IBM
Journal of Research and Development, 2, No. 2, 159 (April 1958).
Salton, G., A. Wong, and C. S. Yang. "A vector space model for
automatic indexing." In Communications of the ACM 18 (11), 1975:
613-620.
Steinheiser, R., and C. Clifton. "Data Mining on Text." 2012 IEEE 36th
Annual Computer Software and Applications Conference IEEE
Computer Society, 1998:630.

31

