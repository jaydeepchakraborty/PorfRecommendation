Tracking Personal Processes in Group Projects
Ly Danielle Sauer, Timothy E. Lindquist, Jeremy Cairney Computer Science and Engineering Arizona State University Tempe, Arizona 85287-5406 {sauer, lindquist, cairney}@asu.edu February 8, 1999 Abstract
Software engineering continues to develop methods for process improvement and quality. The Personal Software Process is one way to introduce software engineers to aspects of process tracking, assessment and improvement. In this paper, we describe the software tools that we've constructed to support the planning and postmortem of software activities. We describe an approach that allows the personal software process to be used in group projects, while still allowing the individual engineer to employ personal process quality and improvement techniques on their own activities. The tools supporting planning and postmortem are used in the context of a workflow system developed at ASU, called Open Process Components, whose aim is to componentize software services and provide interoperability among various approaches. These tools and approaches explore software development in the increasingly distributed environment in which the software engineer is responsible for their own assessment and improvement.

1.0 Introduction
Measuring, guiding and refining an organization's software process improves effectiveness of development resources and provides a level of control on software quality. The development of the SEI Capability Maturity Model[24] has raised awareness of the need for better software processes. Software processes are often discussed at the project management level, and its not uncommon for an organization to employ the services of a process engineer with the intent of wide-scale process improvement. Software processes describe the interaction among people and artifacts in carrying out the work involved in the software life-cycle. A software process encompasses the work that will be done (activities), what it will use and produce (input and output products), who will do it (agents), as well as, when and how it will be done (behavior). The past decade has seen increased demand for more powerful and robust automated software process systems. Tool vendors and the research community have responded with a variety of approaches. A review of the tool market place shows many groupware, process and workflow tools whose functionality ranges from graphical modeling or simple enactment to full support for defining, executing, analyzing, measuring, and tracking software processes. The Plethora of

tools, most of which have not been widely adopted, combines together with the increasingly distributed nature of software development today to form one of the challenges addressed by this paper. That is, the need to have interoperability among a heterogeneous set of process tools (which execute on distributed heterogeneous platforms.) The efforts of the Workflow Management Coalition (WfMC) [30] and the Object Management Group (OMG) are aimed at this challenge. Both organizations are identifying common interfaces that vendors can use for interoperability among their products. Other middleware efforts have identified process support services, for example, PCIS (Portable Common Interface Set) [9]. A follow-on project [18] integrates the Open Process Components of Gary [13] with other middleware components, such as version and configuration management. In this paper, we build on these efforts to show how processes can be distributed compositions of personal process components. Considerable research has addressed automating the software process. Some are addressing formalisms for expressing process [3]. Different formalisms such as Petri nets[12], rule-based formalisms[1,25], process programming languages[10], event-based representations [4,8,21], and object-oriented approaches[8,21] are

1 of 8

Overview of Personal Software Process

proposed for representing software processes. Other research includes comprehensive environments centered on process, such as ISTAR, in which all activities are modeled using a contractual model. In a process-centered environment, nearly all activity takes place within a defined process. Christie has elaborated several problems in the adoption of process automation [6]. Process-centered environments are typically all-or-nothing and difficult to adopt in steps. Management is justifiably reluctant to invest in dramatic change without a gradual migration path or concrete evidence of value-added. Benefits of enactment support or tracking require time consuming frontend resources for process definition. Some systems require definition of activities that don't have relevance to tracking and improvement. Adoption also places other stresses on an organization ranging from engineer's perception of excessive intrusion to the need for additional personnel who specialize in process engineering. In this paper, we present a process framework that shifts its approach toward composable process components. Project processes are created by brokering among the building blocks of engineer's defined personal processes. Software engineers are responsible for tracking measuring and analyzing their own processes distinct from organizational concerns.

managing, and improving their predictability, productivity, and quality. PSP consists of a family of seven personal processes that progressively introduce data and analysis techniques (Figure 1 on page 2) [16,28]. Engineers use these data and analysis outcomes to determine their performance and to measure the effectiveness of their methods. Humphrey's initial result (applied to 50 students and three industrial software organization) indicates an average test defects improvement of over ten times and productivity improvements of better than 25% [28].
PSP3 Cyclic Development

Cyclic Personal Process

Personal Quality Managem ent

PSP2 Code Reviews Design Reviews

PSP2.1 Design Templates

Personal Planning Process

PSP1 Size Estimating Test Report

PSP1.1 Task Planning Schedule Planning

PSP0 Baseline Personal Process Current Process Time Recording Defect Recording Defect Type Standard

PSP0.1 Coding Standard Size Measurement Process Improvement Proposal

2.0 Overview of Personal Software Process
Current software professionals utilize private techniques and practices that were learned from peers or through personal experiences. Few software engineers are aware of, or consistently use methods that lend themselves to personal process improvement. A personal software development process is a concept introduced to address improvement needs of an individual. Watts Humphrey of the Software Engineering Institute has formalized a personal software development process called Personal Software Process (PSP). Today, there are various realizations of PSP to aid software engineers in applying the process. The realizations range from case tools and web-based repository browsers to formal training classes.

FIGURE 1.

PSP Process Evolution

2.1

Personal Software Process

Figure 1 on page 2 shows the PSP progression in which each PSP step includes all the elements of prior steps together with additions. The PSP process steps are Baseline Personal Process (PSP0, PSP0.1), Personal Planning Process (PSP1, PSP1.1), Personal Quality Management (PSP2, PSP2.1), and Cyclic Personal Process (PSP3). Starting in The Baseline Personal Process, the software engineer creates the foundations for measurement and improvement. PSP0 is the software engineers current software development process extended to provide measurements (time and defect trackings). PSP0 covers three phases: planning, development (design, code, compile, and test), and postmortem. PSP0.1 includes coding standards, size measurements, and a Process Improvement Proposal (PIP). Personal Planning Process (PSP1, PSP1.1) adds planning to the baseline. Here, the software engineer pre-

Personal Software Process (PSP) [15,16,17,28] is designed to assist software engineers in controlling,

Tracking Personal Processes in Group Projects

2 of 8

Applying PSP to Group Projects

pares the basis for project tracking, which include software estimates and development plans. The goal is to learn the relationship between program size and resources, as well as how to make realistic schedules. PSP1 enhances PSP0 and PSP0.1 to include size and resource estimation and a test report using Proxy Based Estimation (PROBE) as a method to estimate sizes and development times. Personal Quality Management (PSP2, PSP2.1) provides defect management by tracking the relationship between time spent in reviews and the phases during which defects are injected and removed. Prior project defect data are used to realize review checklists and selfassessments. PSP2.1 extends PSP2 with design specifications and accompanying analyses. The goal is to provide the criteria for design completion. Cycle Personal Process (PSP3) introduces techniques for developing large-scale projects. The approach calls for sub-dividing into personal processes. Development is done in incremental steps starting with a base module.

Project Tables are automated forms, such as Logs, Summaries, and Templates. The log tables support tracking time, defects and issues. The Project Summary table records the estimated and actual totals for the project and for all projects to date. The Cycle Summary table supports the project summaries by capturing the planned and actual size, time, and defects for each cycle.

2.3

ECEN 4553 Database Browser

ECEN 4553 PSP Database (PSP Database Browser) [5] is a web-based database that also automates many of the PSP forms, scripts, calculations, and reports. The database is organized to capture a set of related data for an individual software engineer. The core of the database is the concept of a job, which is a software engineer's activity. Once the job is defined, the software engineer can log time against the job, log defects against the job, and specify a detailed project plan for the job. Although the PSP Database Browser does not strictly adhere to all of Watts Humphrey's Personal Software Process data, it collects planned and actual data for each job. ECEN 4553 PSP Database Browser automates a subset of Watts Humphrey's Personal Software Process with a web-based user interface.

2.2

Personal Software Process Studio

Personal Software Process Studio (PSP Studio or PSPS) [11] is a case tool developed at East Tennessee State University to assist in using the Personal Software Process. PSPS does so by automating the planning and postmortem artifacts. In particular, PSPS provides the following features: Data Measurement, Historical Database, Convenient Access to Tables, Statistical Calculations, and Guidance through the Process. The Data Measurement feature allows developers to accurately (similar to a stopwatch) measure development times, track defects, and measure program sizes. The Historical Database feature allows developers to store all of the developers historical PSP data in a reliable and secure database. Convenient Access to Tables provides a window with tab access to the forms. The Statistical Calculations feature automatically maintains totals and performs the statistical calculations. The Guidance through the Process feature provides on-line direction for using the PSP. PSP Studio groups all of the automated paper works, forms, and calculations into two categories: Process Tables and Project Tables. Process Tables guide or improve the individual software engineer process with an online process outline, access to standard tables for defect, LOC and coding standards, and access to a process improvement proposal.

3.0 Applying PSP to Group Projects
ISO 9000 [7,22] and the Capability Maturity Model (CMM) [23,24] assist organizations in improving their processes. Personal Software Process [15,16,17,28], on the other hand, provides an improvement technique for software engineers, in the context of individually developed software. Seamless integration of the PSP within a software organization cannot be achieved, since individuals rarely cycle through all phases of development on a software project. Engineers can, however, apply PSP analysis techniques to their individual activities on group projects. The resulting metrics can be the basis for personal process improvement, without having the "big brother is watching over me" complex that is common to organizationally imposed quality and improvement efforts. This section discusses our approach to providing well integrated organizational and personal process improvement. At ASU, we have been developing software to support the use of planning and postmortem phases of the PSP and to support their application to various life-cycle activities. For example, in an organizational setting, an individual may be assigned to testing. The test engineer

Tracking Personal Processes in Group Projects

3 of 8

Applying PSP to Group Projects

would develop their own test process that includes planning and postmortem. The resulting personal test process becomes part of an organizational or project process. The "integratable" personal processes (personal test process) collect product measures, use defect analysis and consider resource usage as a means of improving that process segment. The artifacts and the automation we have developed are discussed in Section 3.2.

3.1

Process Components

The Open Process Component Toolset (OPC) [14,19,20] is a set of tools developed at ASU to support process definitions and enactment. OPC's basic premise is that a process is a process component and may consist of one or more process components. Process components may be compositions of subcomponents whose underlying representations may differ. For example, a Process Weaver component, called create_design, may be composed with a TeamWare Flow component called review_design. Thus, the Integrated Process is defined as a process component consisting of three process components: the Planning Process Component (Figure 2 on page 4), the Personal Software Activities Component, and the Postmortem Component. The Software Activities component may be any process component such as, testing, design, coding, or review. Discussion of these components and the support we have implemented for Planning and Postmortem artifacts can be found in the following sections (Section 3.1.1, Section 3.1.2, and Section 3.1.3). 3.1.1 The Planning Process The Planning Process Component defines the individual engineer's plans for the software activity. The process is assigned to the project planner, takes as inputs the customer requirements (written or oral) and produces as output an initial version of the planning artifacts, a requirements specification, a cost estimate report, and a size estimate report. Additionally, an engineering notebook for the project is created and initialized based on the activity schedule. At this phase, the project activity schedule and the project plan summary forms only contain planning information such as estimated total size, the project development duration, and defects injected and removed. Further descriptions of the project activity schedule, the project plan summary, and the engineering notebook are discussed in Section 3.2.

FIGURE 2.

Planning Process Component

As shown in Figure 2 on page 4, the Planning Process Component is composed of its children process components: Identify Requirement, Perform Size Estimation, Perform Cost Estimation, and Construct Plan. Each child process component is defined to perform a specific task to help planning the software activity and laying the groundwork for analysis. For instance, the Identify Requirement Process Component generates the requirement specification (SRS) given the customer requirements (Cust Req). Figure 2 on page 4 shows the OPC definition tool's graphical depiction of the Planning Process. The model includes nodes for Processes (process components that have subcomponents), Activities (process components without subs), Roles and Products. Directed edges depict relationships such as can_perform, is_input_to, has_output and has_sub. For example, the Requirement Specification (Product) is_input_to Perform Cost Estimation (Activity), and the Identify Requirement (Activity) has_output which is the Requirement Specification. 3.1.2 Personal Software Activities In the PSP, the planning and postmortem activities depend on a personal software process that includes the phases, planning, design, code, code review, compile, test, and postmortem. In our application of the PSP to group projects, we provide the capability to replace design, code, code review, compile and test with other activities. Our approach is to provide the background for the planning and postmortem phases as applied to any software related activities. In a group project, an individual engineer may

4 of 8

Tracking Personal Processes in Group Projects

Applying PSP to Group Projects

not be involved in coding, compiling and testing, but may instead work on design and design reviews, or may instead be a test engineer whose involvement does not go beyond planning, developing, executing and reporting on tests. Our assumption is that the analysis techniques that consider resources (labor, primarily), product measures and quality assessment all equally apply to any other software related activities, whether directly developing code or not. Process improvement should be a center of focus for all participants in a software process. At ASU, we have been using this approach to Integrating Personal Processes for group software projects in a classroom setting and for group independent study projects. Thus far, uses are for small applications in which most project members get involved with all of the life-cycle activities. The primary challenge in generalizing the approach to large group efforts has to do with product and quality measures. PSP relies on Source Lines of Code as the basis for product measures. Software defect management is the basis for quality, planning and process improvement. Engineers using PSP, record defects by type, phase injected and phase removed. PSP uses yield (percentage of defects removed before compiling), appraisal cost of quality and failure cost of quality as the primary input for quality management and process improvement. These are a good starting point for the practicing software engineer, however, one must define product measures and defects in a manner appropriate to the activity. For example, a test engineer may use test cases generated as the primary product measure. For example, test cases may be defined to be triples (input condition, action, expected result) independent of how the test case is realized in performing tests. Defect types for a test engineer may include: unsatisfied test requirement, and resulting software defects for which there existed a test case.

We have used OPC to depict Postmortem. The process is assigned to the process engineer and accomplishes its objective of producing the project plan summary by using the initialized project activity schedule, the project defect log, and the initialized project plan summary as input products. Unlike the Planning Process Component, Postmortem does not use children process components to accomplish its goal.

3.2

Automated Support for Process Artifacts

The Integrated Personal Process uses four artifacts: the Engineering Notebook, the Project Activity Schedule & Log, the Project Defect Log, and the Project Plan Summary. We have implemented each artifact as a standalone application. When using the worklist handler of OPC, enacting one of the Integrated Personal Process Planning or Postmortem activities may cause the invocation of one or all of these applications according to the process input and output specifications. All four artifacts use a single repository interface to store and manipulate data. The interface is implemented in Java, using synchronization to support multiple concurrent access. Highlights of these artifacts are detailed in the following sections. 3.2.1 The Engineering Notebook The Engineering Notebook is an application which implements some concept of the Personal Software Process Engineering Notebook. The Engineering Notebook objective is to create an engineering notebook that tracks a software engineers daily time usage. More specifically, as shown in Figure 3 on page 6, the Engineering Notebook allows a software engineer to define and record, for a given project, its activities, the time spent on the activities, and product lists of the activities. An activity is a unit of work which takes an engineers time (e.g. interruptions, coding, breaks, lunch, designing, etc.); it is any work performed by a software engineer. The time spent on each activity is recorded in an increment of hours; for instance, a job that takes 15 minutes could be recorded as 0.25 hours, but our usage generally limits granularity to one tenth of an hour (6 minutes). The product list entry allows the engineer to list products produced by the activity. The initial engineering notebook is derived from infromation in the Project Activity Schedule & Log.

3.1.3 The Postmortem Process The Postmortem Process Component defines a process for analyzing the performance (postmortem analysis) of a completed project. Postmortem analysis gathers product measures, performs actual resource usage analysis, performs actual defect analysis, and performs summary quality analysis.

Tracking Personal Processes in Group Projects

5 of 8

Applying PSP to Group Projects

to allow add-on functions. For example, the user can add the tools for estimation or a LOC Counter. The add-on tools are specified using MIME types. 3.2.3 Defect Log The Defect Log (DL) is an application which automates Defect Recording [15,16] to aid in tracking defects injected and removed. The defect data are stored in the defect log, which are used as input to generating the plan summary (Section 3.2.4) in postmortem analysis. The Defect Log is realized as a tabular application where the rows represent the defects and their information and the columns are classifications of the defects. As shown in Figure 4 on page 6, the DL allows its user to specify the date, the defect type, the injected phase, the removed phase, the fixed time, and a description.

FIGURE 3.

Engineering Notebook Main Window

Modification to the times in the engineering notebook causes the transfer of the times spent and the product list to the Project Activity Schedule & Log. 3.2.2 Activity Schedule & Log The Activity Schedule & Log (ASL) is an application, which aids in developing project plans. The ASL application allows the project planner to identify the activities, phases, agents, and times for the activity. When the user completes the activity specifications, ASL places the schedule in a persistent repository. An activity is a task of the project. A project may have a set of activities (process components) representing the work of all group members assigned activities on the project. Similarly, all engineers working on a project will have their own activity schedules, which reflect the lowerlevel activities necessary to complete their input to the group. The lower-level activities are subject to analysis and improvement as defined above. A project planner may also have an Activity Schedule and Log to coordinate the activities and products of a group of engineers. We envision that the project planner can use the Process Broker [27] (which is currently under development), to determine the kind of activities that the project may need and to check for the availability of those process components. To do this, the project planner first specifies the characteristics of the current project to the Process Broker. The Process Broker uses its locating and matching semantic engine and its repository of process components to determine the projects that best fit the specified criteria. For each activity, the project planner estimates a begin and end time, the development duration, the project size, and the output products. These are estimated values, thus, the project planner can use experience to determine the values, some tools, or historical project data. OPC is designed

FIGURE 4.

Project Defect Log Main Window

The date that the defect was discovered and the defect description can be anything that the user enters. The DL default defect types are: Documentation, Syntax, Build/ Package, Assignment, Interface, Checking, Data, Function, System, and Environment. These can be modified to allow application of planning and postmortem to any software activity. Additionally, the DL also provides default phases including: Planning, Design, Code, Review, Compile, Test, and Postmortem. Analogous to the defect types, these can be changed to accommodate the activity. Finally, the time required to correct the defect is recorded in hours and tenths. 3.2.4 Project Plan Summary The Plan Summary (PS) [15,16] is an application, to aid in planning and tracking a software activity. The plan summary is initialized in the planning activity and is com-

6 of 8

Tracking Personal Processes in Group Projects

Current and Future Work

pleted in postmortem. In our implementation, information in the plan summary is derived from the Activity Schedule & Log. The plan summary can be saved and named so that an engineer who participates in several software activities (reviews, testing, and coding, for example) can track data specific to the activity.

www.eas.asu.edu/~yfppg/ [3.] Armenise, P., Bandinelli, S. Ghezzi, C., and Morzenti, A. A Survey and Assessment of Software Process Representation Formalisms. International Journal of Software Engineering and Knowledge Engineering, vol. 3, no. 3, pp. 401-426. 1993. Ben-Shaul, I. and Kaiser, G. An Interoperability Model for Process-Centered Software Engineering Environments and its Implementation in Oz. Technical Report CUCS-034-95, Computer Science Department, Columbia U. 1995. L. Carter, ECEN 4553 PSP Database Tool, (University of Colorado at Boulder, Department of Electrical & Computer Engineering, ece-www.colorado.edu/~ecen4553/Reference/ psp/examples.html). A. Christie, et al. A Study into the Current Usage of Software Process Automation. Proceedings of the NSF Workshop on Workflow and Process Automation in Information Systems, Athens, GA, May, 1996. F. Coallier, "How ISO 9001 Fits into the Software World", (IEEE Software, January 1994, pp. 98-100). Conradi, R., et al. Object-Oriented and Cooperative Process Modelling in EPOS. In Software Process Modeling and Technology, A. Finklestein, J. Kramer, and B.Nuseibeh (Eds.), pp. 33-70. John Wiley. 1994. J.C. Derniame, et al. "Life-Cycle Process Support in PCIS, Or It Is Time to Think about Software Process Formalisms Standardization", in Proc. of the PCTE'94 Conf. PCTE Technical Journal No.2, PIMB Assn, November 1994. J.C. Derniame, and Gruhn, V. Development of Process-Centered IPSEs in the ALF Project. Journal of Systems Integration, vol. 4, pp. 127150. 1994. East Tennessee State University, Personal Software Process Studio, (East Tennessee State University, Computer and Information Science, www-cs.etsu.edu/softeng/psp/dlpsps.html). W. Emmerich, and Gruhn, V. FUNSOFT nets: A Petri-net Based Software Process Modeling Language. Proceedings of the 6th International Workshop on Software Specification and Design, Como, Italy. September 1991. K. Gary, "Process Interoperability with Open Process Components", Arizona State University, Computer Science and Engineering Department, Ph.D. Dissertation, expected August 1998.

4.0 Current and Future Work
OPC provides an initial set of tools for defining and enacting process components. The underlying implementation of OPC provides the framework for wrapping various process tools for interoperability. We have achieved initial wrappings of two products, and hope to soon demonstrate interoperability between these products in the near future. Thus, a process component can be defined in terms of sub components each under the direction of a different enactment engine. We have used our integrated personal software process approach in classroom projects and in group independent studies. The tools described in this paper will be introduced to these projects beginning in the Fall semester 1998. Enactment using OPC is controlled by a worklist handler tool, which connects to a repository of process components. Process components are all represented using Java objects. Until the tool wrappers are fully functional, enactment involves launching an application associated with the input and output products as specified with MIME types. A few important distinctions differentiate our approach to integrating personal processes. Engineers are not asked to carry out a defined process that they themselves have not developed. Engineers are motivated to use process improvement techniques, since they directly and solely apply to their own activities. Product and defect measures are defined by the engineer and thus problems of consistency do not arise. Engineer define their own personal process for the software activities they perform. These may defined or applied from definitions they obtain from other engineers.

[4.]

[5.]

[6.]

[7.]

[8.]

[9.]

[10.]

[11.]

5.0 References
[1.] Arbaoui, S., Mouline, S., Oquendo, F., and Tassart, G. PEACE: Describing and Managing Evolving Knowledge in Software Process. Proceedings of the 2nd EWSPT `92, Trondheim, Norway. September, 1992. Arizona State University, Open Process Component Toolkit, (Computer Science and Engineering Department, YFPPG Group, http://

[12.]

[13.]

[2.]

Tracking Personal Processes in Group Projects

7 of 8

References

[14.]

K. Gary, T. Lindquist, L. Sauer, and H. Koehnemann, "Automated Process Support for Organizational and Personal Processes", (Proceedings of the International Conference on Supporting Group Work (GROUP `97), the Integration Challenge, Phoenix, Arizona, USA, 16-19 Nov 1997). W. S. Humphrey, Introduction to the Personal Software Process (Reading, MA: Addison-Wesley, 1997). W. S. Humphrey, A Discipline for Software Engineering (Reading, MA: Addison-Wesley, 1995). W. S. Humphrey, "The Personal Process in Software Engineering", (Software Process Newsletter, Technical Council on Software Engineering, IEEE Computer Society, Vol. 13, No. 1, September 1994, pp. 1-3, http://www.sei.cmu.edu/products/publications/95.reports/95.ar.psp.swe.html). The US-France Technology Research and Development Project, PCIS2 Architecture Specification Version 1.0, (Lindquist, TE editor) SPAWAR Systems Command, San Diego CA, January 1998. T. Lindquist, "A Toolset Supporting Distributed Process Components", (Arizona State University, Computer Science & Engineering Department, Technical Report, TR-97-034, 1997). T. Lindquist, and J. Derniame, "Towards Distributed and Composable Process Components", (Proceedings of the European Workshop on Software Process Technology, June 1997). Melo, W.L. and Belkhatir, N. TEMPO: A Support for the Modeling of Objects with Dynamic Behavior. In A. Verbraeck, H.G. Sol, and P.W.G. Bots (Eds) Dynamic Modeling and Information Systems. Elsevier Science Publishers, North Holland. 1994. Mark C. Paulk, "How ISO 9001 Compares with the CMM", (IEEE Software, January 1993, pp. 74-83). Mark C. Paulk, Bill Curtis, and Mary Beth Chrissis, "Capability Maturity Model, Version 1.1", (IEEE Software, July 1993, pp. 18-27). Mark C. Paulk et al., "Capability Maturity Model for Software, Version 1.1", (Technical Report, CMU/SEI-93-TR-24, Software Engineering Institute, 1993). Peuschel, B. and Schafer, W. Concepts and Implementation of a Rule-based Process Engine. Proceedings of the 14th International Conference on Software Engineering, pp. 262-279. May, 1992. W. Royce, "Managing the Development of Large Software Systems: Concepts and Techniques", (WESCON Technical Papers, Vol. 14, Los Ana-

gles, WESCON, August 1970). [27.] L. Sauer, "Brokering of Process Components", (Arizona State University, Computer Science & Engineering Department, Ph.D. Dissertation Proposal, December 1997). Software Engineering Institute, Personal Software Process (PSP), (SEI Technology, http:// www.sei.cmu.edu/technology/psp/). Software Engineering Institute, A Specification for Automated Support for the PSP, (SEI Technology, http://www.sei.cmu.edu/technology/pspAuto/indexh.html). The Workflow Management Coalition. The Reference Model. WfMC Document Number TC001003, January 1995.

[15.]

[28.]

[16.] [17.]

[29.]

[30.]

[18.]

[19.]

[20.]

[21.]

[22.]

[23.]

[24.]

[25.]

[26.]

8 of 8

Tracking Personal Processes in Group Projects

